[07/20 17:52:37]  --------------------------------------------------------------------------------
[07/20 17:52:37]  Iteration: 1 (0 solution, 0 counterexamples)
[07/20 17:52:37]  Generator returned sat in 0.005422 secs.
[07/20 17:52:37]  Candidate solution: 
[1m[94mif(qbound[t][8]):
	c_f[0][t] = max(0.01, 3/2c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/20 17:52:38]  Improved number of small numbers from 100 to 100 out of a max of 100
[07/20 17:52:38]  Verifer returned sat in 0.284157 secs.
[07/20 17:52:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t   cwnd_0,t   service_0,t  losts_0,t    queue_t  bottle_queue_t
0  -12599.720833  -13299.720833  13299.720833 -12599.720833     0.1000 -13299.720833        0.0   700.0000        700.0000
1   -8662.195833  -13199.720833  13299.720833  -8662.195833  4637.5250 -13199.720833        0.0  4537.5250       4537.5250
2   -8662.195833  -13199.720833  13299.720833  -8662.195833     0.1000 -13199.720833        0.0  4537.5250       4437.5250
3   -8662.195833  -13099.720833  13299.720833  -8662.195833     0.1000 -13099.720833        0.0  4437.5250       4337.5250
4   -8662.195833  -12944.720833  13299.720833  -8662.195833   402.2000 -12944.720833        0.0  4282.5250       4237.5250
5   -8662.195833  -12899.720833  13299.720833  -8662.195833  1115.3000 -12899.720833        0.0  4237.5250       4137.5250
6   -8662.195833  -12758.720833  13299.720833  -8662.195833  2274.9500 -12758.720833        0.0  4096.5250       4037.5250
7   -8662.195833  -12699.720833  13299.720833  -8662.195833  4096.4250 -12699.720833        0.0  4037.5250       3937.5250
8   -6063.083333  -12599.720833  13299.720833  -6063.083333  6636.6375 -12599.720833        0.0  6536.6375       6436.6375
high_util=True, low_delay=False, ramp_up=True, ramp_down=False.[0m
[07/20 17:52:38]  --------------------------------------------------------------------------------
[07/20 17:52:38]  Iteration: 2 (0 solution, 1 counterexamples)
[07/20 17:52:38]  Generator returned sat in 0.012986 secs.
[07/20 17:52:38]  Candidate solution: 
[1m[94mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:52:39]  Improved number of small numbers from 47 to 57 out of a max of 100
[07/20 17:52:39]  Verifer returned sat in 0.955354 secs.
[07/20 17:52:39]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -8712.520996   -9020.954765  9012.52109 -8712.520996    0.100098 -9020.954765        0.0  308.433769      300.000094
1   -8712.520996   -8925.521090  9012.52109 -8712.520996  308.433594 -8925.521090        0.0  213.000094      200.000094
2   -8712.520996   -8812.521090  9012.52109 -8712.520996  212.999756 -8812.521090        0.0  100.000094      100.000094
3   -8312.471163   -8778.004692  9012.52109 -8312.471163  500.049927 -8778.004692        0.0  465.533529      400.049927
4   -8312.471163   -8712.521090  9012.52109 -8312.471163  372.000000 -8712.521090        0.0  400.049927      300.049927
5   -8312.471163   -8545.887708  9012.52109 -8312.471163  399.000000 -8545.887708        0.0  233.416545      200.049927
6   -8212.571016   -8512.521090  9012.52109 -8212.571016  333.316691 -8512.521090        0.0  299.950073      199.950073
7   -8212.571016   -8312.521090  9012.52109 -8212.571016  299.900146 -8312.521090        0.0   99.950073       99.950073
8   -7762.571016   -8212.521240  9012.52109 -7762.571016  549.950073 -8212.521240        0.0  449.950224      449.950073
high_util=True, low_delay=False, ramp_up=True, ramp_down=False.[0m
[07/20 17:52:39]  --------------------------------------------------------------------------------
[07/20 17:52:39]  Iteration: 3 (0 solution, 2 counterexamples)
[07/20 17:52:40]  Generator returned sat in 0.051113 secs.
[07/20 17:52:40]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 17:52:40]  Improved number of small numbers from 55 to 75 out of a max of 100
[07/20 17:52:40]  Verifer returned sat in 0.664109 secs.
[07/20 17:52:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -8912.471191   -9012.468750  9012.468663 -8912.471191    0.099854 -9012.468750        0.0   99.997559       99.997472
1   -8811.953857   -8912.468663  9012.468663 -8811.953857  200.514893 -8912.468663        0.0  100.514806      100.514806
2   -8712.468663   -8912.468506  9012.468663 -8712.468663  200.000000 -8912.468506        0.0  199.999843      100.000000
3   -8312.471191   -8811.951163  9012.468663 -8312.471191  599.997314 -8811.951163        0.0  499.479972      399.997472
4   -8312.471191   -8712.468663  9012.468663 -8312.471191    0.010000 -8712.468663        0.0  399.997472      299.997472
5   -8312.471191   -8612.468506  9012.468663 -8312.471191    0.010000 -8612.468506        0.0  299.997314      199.997472
6   -8312.471191   -8512.468663  9012.468663 -8312.471191    0.010000 -8512.468663        0.0  199.997472       99.997472
7   -8212.471163   -8312.468663  9012.468663 -8212.471163  299.997500 -8312.468663        0.0   99.997500       99.997500
8   -7461.972413   -8212.468750  9012.468663 -7461.972413  850.496250 -8212.468750        0.0  750.496337      750.496250
high_util=True, low_delay=False, ramp_up=True, ramp_down=False.[0m
[07/20 17:52:41]  --------------------------------------------------------------------------------
[07/20 17:52:41]  Iteration: 4 (0 solution, 3 counterexamples)
[07/20 17:52:41]  Generator returned sat in 0.047775 secs.
[07/20 17:52:41]  Candidate solution: 
[1m[94mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:52:41]  Improved number of small numbers from 45 to 100 out of a max of 100
[07/20 17:52:41]  Verifer returned sat in 0.485796 secs.
[07/20 17:52:41]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -9113.418945   -9113.468750  9013.46875 -9113.418945    0.099854 -9113.468750        0.0    0.049805      -99.950195
1   -8513.518555   -9013.468750  9013.46875 -8513.518555  599.950195 -9013.468750        0.0  499.950195      399.950195
2   -8312.419189   -8913.468506  9013.46875 -8312.419189  701.049561 -8913.468506        0.0  601.049316      501.049561
3   -8312.419189   -8812.124512  9013.46875 -8312.419189  601.000000 -8812.124512        0.0  499.705322      401.049561
4   -8312.419189   -8712.468506  9013.46875 -8312.419189  453.172119 -8712.468506        0.0  400.049316      301.049561
5   -8312.419189   -8513.468750  9013.46875 -8312.419189  379.086182 -8513.468750        0.0  201.049561      201.049561
6   -8121.925781   -8413.468750  9013.46875 -8121.925781  391.542969 -8413.468750        0.0  291.542969      291.542969
7   -8016.369385   -8313.468750  9013.46875 -8016.369385  397.099365 -8313.468750        0.0  297.099365      297.099365
8   -7913.419189   -8313.468506  9013.46875 -7913.419189  400.049561 -8313.468506        0.0  400.049316      300.049561
high_util=True, low_delay=False, ramp_up=False, ramp_down=False.[0m
[07/20 17:52:42]  --------------------------------------------------------------------------------
[07/20 17:52:42]  Iteration: 5 (0 solution, 4 counterexamples)
[07/20 17:52:42]  Generator returned sat in 0.012246 secs.
[07/20 17:52:42]  Candidate solution: 
[1m[94mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:52:42]  Improved gap from 0 to 14.0625
[07/20 17:52:42]  Improved number of small numbers from 101 to 101 out of a max of 101
[07/20 17:52:42]  Verifer returned sat in 0.341787 secs.
[07/20 17:52:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t
0     -8861.2200     -9323.0225  9323.0225   -8861.2200    0.099854   -9323.0225        0.0  461.8025        461.8025
1     -8808.9600     -9323.0225  9323.0225   -8808.9600  514.062500   -9323.0225        0.0  514.0625        414.0625
2     -8808.9600     -9198.9650  9323.0225   -8808.9600  514.057500   -9198.9650        0.0  390.0050        314.0625
3     -8808.9600     -9023.0225  9323.0225   -8808.9600  390.000000   -9023.0225        0.0  214.0625        214.0625
4     -8808.9600     -8923.0225  9323.0225   -8808.9600  197.000000   -8923.0225        0.0  114.0625        114.0625
5     -8808.9600     -8861.2150  9323.0225   -8808.9600  100.500000   -8861.2150        0.0   52.2550         14.0625
6     -8808.9600     -8823.0225  9408.9600   -8808.9600   52.250000   -8823.0225        0.0   14.0625          0.0000
7     -8794.8975     -8808.9600  9494.8975   -8794.8975   28.125000   -8808.9600        0.0   14.0625          0.0000
8     -8794.8975     -8794.8975  9494.8975   -8794.8975    0.010000   -8794.8975        0.0    0.0000       -100.0000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:52:43]  --------------------------------------------------------------------------------
[07/20 17:52:43]  Iteration: 6 (0 solution, 5 counterexamples)
[07/20 17:52:43]  Generator returned sat in 0.025258 secs.
[07/20 17:52:43]  Candidate solution: 
[1m[94mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:52:43]  Improved gap from 1/8192 to 0
[07/20 17:52:44]  Improved number of small numbers from 56 to 90 out of a max of 101
[07/20 17:52:44]  Verifer returned sat in 0.916316 secs.
[07/20 17:52:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -9036.899902   -9236.897705  9236.897461 -9036.899902    0.099365 -9236.897705        0.0  199.997803      199.997803
1   -9036.895020   -9136.897705  9236.897461 -9036.895020  200.002686 -9136.897705        0.0  100.002686      100.002686
2   -9036.895020   -9036.897705  9236.897461 -9036.895020  100.002500 -9036.897705        0.0    0.002686        0.002686
3   -8836.895020   -8936.897705  9236.897461 -8836.895020  200.002686 -8936.897705        0.0  100.002686      100.002686
4   -8836.895020   -8936.897461  9236.897461 -8836.895020    0.010000 -8936.897461        0.0  100.002441        0.002686
5   -8836.895020   -8836.897471  9336.894775 -8836.895020    0.010000 -8836.897471        0.0    0.002451        0.000000
6   -8834.897471   -8836.895020  9434.897227 -8834.897471    2.000000 -8836.895020        0.0    1.997549        0.000000
7   -8834.897471   -8834.897471  9534.894531 -8834.897471    0.010000 -8834.897471        0.0    0.000000       -0.002695
8   -8834.887471   -8834.894775  9534.894775 -8834.887471    0.010000 -8834.894775        0.0    0.007305      -99.992451
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:52:44]  --------------------------------------------------------------------------------
[07/20 17:52:44]  Iteration: 7 (0 solution, 6 counterexamples)
[07/20 17:52:44]  Generator returned sat in 0.111898 secs.
[07/20 17:52:44]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:52:45]  Improved gap from 1/100 to 0
[07/20 17:52:45]  Improved number of small numbers from 61 to 93 out of a max of 101
[07/20 17:52:45]  Verifer returned sat in 0.802552 secs.
[07/20 17:52:45]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -9530.876709   -9830.875244  9236.897461 -9530.876709    0.099121 -9830.875244        0.0  299.998535      299.998535
1   -9530.875244   -9730.875244  9236.897461 -9530.875244  300.000000 -9730.875244        0.0  200.000000      200.000000
2   -9430.876709   -9630.875244  9236.897461 -9430.876709  299.998535 -9630.875244        0.0  199.998535      199.998535
3   -9330.873535   -9530.875244  9236.897461 -9330.873535  300.001709 -9530.875244        0.0  200.001709      200.001709
4   -9330.873535   -9430.875244  9236.897461 -9330.873535    0.010000 -9430.875244        0.0  100.001709      100.001709
5   -9330.873535   -9430.875244  9236.897461 -9330.873535    0.010000 -9430.875244        0.0  100.001709        0.001709
6   -9330.873535   -9330.875020  9336.895752 -9330.873535    1.500000 -9330.875020        0.0    0.001484        0.000000
7   -9330.865020   -9330.866686  9436.879150 -9330.865020    0.010000 -9330.866686        0.0    0.001667       -0.008086
8   -9330.856686   -9330.856689  9436.879150 -9330.856686    0.010000 -9330.856689        0.0    0.000003      -99.999753
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:52:46]  --------------------------------------------------------------------------------
[07/20 17:52:46]  Iteration: 8 (0 solution, 7 counterexamples)
[07/20 17:52:46]  Generator returned sat in 0.159328 secs.
[07/20 17:52:46]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:52:46]  Improved gap from 0 to 100
[07/20 17:52:46]  Improved number of small numbers from 87 to 87 out of a max of 101
[07/20 17:52:46]  Verifer returned sat in 0.353331 secs.
[07/20 17:52:46]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -9630.924561   -9830.875244  9236.897461 -9630.924561    0.099121 -9830.875244        0.0  199.950684      199.950684
1   -9630.924561   -9730.875244  9236.897461 -9630.924561  199.950684 -9730.875244        0.0   99.950684       99.950684
2   -9630.924561   -9697.525472  9236.897461 -9630.924561    0.049316 -9697.525472        0.0   66.600911       -0.049316
3   -9630.825928   -9630.875244  9236.897461 -9630.825928   66.699544 -9630.875244        0.0    0.049316      -99.950684
4   -9530.825928   -9530.875244  9236.897461 -9530.825928  100.049316 -9530.875244        0.0    0.049316      -99.950684
5   -9380.801270   -9380.801270  9236.897461 -9380.801270  150.073975 -9380.801270        0.0    0.000000      -49.926025
6   -9155.690308   -9330.875244  9236.897461 -9155.690308  225.110962 -9330.875244        0.0  175.184937       75.184937
7   -8993.208801   -9130.875244  9236.897461 -8993.208801  337.666443 -9130.875244        0.0  137.666443      137.666443
8   -8624.375580   -9130.875244  9236.897461 -8624.375580  506.499664 -9130.875244        0.0  506.499664      406.499664
high_util=True, low_delay=False, ramp_up=True, ramp_down=False.[0m
[07/20 17:52:47]  --------------------------------------------------------------------------------
[07/20 17:52:47]  Iteration: 9 (0 solution, 8 counterexamples)
[07/20 17:52:47]  Generator returned sat in 0.072350 secs.
[07/20 17:52:47]  Candidate solution: 
[1m[94mif(qbound[t][6]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:52:48]  Improved gap from 101/2048 to 12.5
[07/20 17:52:48]  Improved number of small numbers from 56 to 101 out of a max of 101
[07/20 17:52:48]  Verifer returned sat in 1.362323 secs.
[07/20 17:52:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -8268.098633   -8368.000000  7774.021973 -8268.098633    0.098633 -8368.000000        0.0   99.901367       99.901367
1   -8068.049316   -8268.049316  7774.021973 -8068.049316  299.950684 -8268.049316        0.0  200.000000      199.950684
2   -7867.950684   -8268.000000  7774.021973 -7867.950684  400.098633 -8268.000000        0.0  400.049316      300.049316
3   -7867.950684   -8068.000000  7774.021973 -7867.950684  400.000000 -8068.000000        0.0  200.049316      200.049316
4   -7867.950684   -7992.802734  7774.021973 -7867.950684  200.000000 -7992.802734        0.0  124.852051      100.049316
5   -7867.950684   -7905.401367  7774.021973 -7867.950684  100.000000 -7905.401367        0.0   37.450684        0.049316
6   -7855.401367   -7867.901367  7861.374268 -7855.401367   50.000000 -7867.901367        0.0   12.500000       -0.049072
7   -7842.901367   -7855.352295  7948.874268 -7842.901367   25.000000 -7855.352295        0.0   12.450928       -0.049072
8   -7842.852295   -7842.852295  7948.874268 -7842.852295   12.500000 -7842.852295        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:52:49]  --------------------------------------------------------------------------------
[07/20 17:52:49]  Iteration: 10 (0 solution, 9 counterexamples)
[07/20 17:52:49]  Generator returned sat in 0.057606 secs.
[07/20 17:52:49]  Candidate solution: 
[1m[94mif(qbound[t][6]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:52:49]  Improved gap from 9/800 to 100
[07/20 17:52:50]  Improved number of small numbers from 64 to 101 out of a max of 101
[07/20 17:52:50]  Verifer returned sat in 0.522278 secs.
[07/20 17:52:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -8206.071777   -8405.973145  7774.021973 -8206.071777    0.098389 -8405.973145        0.0  199.901367       99.901367
1   -8106.071777   -8305.973145  7774.021973 -8106.071777  299.901367 -8305.973145        0.0  199.901367       99.901367
2   -8106.071777   -8205.973145  7774.021973 -8106.071777  199.901123 -8205.973145        0.0   99.901367       -0.098633
3   -7703.408691   -8105.973145  7774.021973 -7703.408691  502.564453 -8105.973145        0.0  402.564453      302.564453
4   -7703.408691   -7906.466309  7774.021973 -7703.408691  401.282227 -7906.466309        0.0  203.057617      202.564453
5   -7506.071777   -7805.973145  7774.021973 -7506.071777  400.394531 -7805.973145        0.0  299.901367      299.901367
6   -7405.775879   -7805.874512  7774.021973 -7405.775879  400.197266 -7805.874512        0.0  400.098633      300.197266
7   -7405.775879   -7605.973145  7774.021973 -7405.775879  350.147949 -7605.973145        0.0  200.197266      200.197266
8   -7280.652588   -7505.973389  7774.021973 -7280.652588  325.320557 -7505.973389        0.0  225.320801      225.320557
high_util=True, low_delay=False, ramp_up=False, ramp_down=False.[0m
[07/20 17:52:50]  --------------------------------------------------------------------------------
[07/20 17:52:50]  Iteration: 11 (0 solution, 10 counterexamples)
[07/20 17:52:51]  Generator returned sat in 0.399372 secs.
[07/20 17:52:51]  Candidate solution: 
[1m[94mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 17:52:51]  Improved gap from 403/16384 to 100
[07/20 17:52:51]  Improved number of small numbers from 52 to 101 out of a max of 101
[07/20 17:52:51]  Verifer returned sat in 0.685761 secs.
[07/20 17:52:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -7509.440186   -7709.342041  7077.390869 -7509.440186    0.098145 -7709.342041        0.0  199.901855       99.901855
1   -7209.342041   -7609.342041  7077.390869 -7209.342041  500.000000 -7609.342041        0.0  400.000000      300.000000
2   -7008.616699   -7509.341797  7077.390869 -7008.616699  600.725342 -7509.341797        0.0  500.725098      400.725342
3   -7008.616699   -7409.342041  7077.390869 -7008.616699  496.606445 -7409.342041        0.0  400.725342      300.725342
4   -7008.616699   -7209.342041  7077.390869 -7008.616699  398.803223 -7209.342041        0.0  200.725342      200.725342
5   -6809.440430   -7109.342041  7077.390869 -6809.440430  399.901611 -7109.342041        0.0  299.901611      299.901611
6   -6708.891357   -7009.342041  7077.390869 -6708.891357  400.450684 -7009.342041        0.0  300.450684      300.450684
7   -6608.616699   -7009.342041  7077.390869 -6608.616699  400.725342 -7009.342041        0.0  400.725342      300.725342
8   -6608.616699   -6809.342041  7077.390869 -6608.616699    1.500000 -6809.342041        0.0  200.725342      200.725342
high_util=True, low_delay=False, ramp_up=False, ramp_down=False.[0m
[07/20 17:52:52]  --------------------------------------------------------------------------------
[07/20 17:52:52]  Iteration: 12 (0 solution, 11 counterexamples)
[07/20 17:52:52]  Generator returned sat in 0.081222 secs.
[07/20 17:52:52]  Candidate solution: 
[1m[94mif(qbound[t][4]):
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 17:52:53]  Improved number of small numbers from 55 to 100 out of a max of 100
[07/20 17:52:53]  Verifer returned sat in 0.798112 secs.
[07/20 17:52:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -7240.474609   -7740.474365  7085.469238 -7240.474609    0.097900 -7740.474365        0.0  499.999756      400.000000
1   -7240.425537   -7640.474609  7085.469238 -7240.425537  500.048828 -7640.474609        0.0  400.049072      300.049072
2   -7003.934082   -7456.080322  7085.469238 -7003.934082  636.540527 -7456.080322        0.0  452.146240      436.540527
3   -7003.934082   -7401.179199  7085.469238 -7003.934082  452.097412 -7401.179199        0.0  397.245117      336.540527
4   -7003.934082   -7240.474609  7085.469238 -7003.934082  397.196289 -7240.474609        0.0  236.540527      236.540527
5   -6840.376465   -7240.425537  7085.469238 -6840.376465  400.098145 -7240.425537        0.0  400.049072      300.098145
6   -6840.376465   -7040.474609  7085.469238 -6840.376465  309.376465 -7040.474609        0.0  200.098145      200.098145
7   -6703.934082   -7040.474609  7085.469238 -6703.934082  336.540527 -7040.474609        0.0  336.540527      236.540527
8   -6703.934082   -6940.474609  7085.469238 -6703.934082  101.500000 -6940.474609        0.0  236.540527      136.540527
high_util=True, low_delay=False, ramp_up=False, ramp_down=False.[0m
[07/20 17:52:53]  --------------------------------------------------------------------------------
[07/20 17:52:53]  Iteration: 13 (0 solution, 12 counterexamples)
[07/20 17:52:54]  Generator returned sat in 0.736215 secs.
[07/20 17:52:54]  Candidate solution: 
[1m[94mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 17:52:55]  Improved gap from 401/8192 to 31.25
[07/20 17:52:55]  Improved number of small numbers from 61 to 101 out of a max of 101
[07/20 17:52:55]  Verifer returned sat in 1.089389 secs.
[07/20 17:52:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -6633.570801   -6733.424072  6178.418701 -6633.570801    0.097656 -6733.424072        0.0   99.853271       99.853271
1   -6633.472900   -6633.521729  6178.418701 -6633.472900   99.951172 -6633.521729        0.0    0.048828       -0.048828
2   -6601.423828   -6633.423828  6246.418457 -6601.423828   32.097900 -6633.423828        0.0   32.000000        0.000000
3   -6324.561523   -6501.424072  6246.418457 -6324.561523  308.862305 -6501.424072        0.0  176.862549      176.862305
4   -6324.561523   -6404.076172  6246.418457 -6324.561523  155.931152 -6404.076172        0.0   79.514648       76.862305
5   -6324.561523   -6401.423828  6269.556152 -6324.561523   79.465576 -6401.423828        0.0   76.862305        0.000000
6   -6285.423828   -6324.561523  6330.369629 -6285.423828  116.000000 -6324.561523        0.0   39.137695       -0.048828
7   -6265.061523   -6285.375000  6399.119629 -6265.061523   59.500000 -6285.375000        0.0   20.313477      -10.936523
8   -6254.125000   -6254.125000  6399.119629 -6254.125000   31.250000 -6254.125000        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:52:56]  --------------------------------------------------------------------------------
[07/20 17:52:56]  Iteration: 14 (0 solution, 13 counterexamples)
[07/20 17:52:56]  Generator returned sat in 0.053398 secs.
[07/20 17:52:56]  Candidate solution: 
[1m[94mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 17:52:58]  Improved gap from 25/512 to 31.25
[07/20 17:52:58]  Improved number of small numbers from 55 to 101 out of a max of 101
[07/20 17:52:58]  Verifer returned sat in 1.829434 secs.
[07/20 17:52:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7636.932617    7367.981445 -7459.196533  7636.932617    0.097656  7367.981445        0.0  268.951172      168.951172
1    7636.932617    7567.981445 -7459.196533  7636.932617    0.048584  7567.981445        0.0   68.951172       68.951172
2    7767.932617    7636.981445 -7459.196533  7767.932617  199.951172  7636.981445        0.0  130.951172       99.951172
3    7952.780273    7767.981445 -7459.196533  7952.780273  315.798828  7767.981445        0.0  184.798828      184.798828
4    7952.780273    7867.932861 -7459.196533  7952.780273  159.399414  7867.932861        0.0   84.847412       84.798828
5    7952.780273    7867.981445 -7443.995361  7952.780273   81.199707  7867.981445        0.0   84.798828        0.000000
6    7983.981445    7952.780273 -7375.245605  7983.981445  116.000000  7952.780273        0.0   31.201172       -0.049072
7    8012.280273    7984.030518 -7306.495605  8012.280273   59.500000  7984.030518        0.0   28.249756       -3.000244
8    8015.280518    8015.280518 -7306.495361  8015.280518   31.250000  8015.280518        0.0    0.000000      -99.999756
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:52:58]  --------------------------------------------------------------------------------
[07/20 17:52:58]  Iteration: 15 (0 solution, 14 counterexamples)
[07/20 17:52:59]  Generator returned sat in 0.059240 secs.
[07/20 17:52:59]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 17:53:01]  Improved gap from 514247/24576 to 31.25
[07/20 17:53:01]  Improved number of small numbers from 63 to 75 out of a max of 101
[07/20 17:53:01]  Verifer returned sat in 2.642326 secs.
[07/20 17:53:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    8416.775635    8216.726807 -9015.894775  8416.775635    0.097412  8216.726807        0.0  200.048828      100.049020
1    8416.775635    8416.726562 -9015.894775  8416.775635    0.048828  8416.726562        0.0    0.049072        0.049020
2    8616.677734    8485.726615 -9015.894775  8616.677734  199.951172  8485.726615        0.0  130.951120       99.951120
3    8796.791719    8616.726562 -9015.894775  8796.791719  311.065104  8616.726562        0.0  180.065156      180.065104
4    8796.791719    8716.726615 -9015.894775  8796.791719  157.032552  8716.726615        0.0   80.065104       80.065104
5    8796.791719    8716.726615 -8995.959880  8796.791719   80.016276  8716.726615        0.0   80.065104        0.000000
6    8832.726615    8796.791719 -8931.895020  8832.726615  116.000000  8796.791719        0.0   35.934896       -0.000244
7    8856.291719    8832.775443 -8863.193604  8856.291719   59.500000  8832.775443        0.0   23.516276       -7.733724
8    8864.025443    8864.025443 -8863.193604  8864.025443   31.250000  8864.025443        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:53:02]  --------------------------------------------------------------------------------
[07/20 17:53:02]  Iteration: 16 (0 solution, 15 counterexamples)
[07/20 17:53:03]  Generator returned sat in 0.313744 secs.
[07/20 17:53:03]  Candidate solution: 
[1m[94mif(qbound[t][8]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 17:53:03]  Improved gap from 0 to 100
[07/20 17:53:03]  Improved number of small numbers from 55 to 101 out of a max of 101
[07/20 17:53:03]  Verifer returned sat in 0.215853 secs.
[07/20 17:53:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    8632.785400    8132.785400 -8831.953369  8632.785400    0.097168  8132.785400        0.0  500.000000      500.000000
1    8632.785400    8132.785400 -8831.953369  8632.785400    0.048584  8132.785400        0.0  500.000000      400.000000
2    8632.785400    8282.760986 -8831.953369  8632.785400  500.000000  8282.760986        0.0  350.024414      300.000000
3    8632.785400    8432.785400 -8831.953369  8632.785400  350.024414  8432.785400        0.0  200.000000      200.000000
4    8632.785400    8532.785400 -8831.953369  8632.785400    1.500000  8532.785400        0.0  100.000000      100.000000
5    8632.785400    8532.785400 -8831.953369  8632.785400    1.500000  8532.785400        0.0  100.000000        0.000000
6    9032.834229    8632.785400 -8831.953369  9032.834229  500.048828  8632.785400        0.0  400.048828      300.048828
7    9032.834229    8832.736816 -8831.953369  9032.834229    1.500000  8832.736816        0.0  200.097412      200.048828
8    9032.834229    8832.785400 -8831.953369  9032.834229    1.500000  8832.785400        0.0  200.048828      100.048828
high_util=True, low_delay=False, ramp_up=False, ramp_down=False.[0m
[07/20 17:53:03]  --------------------------------------------------------------------------------
[07/20 17:53:03]  Iteration: 17 (0 solution, 16 counterexamples)
[07/20 17:53:04]  Generator returned sat in 0.644616 secs.
[07/20 17:53:04]  Candidate solution: 
[1m[94mif(qbound[t][5]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/20 17:53:04]  Improved gap from 0 to 0
[07/20 17:53:05]  Improved number of small numbers from 71 to 101 out of a max of 101
[07/20 17:53:05]  Verifer returned sat in 0.301368 secs.
[07/20 17:53:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    8132.784180    8032.785156 -8831.953369  8132.784180    0.097168  8032.785156        0.0   99.999023       99.998779
1    8432.796631    8132.785156 -8831.953369  8432.796631  400.011475  8132.785156        0.0  300.011475      300.011230
2    8432.796631    8232.785400 -8831.953369  8432.796631  300.010010  8232.785400        0.0  200.011230      200.011230
3    8432.796631    8332.785400 -8831.953369  8432.796631    0.001250  8332.785400        0.0  100.011230      100.011230
4    8432.796631    8431.795166 -8831.953369  8432.796631    1.000000  8431.795166        0.0    1.001465        0.011230
5    8432.796631    8432.785400 -8731.964600  8432.796631    1.000000  8432.785400        0.0    0.011230        0.000000
6    8432.796631    8432.796631 -8631.964844  8432.796631    0.010000  8432.796631        0.0    0.000000       -0.000244
7    8433.796631    8433.795410 -8532.964844  8433.796631    1.000000  8433.795410        0.0    0.001221       -0.000244
8    8434.795410    8433.797852 -8532.964844  8434.795410    1.000000  8433.797852        0.0    0.997559      -99.001465
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:53:05]  --------------------------------------------------------------------------------
[07/20 17:53:05]  Iteration: 18 (0 solution, 17 counterexamples)
[07/20 17:53:05]  Generator returned sat in 0.106844 secs.
[07/20 17:53:05]  Candidate solution: 
[1m[94mif(qbound[t][5]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 17:53:06]  Improved gap from 1/4096 to 0
[07/20 17:53:06]  Improved number of small numbers from 61 to 78 out of a max of 101
[07/20 17:53:06]  Verifer returned sat in 0.767697 secs.
[07/20 17:53:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7631.221436    7431.224365 -8731.964600  7631.221436    0.096924  7431.224365        0.0  199.997070       99.997305
1    7831.221680    7631.224131 -8731.964600  7831.221680  399.997314  7631.224131        0.0  199.997549      199.997549
2    8031.236631    7731.224121 -8731.964600  8031.236631  400.012500  7731.224121        0.0  300.012510      300.012500
3    8031.236631    7831.224121 -8731.964600  8031.236631  300.012451  7831.224121        0.0  200.012510      200.012500
4    8031.236631    7881.239014 -8731.964600  8031.236631    1.500000  7881.239014        0.0  149.997617      100.012500
5    8031.236631    7931.224365 -8731.964600  8031.236631    1.500000  7931.224365        0.0  100.012266        0.012500
6    8031.236631    8031.224365 -8631.977100  8031.236631    1.500000  8031.224365        0.0    0.012266        0.000000
7    8031.236631    8031.236631 -8531.977100  8031.236631    0.010000  8031.236631        0.0    0.000000        0.000000
8    8031.246631    8031.236631 -8531.977051  8031.246631    0.010000  8031.236631        0.0    0.010000      -99.989951
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:53:07]  --------------------------------------------------------------------------------
[07/20 17:53:07]  Iteration: 19 (0 solution, 18 counterexamples)
[07/20 17:53:07]  Generator returned sat in 0.243984 secs.
[07/20 17:53:07]  Candidate solution: 
[1m[94mif(qbound[t][5]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 17:53:08]  Improved gap from 0 to 48.4375
[07/20 17:53:08]  Improved number of small numbers from 55 to 101 out of a max of 101
[07/20 17:53:08]  Verifer returned sat in 0.612392 secs.
[07/20 17:53:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7790.305420    7290.303955 -8685.161377  7790.305420    0.096680  7290.303955        0.0  500.001465      400.001465
1    7838.742920    7490.303955 -8685.161377  7838.742920  548.438965  7490.303955        0.0  348.438965      348.438965
2    7838.742920    7490.304199 -8685.161377  7838.742920  348.438721  7490.304199        0.0  348.438721      248.438965
3    7838.742920    7644.989014 -8685.161377  7838.742920    0.001221  7644.989014        0.0  193.753906      148.438965
4    7838.742920    7790.303955 -8685.161377  7838.742920  178.842529  7790.303955        0.0   48.438965       48.438965
5    7838.742920    7790.305420 -8633.600342  7838.742920    0.010000  7790.305420        0.0   48.437500        0.000000
6    7838.742920    7838.742920 -8582.037842  7838.742920    0.010000  7838.742920        0.0    0.000000      -48.437500
7    7937.119873    7887.180420 -8531.977295  7937.119873   98.376953  7887.180420        0.0   49.939453        0.000000
8    7937.119873    7937.119873 -8531.977051  7937.119873   49.938232  7937.119873        0.0    0.000000      -99.999756
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:53:08]  --------------------------------------------------------------------------------
[07/20 17:53:08]  Iteration: 20 (0 solution, 19 counterexamples)
[07/20 17:53:09]  Generator returned sat in 0.064059 secs.
[07/20 17:53:09]  Candidate solution: 
[1m[94mif(qbound[t][5]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/20 17:53:09]  Improved gap from 591113/12288 to 48.4375
[07/20 17:53:10]  Improved number of small numbers from 56 to 101 out of a max of 101
[07/20 17:53:10]  Verifer returned sat in 0.624678 secs.
[07/20 17:53:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7657.504639    7109.068604 -8503.925781  7657.504639    0.096436  7109.068604        0.0  548.436035      448.436279
1    7657.506104    7309.068359 -8503.925781  7657.506104  548.437500  7309.068359        0.0  348.437744      348.437744
2    7657.506104    7409.068359 -8503.925781  7657.506104  348.437500  7409.068359        0.0  248.437744      248.437744
3    7657.506104    7458.385986 -8503.925781  7657.506104    0.001465  7458.385986        0.0  199.120117      148.437744
4    7657.506104    7609.067139 -8503.925781  7657.506104  176.658691  7609.067139        0.0   48.438965       48.437744
5    7657.506104    7609.068359 -8452.363525  7657.506104    0.010000  7609.068359        0.0   48.437744        0.000000
6    7657.506104    7657.506104 -8400.801025  7657.506104    0.010000  7657.506104        0.0    0.000000      -48.437500
7    7759.066162    7705.943604 -8353.923584  7759.066162  101.560059  7705.943604        0.0   53.122559        0.000000
8    7759.066162    7759.066162 -8353.923584  7759.066162   50.438232  7759.066162        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:53:10]  --------------------------------------------------------------------------------
[07/20 17:53:10]  Iteration: 21 (0 solution, 20 counterexamples)
[07/20 17:53:10]  Generator returned sat in 0.092938 secs.
[07/20 17:53:10]  Candidate solution: 
[1m[94mif(qbound[t][6]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/20 17:53:11]  Improved gap from 775/16 to 48.4375
[07/20 17:53:11]  Improved number of small numbers from 55 to 101 out of a max of 101
[07/20 17:53:11]  Verifer returned sat in 0.680196 secs.
[07/20 17:53:11]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    8351.081055    7902.643555 -8953.591797  8351.081055    0.096436  7902.643555        0.0  448.437500      448.437500
1    8351.081055    8002.643555 -8953.591797  8351.081055  448.437256  8002.643555        0.0  348.437500      348.437500
2    8351.081055    8002.643555 -8953.591797  8351.081055    0.001250  8002.643555        0.0  348.437500      248.437500
3    8351.081055    8200.267578 -8953.591797  8351.081055    0.001221  8200.267578        0.0  150.813477      148.437500
4    8351.081055    8302.642578 -8953.591797  8351.081055  150.812012  8302.642578        0.0   48.438477       48.437500
5    8351.081055    8302.643555 -8902.029297  8351.081055    0.010000  8302.643555        0.0   48.437500        0.000000
6    8351.081055    8351.081055 -8850.466797  8351.081055    0.010000  8351.081055        0.0    0.000000      -48.437500
7    8428.487793    8399.518555 -8798.904297  8428.487793   77.406738  8399.518555        0.0   28.969238      -19.468262
8    8449.956543    8447.956299 -8798.904297  8449.956543   50.437988  8447.956299        0.0    2.000244      -97.999512
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:53:12]  --------------------------------------------------------------------------------
[07/20 17:53:12]  Iteration: 22 (0 solution, 21 counterexamples)
[07/20 17:53:12]  Generator returned sat in 0.146774 secs.
[07/20 17:53:12]  Candidate solution: 
[1m[94mif(qbound[t][4]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/20 17:53:13]  Improved gap from 0 to 35.9375
[07/20 17:53:13]  Improved number of small numbers from 64 to 72 out of a max of 101
[07/20 17:53:13]  Verifer returned sat in 0.970264 secs.
[07/20 17:53:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t   cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    8261.559570    8150.330221 -8953.591797  8261.559570   0.096436  8150.330221        0.0  111.229349      100.000182
1    8261.559570    8261.226055 -8953.591797  8261.559570  28.975098  8261.226055        0.0    0.333516        0.000182
2    8261.559570    8261.559388 -8890.529297  8261.559570   0.041667  8261.559388        0.0    0.000182      -36.937318
3    8298.538555    8298.496888 -8827.466797  8298.538555  36.979167  8298.496888        0.0    0.041667      -36.895833
4    8374.580221    8335.434388 -8766.612630  8374.580221  76.083333  8335.434388        0.0   39.145833        0.000000
5    8374.580221    8374.580221 -8703.550049  8374.580221  39.104167  8374.580221        0.0    0.000000      -36.937419
6    8433.090638    8411.517721 -8640.487549  8433.090638  58.510417  8411.517721        0.0   21.572917      -15.364502
7    8470.028138    8448.455221 -8577.425049  8470.028138  58.510417  8448.455221        0.0   21.572917      -15.364502
8    8506.965638    8485.392822 -8577.425049  8506.965638  58.510417  8485.392822        0.0   21.572816      -78.427002
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:53:14]  --------------------------------------------------------------------------------
[07/20 17:53:14]  Iteration: 23 (0 solution, 22 counterexamples)
[07/20 17:53:14]  Generator returned sat in 0.229831 secs.
[07/20 17:53:14]  Candidate solution: 
[1m[94mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/20 17:53:15]  Improved number of small numbers from 68 to 96 out of a max of 100
[07/20 17:53:15]  Verifer returned sat in 1.047634 secs.
[07/20 17:53:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    8165.221924    7861.559326 -8753.591797  8165.221924    0.096436  7861.559326        0.0  303.662598      203.662598
1    8261.559326    8061.559326 -8753.591797  8261.559326  400.000000  8061.559326        0.0  200.000000      200.000000
2    8261.607422    8061.559326 -8753.591797  8261.607422  200.048096  8061.559326        0.0  200.048096      100.048096
3    8661.607666    8165.269775 -8753.591797  8661.607666  600.048340  8165.269775        0.0  496.337891      400.048340
4    8661.607666    8261.559326 -8753.591797  8661.607666  303.710449  8261.559326        0.0  400.048340      300.048340
5    8661.607666    8361.559326 -8753.591797  8661.607666  253.855225  8361.559326        0.0  300.048340      200.048340
6    8661.607666    8561.559082 -8753.591797  8661.607666  300.000000  8561.559082        0.0  100.048584      100.048340
7    8957.848389    8661.559326 -8753.591797  8957.848389  396.289307  8661.559326        0.0  296.289062      296.289062
8    9061.703979    8661.655518 -8753.591797  9061.703979  400.144653  8661.655518        0.0  400.048462      300.144653
high_util=True, low_delay=False, ramp_up=True, ramp_down=False.[0m
[07/20 17:53:16]  --------------------------------------------------------------------------------
[07/20 17:53:16]  Iteration: 24 (0 solution, 23 counterexamples)
[07/20 17:53:17]  Generator returned sat in 1.090463 secs.
[07/20 17:53:17]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/20 17:53:18]  Improved gap from 395/8192 to 100
[07/20 17:53:18]  Improved number of small numbers from 69 to 101 out of a max of 101
[07/20 17:53:18]  Verifer returned sat in 0.310844 secs.
[07/20 17:53:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    8165.221924    8165.221680 -8753.591553  8165.221924    0.096191  8165.221680        0.0    0.000244       -0.047852
1    8265.270020    8165.270020 -8753.591553  8265.270020  100.048340  8165.270020        0.0  100.000000        0.000244
2    8365.221680    8323.155029 -8753.591553  8365.221680  199.951660  8323.155029        0.0   42.066650       -0.048096
3    8365.318359    8365.269775 -8753.591553  8365.318359   42.163330  8365.269775        0.0    0.048584      -99.951416
4    8530.538818    8465.270020 -8753.591553  8530.538818  165.269043  8465.270020        0.0   65.268799      -34.730957
5    8865.173584    8665.269775 -8753.591553  8865.173584  399.903564  8665.269775        0.0  199.903809      199.903809
6    8865.173584    8695.769775 -8753.591553  8865.173584    1.500000  8695.769775        0.0  169.403809       99.903809
7    8865.269775    8865.221680 -8753.591553  8865.269775  169.500000  8865.221680        0.0    0.048096        0.000000
8    9321.447510    8865.318115 -8753.591553  9321.447510  456.225830  8865.318115        0.0  456.129395      356.177734
high_util=True, low_delay=False, ramp_up=True, ramp_down=False.[0m
[07/20 17:53:18]  --------------------------------------------------------------------------------
[07/20 17:53:18]  Iteration: 25 (0 solution, 24 counterexamples)
[07/20 17:53:19]  Generator returned sat in 0.081961 secs.
[07/20 17:53:19]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/20 17:53:20]  Improved gap from 197/8192 to 48.4375
[07/20 17:53:20]  Improved number of small numbers from 101 to 101 out of a max of 101
[07/20 17:53:20]  Verifer returned sat in 0.751651 secs.
[07/20 17:53:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    8365.514893    8317.029297 -8856.668457  8365.514893    0.096191  8317.029297        0.0   48.485596         48.4375
1    8365.514893    8317.077393 -8805.105957  8365.514893    0.048096  8317.077393        0.0   48.437500          0.0000
2    8414.000488    8365.562988 -8753.591553  8414.000488   96.923096  8365.562988        0.0   48.437500          0.0000
3    8662.437988    8474.187988 -8753.591553  8662.437988  296.875000  8474.187988        0.0  188.250000        148.4375
4    8662.437988    8613.952393 -8753.591553  8662.437988    1.500000  8613.952393        0.0   48.485596         48.4375
5    8662.437988    8614.000488 -8702.029053  8662.437988    1.500000  8614.000488        0.0   48.437500          0.0000
6    8662.437988    8662.437988 -8650.466553  8662.437988    1.500000  8662.437988        0.0    0.000000        -48.4375
7    8759.312988    8710.875488 -8598.904053  8759.312988   96.875000  8710.875488        0.0   48.437500          0.0000
8    8759.312988    8759.312988 -8598.904053  8759.312988    1.500000  8759.312988        0.0    0.000000       -100.0000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:53:20]  --------------------------------------------------------------------------------
[07/20 17:53:20]  Iteration: 26 (0 solution, 25 counterexamples)
[07/20 17:53:22]  Generator returned sat in 0.913670 secs.
[07/20 17:53:22]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:53:22]  Improved gap from 0 to 23.4375
[07/20 17:53:22]  Improved number of small numbers from 64 to 101 out of a max of 101
[07/20 17:53:22]  Verifer returned sat in 0.732975 secs.
[07/20 17:53:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    8637.849854    8461.284912 -8805.106201  8637.849854    0.095947  8461.284912        0.0  176.564941       76.564941
1    8637.849854    8637.847412 -8805.106201  8637.849854    0.002500  8637.847412        0.0    0.002441      -23.435059
2    8961.282471    8671.534912 -8805.106201  8961.282471  323.435059  8671.534912        0.0  289.747559      199.997559
3    8961.282471    8808.909912 -8805.106201  8961.282471  289.747314  8808.909912        0.0  152.372559       99.997559
4    8984.722412    8961.282471 -8805.106201  8984.722412  175.812500  8961.282471        0.0   23.439941       23.437500
5    8984.722412    8961.284912 -8728.543701  8984.722412    0.010000  8961.284912        0.0   23.437500        0.000000
6    9108.159912    8984.722412 -8728.543701  9108.159912  146.875000  8984.722412        0.0  123.437500       23.437500
7    9108.159912    9084.722412 -8651.981201  9108.159912    0.010000  9084.722412        0.0   23.437500        0.000000
8    9148.442383    9108.159912 -8651.981201  9148.442383   63.719971  9108.159912        0.0   40.282471      -59.717529
high_util=False, low_delay=True, ramp_up=False, ramp_down=False.[0m
[07/20 17:53:23]  --------------------------------------------------------------------------------
[07/20 17:53:23]  Iteration: 27 (0 solution, 26 counterexamples)
[07/20 17:53:23]  Generator returned sat in 0.163517 secs.
[07/20 17:53:23]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:53:24]  Improved gap from 367/16 to 23.4375
[07/20 17:53:24]  Improved number of small numbers from 56 to 101 out of a max of 101
[07/20 17:53:24]  Verifer returned sat in 0.633994 secs.
[07/20 17:53:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    8087.216309    7956.092285 -8221.788818  8087.216309    0.095703  7956.092285        0.0  131.124023      109.249023
1    8087.216309    8077.967285 -8221.788818  8087.216309    0.001465  8077.967285        0.0    9.249023        9.249023
2    8377.966064    8087.217285 -8221.788818  8377.966064  299.998779  8087.217285        0.0  290.748779      199.998779
3    8377.966064    8251.967285 -8221.788818  8377.966064    0.001250  8251.967285        0.0  125.998779       99.998779
4    8401.404785    8374.843750 -8221.788818  8401.404785  149.437500  8374.843750        0.0   26.561035       23.437500
5    8401.404785    8377.967285 -8145.226318  8401.404785    0.010000  8377.967285        0.0   23.437500        0.000000
6    8524.842285    8401.404785 -8145.226318  8524.842285  146.875000  8401.404785        0.0  123.437500       23.437500
7    8524.842285    8501.404785 -8068.663818  8524.842285    0.010000  8501.404785        0.0   23.437500        0.000000
8    8566.185303    8524.842285 -8068.663818  8566.185303   64.780518  8524.842285        0.0   41.343018      -58.656982
high_util=False, low_delay=True, ramp_up=False, ramp_down=False.[0m
[07/20 17:53:25]  --------------------------------------------------------------------------------
[07/20 17:53:25]  Iteration: 28 (0 solution, 27 counterexamples)
[07/20 17:53:25]  Generator returned sat in 0.130557 secs.
[07/20 17:53:25]  Candidate solution: 
[1m[94mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:53:26]  Improved gap from 0 to 100
[07/20 17:53:26]  Improved number of small numbers from 60 to 101 out of a max of 101
[07/20 17:53:26]  Verifer returned sat in 0.413647 secs.
[07/20 17:53:26]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7551.175537    7451.223389 -8145.226562  7551.175537    0.095703  7451.223389        0.0   99.952148       -0.047852
1    7951.223389    7551.223389 -8145.226562  7951.223389  500.000000  7551.223389        0.0  400.000000      300.000000
2    8251.175537    7651.223389 -8145.226562  8251.175537  699.952148  7651.223389        0.0  599.952148      499.952148
3    8251.175537    7826.067627 -8145.226562  8251.175537  475.274902  7826.067627        0.0  425.107910      399.952148
4    8251.175537    7951.223389 -8145.226562  8251.175537  425.059570  7951.223389        0.0  299.952148      299.952148
5    8363.753174    7963.705322 -8145.226562  8363.753174  412.529785  7963.705322        0.0  400.047852      312.529785
6    8363.753174    8063.657471 -8145.226562  8363.753174  362.505859  8063.657471        0.0  300.095703      212.529785
7    8363.753174    8251.175537 -8145.226562  8363.753174  300.047852  8251.175537        0.0  112.577637      112.529785
8    8551.175537    8251.223389 -8145.226562  8551.175537  300.000000  8251.223389        0.0  299.952148      199.952148
high_util=True, low_delay=False, ramp_up=False, ramp_down=False.[0m
[07/20 17:53:26]  --------------------------------------------------------------------------------
[07/20 17:53:26]  Iteration: 29 (0 solution, 28 counterexamples)
[07/20 17:53:27]  Generator returned sat in 0.436988 secs.
[07/20 17:53:27]  Candidate solution: 
[1m[94mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 17:53:28]  Improved gap from 0 to 17.1875
[07/20 17:53:28]  Improved number of small numbers from 97 to 97 out of a max of 101
[07/20 17:53:28]  Verifer returned sat in 0.995993 secs.
[07/20 17:53:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7951.271240    7839.782959 -8145.226562  7951.271240    0.095703  7839.782959        0.0  111.488281       99.952148
1    8235.741943    7951.319092 -8145.226562  8235.741943  395.958984  7951.319092        0.0  284.422852      284.422852
2    8235.741943    7951.319092 -8145.226562  8235.741943  284.422852  7951.319092        0.0  284.422852      184.422852
3    8235.741943    8104.120850 -8145.226562  8235.741943  284.375000  8104.120850        0.0  131.621094       84.422852
4    8368.458740    8235.741943 -8145.226562  8368.458740  264.337891  8235.741943        0.0  132.716797      117.139648
5    8368.458740    8301.576416 -8145.226562  8368.458740  132.668945  8301.576416        0.0   66.882324       17.139648
6    8368.458740    8351.319092 -8062.414062  8368.458740   66.834473  8351.319092        0.0   17.139648       -0.047852
7    8385.236328    8368.506592 -7979.601562  8385.236328   33.917236  8368.506592        0.0   16.729736       -0.457764
8    8385.965210    8385.694092 -7979.601562  8385.965210   17.458618  8385.694092        0.0    0.271118      -99.728882
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:53:29]  --------------------------------------------------------------------------------
[07/20 17:53:29]  Iteration: 30 (0 solution, 29 counterexamples)
[07/20 17:53:29]  Generator returned sat in 0.127593 secs.
[07/20 17:53:29]  Candidate solution: 
[1m[94mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/20 17:53:31]  Improved gap from 0 to 17.1875
[07/20 17:53:31]  Improved number of small numbers from 73 to 101 out of a max of 101
[07/20 17:53:31]  Verifer returned sat in 1.475784 secs.
[07/20 17:53:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7589.135010    7469.149658 -8012.523926  7589.135010    0.095459  7469.149658        0.0  119.985352       99.975830
1    7889.158936    7589.159180 -8012.523926  7889.158936  420.009277  7589.159180        0.0  299.999756      299.999756
2    7959.173828    7689.158936 -8012.523926  7959.173828  370.014648  7689.158936        0.0  270.014893      270.014648
3    7959.173828    7714.149658 -8012.523926  7959.173828    0.023926  7714.149658        0.0  245.024170      170.014648
4    7959.173828    7889.158936 -8012.523926  7959.173828  245.000000  7889.158936        0.0   70.014893       70.014648
5    8012.658936    7959.197510 -8012.523926  8012.658936  123.500000  7959.197510        0.0   53.461426       23.499756
6    8021.947510    7989.548828 -7945.312256  8021.947510   62.750000  7989.548828        0.0   32.398682        0.000000
7    8021.947510    8021.947510 -7862.499756  8021.947510   32.375000  8021.947510        0.0    0.000000      -17.187500
8    8039.135010    8039.135010 -7862.499756  8039.135010   17.187500  8039.135010        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:53:31]  --------------------------------------------------------------------------------
[07/20 17:53:31]  Iteration: 31 (0 solution, 30 counterexamples)
[07/20 17:53:32]  Generator returned sat in 0.120474 secs.
[07/20 17:53:32]  Candidate solution: 
[1m[94mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 17:53:34]  Improved gap from 136849/8192 to 18.75
[07/20 17:53:34]  Improved number of small numbers from 54 to 101 out of a max of 101
[07/20 17:53:34]  Verifer returned sat in 2.161449 secs.
[07/20 17:53:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    8842.972168    8842.948242 -7965.657715  8842.972168    0.095459  8842.948242        0.0    0.023926      -44.797852
1    9287.769775    8887.770020 -7965.657715  9287.769775  444.821533  8887.770020        0.0  399.999756      299.999756
2    9287.769775    9087.769775 -7965.657715  9287.769775  399.999756  9087.769775        0.0  200.000000      199.999756
3    9287.769775    9097.948242 -7965.657715  9287.769775    0.023926  9097.948242        0.0  189.821533       99.999756
4    9352.948242    9287.769775 -7965.657715  9352.948242  255.000000  9287.769775        0.0   65.178467       65.178223
5    9416.769775    9352.972168 -7965.657715  9416.769775  129.000000  9352.972168        0.0   63.797607       28.999756
6    9418.972168    9400.246338 -7896.884033  9418.972168   66.000000  9400.246338        0.0   18.725830       -0.024170
7    9434.746338    9418.996338 -7815.634033  9434.746338   34.500000  9418.996338        0.0   15.750000       -3.000000
8    9437.746338    9437.746338 -7815.634033  9437.746338   18.750000  9437.746338        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:53:35]  --------------------------------------------------------------------------------
[07/20 17:53:35]  Iteration: 32 (0 solution, 31 counterexamples)
[07/20 17:53:36]  Generator returned sat in 0.282336 secs.
[07/20 17:53:36]  Candidate solution: 
[1m[94mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/20 17:53:37]  Improved gap from 75/4 to 18.75
[07/20 17:53:38]  Improved number of small numbers from 45 to 85 out of a max of 101
[07/20 17:53:38]  Verifer returned sat in 2.151431 secs.
[07/20 17:53:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    8854.196777    8695.935303 -8197.615479  8854.196777    0.095459  8695.935303        0.0  158.261475       99.952427
1    9212.601074    8854.244141 -8197.615479  9212.601074  516.665771  8854.244141        0.0  358.356934      358.356723
2    9212.601074    8854.244385 -8197.615479  9212.601074    0.047852  8854.244385        0.0  358.356689      258.356723
3    9212.601074    8954.244385 -8197.615479  9212.601074  358.309082  8954.244385        0.0  258.356689      158.356723
4    9212.601074    9149.119385 -8197.615479  9212.601074  258.309082  9149.119385        0.0   63.481689       58.356723
5    9280.273926    9212.648926 -8197.615479  9280.273926  131.154541  9212.648926        0.0   67.625000       26.029575
6    9280.273926    9261.571560 -8123.692688  9280.273926   67.577271  9261.571560        0.0   18.702366       -0.047634
7    9297.360195    9280.321560 -8042.442871  9297.360195   35.788635  9280.321560        0.0   17.038635       -1.711548
8    9300.215878    9299.071777 -8042.442871  9300.215878   19.894318  9299.071777        0.0    1.144101      -98.855865
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:53:38]  --------------------------------------------------------------------------------
[07/20 17:53:38]  Iteration: 33 (0 solution, 32 counterexamples)
[07/20 17:53:40]  Generator returned sat in 1.039547 secs.
[07/20 17:53:40]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/20 17:53:40]  Improved gap from 195/4096 to 100
[07/20 17:53:40]  Improved number of small numbers from 65 to 101 out of a max of 101
[07/20 17:53:40]  Verifer returned sat in 0.341251 secs.
[07/20 17:53:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    9212.577148    9112.601074 -8555.972168   9212.577148    0.095215  9112.601074        0.0   99.976074       99.976074
1    9212.648682    9212.600830 -8555.972168   9212.648682  100.047607  9212.600830        0.0    0.047852        0.047607
2    9212.648682    9212.601074 -8555.972168   9212.648682    0.023682  9212.601074        0.0    0.047607      -99.952393
3    9608.624756    9312.601074 -8555.972168   9608.624756  396.023682  9312.601074        0.0  296.023682      196.023682
4    9710.624756    9512.601074 -8555.972168   9710.624756  398.023682  9512.601074        0.0  198.023682      198.023682
5    9912.624756    9512.601074 -8555.972168   9912.624756  400.023682  9512.601074        0.0  400.023682      300.023682
6    9914.624756    9712.601074 -8555.972168   9914.624756  402.023682  9712.601074        0.0  202.023682      202.023682
7   10116.624756    9712.601074 -8555.972168  10116.624756  404.023682  9712.601074        0.0  404.023682      304.023682
8   10116.624756    9812.601074 -8555.972168  10116.624756    0.500000  9812.601074        0.0  304.023682      204.023682
high_util=True, low_delay=False, ramp_up=False, ramp_down=False.[0m
[07/20 17:53:41]  --------------------------------------------------------------------------------
[07/20 17:53:41]  Iteration: 34 (0 solution, 33 counterexamples)
[07/20 17:53:42]  Generator returned sat in 0.163991 secs.
[07/20 17:53:42]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/20 17:53:43]  Improved gap from 808651/131072 to 15.625
[07/20 17:53:43]  Improved number of small numbers from 61 to 78 out of a max of 101
[07/20 17:53:43]  Verifer returned sat in 1.475504 secs.
[07/20 17:53:43]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    8873.818115    8673.861328 -8555.972168  8873.818115    0.095215  8673.861328        0.0  199.956787       99.956931
1    8973.861328    8873.861084 -8555.972168  8973.861328  300.000000  8873.861084        0.0  100.000244      100.000144
2    8973.861328    8873.861185 -8555.972168  8973.861328    0.042969  8873.861185        0.0  100.000144        0.000144
3    9250.714126    9073.861185 -8555.972168  9250.714126  376.852941  9073.861185        0.0  176.852941      176.852941
4    9264.287655    9167.031494 -8555.972168  9264.287655  190.426471  9167.031494        0.0   97.256161       90.426471
5    9264.287655    9250.757018 -8555.972168  9264.287655   97.213235  9250.757018        0.0   13.530637       -9.573529
6    9301.363635    9273.861328 -8483.474619  9301.363635   50.606618  9273.861328        0.0   27.502307        0.000000
7    9301.363635    9301.363635 -8399.099619  9301.363635   27.303309  9301.363635        0.0    0.000000      -15.625000
8    9317.015290    9316.988770 -8399.099609  9317.015290   15.651654  9316.988770        0.0    0.026520      -99.973336
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:53:44]  --------------------------------------------------------------------------------
[07/20 17:53:44]  Iteration: 35 (0 solution, 34 counterexamples)
[07/20 17:53:45]  Generator returned sat in 0.452019 secs.
[07/20 17:53:45]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/20 17:53:45]  Improved gap from 0 to 1.5625
[07/20 17:53:45]  Improved number of small numbers from 76 to 101 out of a max of 101
[07/20 17:53:45]  Verifer returned sat in 0.264287 secs.
[07/20 17:53:45]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    8967.007568    8767.031494 -8693.561035  8967.007568    0.095215  8767.031494        0.0  199.976074       99.976074
1    8967.078857    8967.031494 -8693.561035  8967.078857  200.047363  8967.031494        0.0    0.047363        0.047363
2    8967.078857    8967.031494 -8693.561035  8967.078857    0.023926  8967.031494        0.0    0.047363      -99.952637
3    9268.593994    9167.031494 -8693.561035  9268.593994  301.562500  9167.031494        0.0  101.562500      101.562500
4    9268.593994    9167.031494 -8693.561035  9268.593994    2.000000  9167.031494        0.0  101.562500        1.562500
5    9268.593994    9267.031494 -8595.123535  9268.593994    1.000000  9267.031494        0.0    1.562500        0.000000
6    9268.593994    9268.593994 -8496.686035  9268.593994    1.000000  9268.593994        0.0    0.000000       -1.562500
7    9270.593994    9270.570312 -8399.099609  9270.593994    2.000000  9270.570312        0.0    0.023682       -1.976074
8    9272.570312    9272.570312 -8399.099609  9272.570312    2.000000  9272.570312        0.0    0.000000      -99.999756
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:53:46]  --------------------------------------------------------------------------------
[07/20 17:53:46]  Iteration: 36 (0 solution, 35 counterexamples)
[07/20 17:53:47]  Generator returned sat in 0.354969 secs.
[07/20 17:53:47]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/20 17:53:47]  Improved gap from 389/8192 to 37.5
[07/20 17:53:47]  Improved number of small numbers from 65 to 101 out of a max of 101
[07/20 17:53:47]  Verifer returned sat in 0.600256 secs.
[07/20 17:53:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    9194.626465    9094.673584 -8921.203369  9194.626465    0.095215  9094.673584        0.0   99.952881       99.952881
1    9388.316162    9194.673584 -8921.203369  9388.316162  293.642578  9194.673584        0.0  193.642578      193.642578
2    9388.316162    9294.673584 -8921.203369  9388.316162    0.047607  9294.673584        0.0   93.642578       93.642578
3    9388.316162    9388.268555 -8921.203369  9388.316162   68.952637  9388.268555        0.0    0.047607       -6.357422
4    9459.221191    9459.173828 -8921.203369  9459.221191   70.952637  9459.173828        0.0    0.047363      -35.452393
5    9532.126465    9494.673584 -8858.703369  9532.126465   72.952637  9494.673584        0.0   37.452881       -0.047119
6    9569.626221    9532.173584 -8796.203369  9569.626221   74.952637  9532.173584        0.0   37.452637       -0.047363
7    9609.126221    9569.673584 -8735.656006  9609.126221   76.952637  9569.673584        0.0   39.452637        0.000000
8    9609.126221    9609.126221 -8735.656006  9609.126221    1.000000  9609.126221        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:53:48]  --------------------------------------------------------------------------------
[07/20 17:53:48]  Iteration: 37 (0 solution, 36 counterexamples)
[07/20 17:53:49]  Generator returned sat in 0.412431 secs.
[07/20 17:53:49]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/20 17:53:49]  Improved gap from 389/8192 to 100
[07/20 17:53:50]  Improved number of small numbers from 46 to 101 out of a max of 101
[07/20 17:53:50]  Verifer returned sat in 0.477524 secs.
[07/20 17:53:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    9106.020508    8979.925537 -8822.550537   9106.020508    0.094971  8979.925537        0.0  126.094971      110.000000
1    9106.068115    9096.020508 -8822.550537   9106.068115  126.142578  9096.020508        0.0   10.047607       10.047607
2    9196.020508    9106.115723 -8822.550537   9196.020508  100.000000  9106.115723        0.0   89.904785        0.000000
3    9196.068115    9196.020752 -8822.550537   9196.068115   89.952393  9196.020752        0.0    0.047363      -99.952393
4    9396.020752    9296.020508 -8822.550537   9396.020752  200.000000  9296.020508        0.0  100.000244        0.000244
5    9396.020752    9396.020508 -8822.550537   9396.020752    1.000000  9396.020508        0.0    0.000244      -99.999756
6    9543.972900    9496.020752 -8822.550537   9543.972900  147.952393  9496.020752        0.0   47.952148      -52.047607
7    9795.973145    9696.020508 -8822.550537   9795.973145  299.952393  9696.020508        0.0   99.952637       99.952637
8   10197.972900    9796.020508 -8822.550537  10197.972900  501.952393  9796.020508        0.0  401.952393      401.952393
high_util=True, low_delay=False, ramp_up=True, ramp_down=False.[0m
[07/20 17:53:50]  --------------------------------------------------------------------------------
[07/20 17:53:50]  Iteration: 38 (0 solution, 37 counterexamples)
[07/20 17:53:51]  Generator returned sat in 0.192864 secs.
[07/20 17:53:51]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/20 17:53:51]  Improved number of small numbers from 88 to 92 out of a max of 100
[07/20 17:53:51]  Verifer returned sat in 0.394805 secs.
[07/20 17:53:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    9106.020508    8984.358398 -8822.550781   9106.020508    0.094971  8984.358398        0.0  121.662109      110.000000
1    9106.067871    9096.020508 -8822.550781   9106.067871  121.709473  9096.020508        0.0   10.047363       10.047363
2    9196.020508    9106.115723 -8822.550781   9196.020508  100.000000  9106.115723        0.0   89.904785        0.000000
3    9196.926270    9196.926270 -8822.550781   9196.926270   90.810547  9196.926270        0.0    0.000000      -99.094238
4    9396.020752    9296.020508 -8822.550781   9396.020752  199.094482  9296.020508        0.0  100.000244        0.000244
5    9396.020752    9396.020508 -8822.550781   9396.020752    1.500000  9396.020508        0.0    0.000244      -99.999756
6    9544.472900    9496.020752 -8822.550781   9544.472900  148.452393  9496.020752        0.0   48.452148      -51.547607
7    9796.020386    9696.020508 -8822.550781   9796.020386  299.999634  9696.020508        0.0   99.999878       99.999878
8   10198.020142    9796.020508 -8822.550781  10198.020142  501.999634  9796.020508        0.0  401.999634      401.999634
high_util=True, low_delay=False, ramp_up=True, ramp_down=False.[0m
[07/20 17:53:52]  --------------------------------------------------------------------------------
[07/20 17:53:52]  Iteration: 39 (0 solution, 38 counterexamples)
[07/20 17:53:53]  Generator returned sat in 0.309347 secs.
[07/20 17:53:53]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/20 17:53:53]  Improved number of small numbers from 55 to 100 out of a max of 100
[07/20 17:53:53]  Verifer returned sat in 0.340204 secs.
[07/20 17:53:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    9304.189453    9204.189697 -8822.550781   9304.189453    0.094971  9204.189697        0.0   99.999756       99.952637
1    9304.189453    9204.236816 -8822.550781   9304.189453    0.047119  9204.236816        0.0   99.952637       -0.047363
2    9304.284180    9304.236816 -8822.550781   9304.284180  100.047363  9304.236816        0.0    0.047363      -99.952637
3    9604.236572    9404.236816 -8822.550781   9604.236572  299.999756  9404.236816        0.0  199.999756       99.999756
4    9604.236572    9604.189453 -8822.550781   9604.236572    2.000000  9604.189453        0.0    0.047119       -0.000244
5    9808.165771    9704.236816 -8822.550781   9808.165771  203.976318  9704.236816        0.0  103.928955      103.928955
6   10110.213135    9704.236816 -8822.550781  10110.213135  405.976318  9704.236816        0.0  405.976318      305.976318
7   10110.213135    9808.213135 -8822.550781  10110.213135    2.000000  9808.213135        0.0  302.000000      205.976318
8   10110.213135    9904.236816 -8822.550781  10110.213135    2.000000  9904.236816        0.0  205.976318      105.976318
high_util=True, low_delay=False, ramp_up=False, ramp_down=False.[0m
[07/20 17:53:54]  --------------------------------------------------------------------------------
[07/20 17:53:54]  Iteration: 40 (0 solution, 39 counterexamples)
[07/20 17:53:55]  Generator returned sat in 0.505806 secs.
[07/20 17:53:55]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/20 17:53:57]  Improved gap from 0 to 35.9375
[07/20 17:53:57]  Improved number of small numbers from 101 to 101 out of a max of 101
[07/20 17:53:57]  Verifer returned sat in 1.766926 secs.
[07/20 17:53:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0    9646.141602    9569.861816 -9188.175781  9646.141602    0.094971  9569.861816        0.0  76.279785       76.279785
1    9669.767578    9646.235840 -9188.175781  9669.767578   99.905762  9646.235840        0.0  23.531738       -0.094238
2    9705.893555    9669.861816 -9124.301758  9705.893555   59.657715  9669.861816        0.0  36.031738       -0.094238
3    9761.606934    9705.987793 -9104.299805  9761.606934   91.745117  9705.987793        0.0  55.619141      -24.378906
4    9821.923340    9785.985840 -9040.237305  9821.923340  115.935547  9785.985840        0.0  35.937500        0.000000
5    9857.860840    9821.923340 -8976.174805  9857.860840   71.875000  9821.923340        0.0  35.937500        0.000000
6    9899.954102    9857.860840 -8918.268066  9899.954102   78.030762  9857.860840        0.0  42.093262        0.000000
7    9935.797363    9899.954102 -8854.205566  9935.797363   77.936523  9899.954102        0.0  35.843262       -0.094238
8    9997.906494    9935.891602 -8854.205566  9997.906494   97.952393  9935.891602        0.0  62.014893      -37.985107
high_util=False, low_delay=True, ramp_up=False, ramp_down=False.[0m
[07/20 17:53:57]  --------------------------------------------------------------------------------
[07/20 17:53:57]  Iteration: 41 (0 solution, 40 counterexamples)
[07/20 17:53:59]  Generator returned sat in 0.383945 secs.
[07/20 17:53:59]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/20 17:53:59]  Improved gap from 385/8192 to 48.4375
[07/20 17:54:00]  Improved number of small numbers from 77 to 101 out of a max of 101
[07/20 17:54:00]  Verifer returned sat in 1.000201 secs.
[07/20 17:54:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   10620.173828   10496.778076 -9252.789062  10620.173828    0.094727  10496.778076        0.0  123.395752       76.520752
1   10643.673828   10620.194824 -9252.789062  10643.673828  146.895752  10620.194824        0.0   23.479004        0.020752
2   10643.673828   10643.653076 -9201.226807  10643.673828    0.020996  10643.653076        0.0    0.020752      -48.416992
3   10788.538574   10741.642578 -9199.216064  10788.538574  144.885498  10741.642578        0.0   46.895996       -1.541504
4   10938.517578   10890.059326 -9199.216064  10938.517578  196.875000  10890.059326        0.0   48.458252       48.437500
5   10938.517578   10890.080078 -9147.653564  10938.517578    2.000000  10890.080078        0.0   48.437500        0.000000
6   10938.517578   10938.517578 -9096.091064  10938.517578    2.000000  10938.517578        0.0    0.000000      -48.437500
7   11039.955078   10986.955322 -9049.091064  11039.955078  101.437500  10986.955322        0.0   52.999756        0.000000
8   11088.122070   11039.976074 -9049.091064  11088.122070  101.166748  11039.976074        0.0   48.145996      -51.833008
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:54:00]  --------------------------------------------------------------------------------
[07/20 17:54:00]  Iteration: 42 (0 solution, 41 counterexamples)
[07/20 17:54:02]  Generator returned sat in 1.095342 secs.
[07/20 17:54:02]  Candidate solution: 
[1m[94mif(qbound[t][5]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:54:02]  Improved gap from 0 to 23.4375
[07/20 17:54:03]  Improved number of small numbers from 56 to 101 out of a max of 101
[07/20 17:54:03]  Verifer returned sat in 0.388917 secs.
[07/20 17:54:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   10461.976318    9938.538818 -8647.675049  10461.976318    0.094727   9938.538818        0.0  523.437500      523.437500
1   10461.976318   10015.101562 -8647.675049  10461.976318    0.001465  10015.101562        0.0  446.874756      423.437500
2   10461.976318   10138.538818 -8647.675049  10461.976318    0.001250  10138.538818        0.0  323.437500      323.437500
3   10461.976318   10200.256836 -8647.675049  10461.976318    0.001221  10200.256836        0.0  261.719482      223.437500
4   10461.976318   10335.415283 -8647.675049  10461.976318  261.718018  10335.415283        0.0  126.561035      123.437500
5   10461.976318   10338.538818 -8647.675049  10461.976318    0.010000  10338.538818        0.0  123.437500       23.437500
6   10461.976318   10438.538818 -8571.112549  10461.976318    0.010000  10438.538818        0.0   23.437500        0.000000
7   10461.976318   10461.976318 -8494.550049  10461.976318    0.010000  10461.976318        0.0    0.000000      -23.437500
8   10588.537354   10485.413818 -8494.550049  10588.537354  126.561035  10485.413818        0.0  103.123535        3.123535
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:54:03]  --------------------------------------------------------------------------------
[07/20 17:54:03]  Iteration: 43 (0 solution, 42 counterexamples)
[07/20 17:54:04]  Generator returned sat in 0.370268 secs.
[07/20 17:54:04]  Candidate solution: 
[1m[94mif(qbound[t][4]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:54:05]  Improved gap from 0 to 23.4375
[07/20 17:54:05]  Improved number of small numbers from 56 to 101 out of a max of 101
[07/20 17:54:05]  Verifer returned sat in 0.576241 secs.
[07/20 17:54:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   10040.093994   10040.091309 -8749.227539  10040.093994    0.094727  10040.091309        0.0    0.002686        0.002686
1   10540.091309   10040.091309 -8749.227539  10540.091309  500.000000  10040.091309        0.0  500.000000      400.000000
2   10540.091309   10140.091553 -8749.227539  10540.091309  500.000000  10140.091553        0.0  399.999756      300.000000
3   10563.528809   10240.091309 -8749.227539  10563.528809  423.437256  10240.091309        0.0  323.437500      223.437500
4   10563.528809   10440.091309 -8749.227539  10563.528809  200.000000  10440.091309        0.0  123.437500      123.437500
5   10563.528809   10540.091309 -8749.227539  10563.528809    0.010000  10540.091309        0.0   23.437500       23.437500
6   10563.528809   10540.091309 -8672.665039  10563.528809    0.010000  10540.091309        0.0   23.437500        0.000000
7   10563.528809   10563.528809 -8596.102783  10563.528809    0.010000  10563.528809        0.0    0.000000      -23.437744
8   10686.966309   10586.966553 -8596.102783  10686.966309  123.437500  10586.966553        0.0   99.999756       -0.000244
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:54:05]  --------------------------------------------------------------------------------
[07/20 17:54:05]  Iteration: 44 (0 solution, 43 counterexamples)
[07/20 17:54:08]  Generator returned sat in 1.776986 secs.
[07/20 17:54:08]  Candidate solution: 
[1m[94mif(qbound[t][5]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:54:08]  Verifer returned unsat in 0.308828 secs.
[07/20 17:54:08]  Proved solution: 
[1m[92mif(qbound[t][5]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:54:08]  --------------------------------------------------------------------------------
[07/20 17:54:08]  Iteration: 45 (1 solution, 43 counterexamples)
[07/20 17:54:09]  Generator returned sat in 0.177733 secs.
[07/20 17:54:10]  Candidate solution: 
[1m[94mif(qbound[t][5]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:54:10]  Verifer returned unsat in 0.337999 secs.
[07/20 17:54:10]  Proved solution: 
[1m[92mif(qbound[t][5]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:54:10]  --------------------------------------------------------------------------------
[07/20 17:54:10]  Iteration: 46 (2 solution, 43 counterexamples)
[07/20 17:54:11]  Generator returned sat in 0.158271 secs.
[07/20 17:54:11]  Candidate solution: 
[1m[94mif(qbound[t][5]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:54:11]  Verifer returned unsat in 0.322152 secs.
[07/20 17:54:11]  Proved solution: 
[1m[92mif(qbound[t][5]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:54:11]  --------------------------------------------------------------------------------
[07/20 17:54:11]  Iteration: 47 (3 solution, 43 counterexamples)
[07/20 17:54:12]  Generator returned sat in 0.155129 secs.
[07/20 17:54:12]  Candidate solution: 
[1m[94mif(qbound[t][5]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:54:13]  Verifer returned unsat in 0.215750 secs.
[07/20 17:54:13]  Proved solution: 
[1m[92mif(qbound[t][5]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:54:13]  --------------------------------------------------------------------------------
[07/20 17:54:13]  Iteration: 48 (4 solution, 43 counterexamples)
[07/20 17:54:14]  Generator returned sat in 0.542974 secs.
[07/20 17:54:14]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:54:15]  Verifer returned unsat in 0.463936 secs.
[07/20 17:54:15]  Proved solution: 
[1m[92mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:54:15]  --------------------------------------------------------------------------------
[07/20 17:54:15]  Iteration: 49 (5 solution, 43 counterexamples)
[07/20 17:54:16]  Generator returned sat in 0.177563 secs.
[07/20 17:54:16]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:54:16]  Verifer returned unsat in 0.468022 secs.
[07/20 17:54:16]  Proved solution: 
[1m[92mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:54:16]  --------------------------------------------------------------------------------
[07/20 17:54:16]  Iteration: 50 (6 solution, 43 counterexamples)
[07/20 17:54:18]  Generator returned sat in 0.227105 secs.
[07/20 17:54:18]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:54:18]  Verifer returned unsat in 0.245903 secs.
[07/20 17:54:18]  Proved solution: 
[1m[92mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:54:18]  --------------------------------------------------------------------------------
[07/20 17:54:18]  Iteration: 51 (7 solution, 43 counterexamples)
[07/20 17:54:19]  Generator returned sat in 0.160445 secs.
[07/20 17:54:19]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:54:19]  Verifer returned unsat in 0.361555 secs.
[07/20 17:54:19]  Proved solution: 
[1m[92mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:54:19]  --------------------------------------------------------------------------------
[07/20 17:54:19]  Iteration: 52 (8 solution, 43 counterexamples)
[07/20 17:54:21]  Generator returned sat in 1.169858 secs.
[07/20 17:54:21]  Candidate solution: 
[1m[94mif(qbound[t][4]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/20 17:54:22]  Improved gap from 0 to 0
[07/20 17:54:22]  Improved number of small numbers from 48 to 101 out of a max of 101
[07/20 17:54:22]  Verifer returned sat in 0.491467 secs.
[07/20 17:54:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   10967.150391   10568.603516 -10360.426514  10967.150391    0.094482  10568.603516        0.0  398.546875      398.546875
1   10968.650391   10568.603516 -10360.426514  10968.650391  400.046875  10568.603516        0.0  400.046875      300.046875
2   10968.650391   10768.603516 -10360.426514  10968.650391    0.046875  10768.603516        0.0  200.046875      200.046875
3   10968.650391   10868.603271 -10360.426514  10968.650391  200.046631  10868.603271        0.0  100.047119      100.046875
4   10968.650391   10967.150391 -10360.426514  10968.650391    1.500000  10967.150391        0.0    1.500000        0.046875
5   10968.650391   10968.603516 -10260.473389  10968.650391    1.500000  10968.603516        0.0    0.046875        0.000000
6   10970.103516   10968.650391 -10161.926514  10970.103516    1.500000  10968.650391        0.0    1.453125        0.000000
7   10970.103516   10970.103516 -10061.973389  10970.103516    1.000000  10970.103516        0.0    0.000000       -0.046875
8   10971.103516   10970.150391 -10061.973389  10971.103516    1.000000  10970.150391        0.0    0.953125      -99.046875
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:54:22]  --------------------------------------------------------------------------------
[07/20 17:54:22]  Iteration: 53 (8 solution, 44 counterexamples)
[07/20 17:54:24]  Generator returned sat in 0.289666 secs.
[07/20 17:54:24]  Candidate solution: 
[1m[94mif(qbound[t][4]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/20 17:54:24]  Improved gap from 0 to 0
[07/20 17:54:24]  Improved number of small numbers from 101 to 101 out of a max of 101
[07/20 17:54:24]  Verifer returned sat in 0.435079 secs.
[07/20 17:54:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   10871.463623   10671.510254 -10463.333252  10871.463623    0.094482  10671.510254        0.0  199.953369      199.953369
1   11070.963623   10671.510254 -10463.333252  11070.963623  399.453369  10671.510254        0.0  399.453369      299.453369
2   11072.056885   10871.510254 -10463.333252  11072.056885  400.546631  10871.510254        0.0  200.546631      200.546631
3   11072.056885   10871.510254 -10463.333252  11072.056885  200.546631  10871.510254        0.0  200.546631      100.546631
4   11072.056885   11071.010254 -10463.333252  11072.056885    1.000000  11071.010254        0.0    1.046631        0.546631
5   11072.056885   11071.510254 -10363.879883  11072.056885    1.000000  11071.510254        0.0    0.546631        0.000000
6   11072.056885   11072.056885 -10263.926514  11072.056885    0.500000  11072.056885        0.0    0.000000       -0.046631
7   11073.056885   11072.103516 -10164.879883  11073.056885    1.000000  11072.103516        0.0    0.953369        0.000000
8   11073.103516   11073.103516 -10164.879883  11073.103516    1.000000  11073.103516        0.0    0.000000      -99.953369
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:54:25]  --------------------------------------------------------------------------------
[07/20 17:54:25]  Iteration: 54 (8 solution, 45 counterexamples)
[07/20 17:54:28]  Generator returned sat in 2.408364 secs.
[07/20 17:54:28]  Candidate solution: 
[1m[94mif(qbound[t][6]):
	c_f[0][t] = max(0.01, 1c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:54:28]  Improved gap from 0 to 100
[07/20 17:54:28]  Improved number of small numbers from 56 to 101 out of a max of 101
[07/20 17:54:28]  Verifer returned sat in 0.414297 secs.
[07/20 17:54:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   10772.160156   10272.113525 -10063.936768  10772.160156    0.094238  10272.113525        0.0  500.046631      500.046631
1   10872.066650   10372.113525 -10063.936768  10872.066650  599.953125  10372.113525        0.0  499.953125      499.953125
2   10972.113525   10372.113525 -10063.936768  10972.113525  600.000000  10372.113525        0.0  600.000000      500.000000
3   10972.113525   10472.113525 -10063.936768  10972.113525  500.046631  10472.113525        0.0  500.000000      400.000000
4   10972.160156   10672.113525 -10063.936768  10972.160156  500.046631  10672.113525        0.0  300.046631      300.046631
5   11172.160156   10772.113525 -10063.936768  11172.160156  500.046631  10772.113525        0.0  400.046631      400.046631
6   11272.160156   10772.160156 -10063.936768  11272.160156  500.046631  10772.160156        0.0  500.000000      400.046631
7   11272.160156   10872.113525 -10063.936768  11272.160156  300.046631  10872.113525        0.0  400.046631      300.046631
8   11272.160156   10972.113525 -10063.936768  11272.160156  300.046631  10972.113525        0.0  300.046631      200.046631
high_util=True, low_delay=False, ramp_up=False, ramp_down=False.[0m
[07/20 17:54:29]  --------------------------------------------------------------------------------
[07/20 17:54:29]  Iteration: 55 (8 solution, 46 counterexamples)
[07/20 17:54:31]  Generator returned sat in 1.264452 secs.
[07/20 17:54:31]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 17:54:32]  Improved gap from 0 to 35.9375
[07/20 17:54:32]  Improved number of small numbers from 66 to 101 out of a max of 101
[07/20 17:54:32]  Verifer returned sat in 0.741666 secs.
[07/20 17:54:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   10959.144043   10843.924316 -10127.999268  10959.144043    0.093994  10843.924316        0.0  115.219727      100.000000
1   10959.144043   10957.830078 -10127.999268  10959.144043  115.219238  10957.830078        0.0    1.313965        0.000000
2   10995.081543   10959.144043 -10063.936768  10995.081543   37.251465  10959.144043        0.0   35.937500        0.000000
3   10995.128174   10995.081543  -9999.874512  10995.128174   35.984131  10995.081543        0.0    0.046631      -35.891113
4   11072.160156   11033.019043  -9941.015381  11072.160156   77.078613  11033.019043        0.0   39.141113        0.000000
5   11072.160156   11072.160156  -9876.952881  11072.160156   39.094482  11072.160156        0.0    0.000000      -35.937500
6   11130.168213   11108.097656  -9812.890381  11130.168213   58.008057  11108.097656        0.0   22.070557      -13.866943
7   11166.105713   11144.035156  -9748.827881  11166.105713   58.008057  11144.035156        0.0   22.070557      -13.866943
8   11201.043213   11179.972656  -9748.827881  11201.043213   57.008057  11179.972656        0.0   21.070557      -78.929443
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:54:32]  --------------------------------------------------------------------------------
[07/20 17:54:32]  Iteration: 56 (8 solution, 47 counterexamples)
[07/20 17:54:35]  Generator returned sat in 1.685589 secs.
[07/20 17:54:35]  Candidate solution: 
[1m[94mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/20 17:54:35]  Improved gap from 575/16 to 48.4375
[07/20 17:54:36]  Improved number of small numbers from 64 to 101 out of a max of 101
[07/20 17:54:36]  Verifer returned sat in 0.547418 secs.
[07/20 17:54:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   10792.089111   10343.651611 -10127.999268  10792.089111    0.093750  10343.651611        0.0  448.437500        448.4375
1   10792.089111   10343.654053 -10127.999268  10792.089111    0.002441  10343.654053        0.0  448.435059        348.4375
2   10792.089111   10443.651611 -10127.999268  10792.089111  448.435000  10443.651611        0.0  348.437500        248.4375
3   10792.089111   10598.331299 -10127.999268  10792.089111  348.437500  10598.331299        0.0  193.757812        148.4375
4   10792.089111   10743.649170 -10127.999268  10792.089111  128.339844  10743.649170        0.0   48.439941         48.4375
5   10792.089111   10743.651611 -10076.436768  10792.089111    0.010000  10743.651611        0.0   48.437500          0.0000
6   10792.089111   10792.089111 -10024.874268  10792.089111    0.010000  10792.089111        0.0    0.000000        -48.4375
7   10889.968018   10840.526611  -9974.315674  10889.968018   97.878906  10840.526611        0.0   49.441406          0.0000
8   10889.968018   10889.968018  -9974.315674  10889.968018   49.438721  10889.968018        0.0    0.000000       -100.0000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:54:36]  --------------------------------------------------------------------------------
[07/20 17:54:36]  Iteration: 57 (8 solution, 48 counterexamples)
[07/20 17:54:38]  Generator returned sat in 0.750177 secs.
[07/20 17:54:38]  Candidate solution: 
[1m[94mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 17:54:38]  Improved gap from 775/16 to 48.4375
[07/20 17:54:39]  Improved number of small numbers from 62 to 101 out of a max of 101
[07/20 17:54:39]  Verifer returned sat in 0.612183 secs.
[07/20 17:54:39]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   11324.255127   10853.942627 -9276.434326  11324.255127    0.093506  10853.942627        0.0  470.312500      448.437500
1   11324.255127   10975.817627 -9276.434326  11324.255127    0.002441  10975.817627        0.0  348.437500      348.437500
2   11324.255127   10975.817627 -9276.434326  11324.255127    0.000977  10975.817627        0.0  348.437500      248.437500
3   11324.255127   11167.150146 -9276.434326  11324.255127  348.437256  11167.150146        0.0  157.104980      148.437500
4   11324.255127   11271.131592 -9276.434326  11324.255127  157.103760  11271.131592        0.0   53.123535       48.437500
5   11324.255127   11275.817627 -9224.871826  11324.255127    0.010000  11275.817627        0.0   48.437500        0.000000
6   11324.255127   11324.255127 -9173.309326  11324.255127    0.010000  11324.255127        0.0    0.000000      -48.437500
7   11403.307617   11372.692627 -9121.746826  11403.307617   79.052490  11372.692627        0.0   30.614990      -17.822510
8   11423.973145   11421.130371 -9121.746826  11423.973145   51.280518  11421.130371        0.0    2.842773      -97.156982
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:54:39]  --------------------------------------------------------------------------------
[07/20 17:54:39]  Iteration: 58 (8 solution, 49 counterexamples)
[07/20 17:54:41]  Generator returned sat in 0.525338 secs.
[07/20 17:54:41]  Candidate solution: 
[1m[94mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 17:54:41]  Improved gap from 1/4096 to 0
[07/20 17:54:41]  Improved number of small numbers from 99 to 101 out of a max of 101
[07/20 17:54:41]  Verifer returned sat in 0.433787 secs.
[07/20 17:54:41]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   11324.254883   10902.379883 -9324.372070  11324.254883    0.093262  10902.379883        0.0  421.875000      400.000000
1   11324.254883   11024.254639 -9324.372070  11324.254883    0.002197  11024.254639        0.0  300.000244      300.000000
2   11324.254883   11124.254639 -9324.372070  11324.254883    0.000977  11124.254639        0.0  200.000244      200.000000
3   11324.254883   11224.254883 -9324.372070  11324.254883  200.000000  11224.254883        0.0  100.000000      100.000000
4   11324.254883   11324.244873 -9324.372070  11324.254883    0.500000  11324.244873        0.0    0.010010        0.000000
5   11324.254883   11324.254883 -9224.871826  11324.254883    0.010000  11324.254883        0.0    0.000000       -0.499756
6   11324.754883   11324.754639 -9125.371582  11324.754883    0.500000  11324.754639        0.0    0.000244       -0.499512
7   11325.254639   11325.254395 -9025.372070  11325.254639    0.500000  11325.254395        0.0    0.000244       -0.000244
8   11325.754395   11325.254883 -9025.372070  11325.754395    0.500000  11325.254883        0.0    0.499512      -99.500488
high_util=False, low_delay=True, ramp_up=False, ramp_down=False.[0m
[07/20 17:54:42]  --------------------------------------------------------------------------------
[07/20 17:54:42]  Iteration: 59 (8 solution, 50 counterexamples)
[07/20 17:54:45]  Generator returned sat in 2.358894 secs.
[07/20 17:54:45]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 17:54:45]  Improved gap from 0 to 48.4375
[07/20 17:54:46]  Improved number of small numbers from 64 to 101 out of a max of 101
[07/20 17:54:46]  Verifer returned sat in 0.517368 secs.
[07/20 17:54:46]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   11162.095703   11023.781250 -9427.857910  11162.095703    0.093262  11023.781250        0.0  138.314453       38.314453
1   11223.781250   11223.781250 -9427.857910  11223.781250  200.000000  11223.781250        0.0    0.000000        0.000000
2   11323.827637   11323.781250 -9427.857910  11323.827637  100.046387  11323.781250        0.0    0.046387        0.046387
3   11572.218750   11370.279297 -9427.857910  11572.218750  248.437500  11370.279297        0.0  201.939453      148.437500
4   11572.218750   11523.734863 -9427.857910  11572.218750    2.000000  11523.734863        0.0   48.483887       48.437500
5   11572.218750   11523.781250 -9376.295410  11572.218750    2.000000  11523.781250        0.0   48.437500        0.000000
6   11572.218750   11572.218750 -9324.733154  11572.218750    2.000000  11572.218750        0.0    0.000000      -48.437744
7   11673.688477   11625.250977 -9277.765137  11673.688477  101.469727  11625.250977        0.0   48.437500        0.000000
8   11673.688477   11673.688477 -9277.765137  11673.688477    2.000000  11673.688477        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:54:46]  --------------------------------------------------------------------------------
[07/20 17:54:46]  Iteration: 60 (8 solution, 51 counterexamples)
[07/20 17:54:48]  Generator returned sat in 0.802297 secs.
[07/20 17:54:48]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 17:54:49]  Improved gap from 0 to 37.5
[07/20 17:54:49]  Improved number of small numbers from 75 to 101 out of a max of 101
[07/20 17:54:49]  Verifer returned sat in 0.941050 secs.
[07/20 17:54:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   11791.452148   11691.498047 -10372.403564  11791.452148    0.093262  11691.498047        0.0   99.954102       99.954102
1   11981.451904   11791.498047 -10372.403564  11981.451904  289.953857  11791.498047        0.0  189.953857      189.953857
2   11981.544434   11891.498047 -10372.403564  11981.544434  190.046387  11891.498047        0.0   90.046387       90.046387
3   11981.544434   11981.498291 -10372.403564  11981.544434   73.000000  11981.498291        0.0    0.046143       -9.953613
4   12054.998291   12054.952148 -10372.403564  12054.998291   73.500000  12054.952148        0.0    0.046143      -36.499756
5   12128.952148   12091.498047 -10309.903564  12128.952148   74.000000  12091.498047        0.0   37.454102       -0.045898
6   12165.998047   12128.998047 -10247.403564  12165.998047   74.500000  12128.998047        0.0   37.000000       -0.500000
7   12203.998047   12166.498047 -10184.903564  12203.998047   75.000000  12166.498047        0.0   37.500000        0.000000
8   12203.998047   12203.998047 -10184.903564  12203.998047    2.000000  12203.998047        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:54:49]  --------------------------------------------------------------------------------
[07/20 17:54:49]  Iteration: 61 (8 solution, 52 counterexamples)
[07/20 17:54:51]  Generator returned sat in 0.677735 secs.
[07/20 17:54:51]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 17:54:51]  Improved gap from 379/8192 to 0
[07/20 17:54:52]  Improved number of small numbers from 60 to 101 out of a max of 101
[07/20 17:54:52]  Verifer returned sat in 0.412911 secs.
[07/20 17:54:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   11880.474854   11780.498047 -10461.403809  11880.474854    0.093262  11780.498047        0.0   99.976807       99.976562
1   11880.521240   11880.498047 -10461.403809  11880.521240  100.023193  11880.498047        0.0    0.023193        0.022949
2   12180.498047   11980.498291 -10461.403809  12180.498047  300.000000  11980.498291        0.0  199.999756      199.999756
3   12180.498047   11980.498291 -10461.403809  12180.498047    0.023193  11980.498291        0.0  199.999756       99.999756
4   12180.498047   12180.044434 -10461.403564  12180.498047    1.000000  12180.044434        0.0    0.453613        0.000000
5   12181.044434   12180.498047 -10361.949951  12181.044434    1.000000  12180.498047        0.0    0.546387        0.000000
6   12181.498047   12181.044434 -10262.426758  12181.498047    1.000000  12181.044434        0.0    0.453613       -0.023193
7   12181.544434   12181.521484 -10162.473145  12181.544434    0.500000  12181.521484        0.0    0.022949       -0.023193
8   12182.021484   12181.567627 -10162.473145  12182.021484    0.500000  12181.567627        0.0    0.453857      -99.546143
high_util=False, low_delay=True, ramp_up=False, ramp_down=False.[0m
[07/20 17:54:52]  --------------------------------------------------------------------------------
[07/20 17:54:52]  Iteration: 62 (8 solution, 53 counterexamples)
[07/20 17:54:54]  Generator returned sat in 0.743863 secs.
[07/20 17:54:54]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 17:54:55]  Improved gap from 189/4096 to 9.375
[07/20 17:54:55]  Improved number of small numbers from 64 to 101 out of a max of 101
[07/20 17:54:55]  Verifer returned sat in 1.147196 secs.
[07/20 17:54:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   18063.514404   17863.653076 -11283.559570  18063.514404    0.093262  17863.653076        0.0  199.861328       99.861328
1   18063.606689   18063.560791 -11283.559570  18063.606689  199.953613  18063.560791        0.0    0.045898       -0.046387
2   18332.699219   18063.653076 -11283.559570  18332.699219  269.138428  18063.653076        0.0  269.046143      169.046143
3   18332.699219   18262.199219 -11283.559570  18332.699219  269.000000  18262.199219        0.0   70.500000       69.046143
4   18397.199219   18363.652832 -11283.559570  18397.199219  135.000000  18363.652832        0.0   33.546387       33.546143
5   18431.652832   18397.245361 -11251.559814  18431.652832   68.000000  18397.245361        0.0   34.407471       -0.000488
6   18431.745361   18431.699219 -11160.980957  18431.745361   34.500000  18431.699219        0.0    0.046143       -9.329102
7   18449.449219   18449.403076 -11078.684570  18449.449219   17.750000  18449.403076        0.0    0.046143       -9.328857
8   18458.778076   18458.778076 -11078.684570  18458.778076    9.375000  18458.778076        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:54:56]  --------------------------------------------------------------------------------
[07/20 17:54:56]  Iteration: 63 (8 solution, 54 counterexamples)
[07/20 17:54:58]  Generator returned sat in 0.988768 secs.
[07/20 17:54:58]  Candidate solution: 
[1m[94mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 17:54:58]  Improved number of small numbers from 88 to 98 out of a max of 100
[07/20 17:54:58]  Verifer returned sat in 0.354651 secs.
[07/20 17:54:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   18230.791504   17530.791504 -11283.55957  18230.791504    0.093262  17530.791504        0.0  700.000000           700.0
1   18230.791504   17630.791504 -11283.55957  18230.791504  700.000000  17630.791504        0.0  600.000000           600.0
2   18431.791504   17630.791504 -11283.55957  18431.791504  801.000000  17630.791504        0.0  801.000000           701.0
3   18431.791504   17765.752930 -11283.55957  18431.791504    0.023193  17765.752930        0.0  666.038574           601.0
4   18431.791504   17830.791504 -11283.55957  18431.791504    0.500000  17830.791504        0.0  601.000000           501.0
5   18431.791504   17950.782227 -11283.55957  18431.791504  301.000000  17950.782227        0.0  481.009277           401.0
6   18431.791504   18031.768311 -11283.55957  18431.791504  480.986084  18031.768311        0.0  400.023193           301.0
7   18431.791504   18230.791504 -11283.55957  18431.791504  400.023071  18230.791504        0.0  201.000000           201.0
8   18831.791504   18230.791504 -11283.55957  18831.791504  601.000000  18230.791504        0.0  601.000000           501.0
high_util=True, low_delay=False, ramp_up=True, ramp_down=False.[0m
[07/20 17:54:59]  --------------------------------------------------------------------------------
[07/20 17:54:59]  Iteration: 64 (8 solution, 55 counterexamples)
[07/20 17:55:01]  Generator returned sat in 0.844821 secs.
[07/20 17:55:01]  Candidate solution: 
[1m[94mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:55:01]  Improved gap from 0 to 23.4375
[07/20 17:55:01]  Improved number of small numbers from 64 to 101 out of a max of 101
[07/20 17:55:01]  Verifer returned sat in 0.682456 secs.
[07/20 17:55:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   17156.778564   16619.278564 -11436.68457  17156.778564    0.093018  16619.278564        0.0  537.500000        523.4375
1   17156.778564   16733.340820 -11436.68457  17156.778564    0.002441  16733.340820        0.0  423.437744        423.4375
2   17156.778564   16833.341064 -11436.68457  17156.778564    0.002500  16833.341064        0.0  323.437500        323.4375
3   17156.778564   16888.027344 -11436.68457  17156.778564  323.437256  16888.027344        0.0  268.751221        223.4375
4   17156.778564   17033.341064 -11436.68457  17156.778564  268.748779  17033.341064        0.0  123.437500        123.4375
5   17156.778564   17109.903320 -11436.68457  17156.778564    0.010000  17109.903320        0.0   46.875244         23.4375
6   17156.778564   17133.341064 -11360.12207  17156.778564    0.010000  17133.341064        0.0   23.437500          0.0000
7   17156.778564   17156.778564 -11283.55957  17156.778564    0.010000  17156.778564        0.0    0.000000        -23.4375
8   17280.216064   17180.216064 -11283.55957  17280.216064  123.437500  17180.216064        0.0  100.000000          0.0000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:55:02]  --------------------------------------------------------------------------------
[07/20 17:55:02]  Iteration: 65 (8 solution, 56 counterexamples)
[07/20 17:55:07]  Generator returned sat in 4.267491 secs.
[07/20 17:55:07]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:55:08]  Improved gap from 1/2800 to 48.4375
[07/20 17:55:08]  Improved number of small numbers from 66 to 101 out of a max of 101
[07/20 17:55:08]  Verifer returned sat in 0.499499 secs.
[07/20 17:55:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   16245.626709   16145.626709 -11463.247314  16245.626709    0.093018  16145.626709        0.0  100.000000        0.000000
1   16245.626709   16245.626709 -11463.247314  16245.626709    0.022949  16245.626709        0.0    0.000000     -100.000000
2   16512.836914   16345.626709 -11463.247314  16512.836914  267.210205  16345.626709        0.0  167.210205       67.210205
3   16512.836914   16511.251709 -11463.247314  16512.836914    0.022705  16511.251709        0.0    1.585205      -32.789795
4   16694.064209   16645.603760 -11463.247314  16694.064209  182.812500  16645.603760        0.0   48.460449       48.437500
5   16694.064209   16645.626709 -11411.684814  16694.064209    1.000000  16645.626709        0.0   48.437500        0.000000
6   16694.064209   16694.064209 -11360.122314  16694.064209    1.000000  16694.064209        0.0    0.000000      -48.437500
7   16785.470459   16742.501709 -11308.559814  16785.470459   91.406250  16742.501709        0.0   42.968750       -5.468750
8   16790.950684   16790.939209 -11308.559814  16790.950684   48.448975  16790.939209        0.0    0.011475      -99.988525
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:55:08]  --------------------------------------------------------------------------------
[07/20 17:55:08]  Iteration: 66 (8 solution, 57 counterexamples)
[07/20 17:55:12]  Generator returned sat in 2.505472 secs.
[07/20 17:55:12]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:55:12]  Improved gap from 8145/4096 to 100
[07/20 17:55:13]  Improved number of small numbers from 60 to 93 out of a max of 101
[07/20 17:55:13]  Verifer returned sat in 0.583111 secs.
[07/20 17:55:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   16357.695068   16257.695068 -11463.247314  16357.695068    0.092773  16257.695068        0.0  100.000000        0.000244
1   16357.695068   16357.694824 -11463.247314  16357.695068    0.022949  16357.694824        0.0    0.000244      -99.999756
2   16607.703369   16457.695068 -11463.247314  16607.703369  250.008545  16457.695068        0.0  150.008301       50.008545
3   16607.703369   16607.697815 -11463.247314  16607.703369   50.002869  16607.697815        0.0    0.005554      -49.991455
4   16707.703552   16657.695068 -11463.247314  16707.703552  100.005737  16657.695068        0.0   50.008484      -49.991272
5   16857.706543   16857.694824 -11463.247314  16857.706543  200.011475  16857.694824        0.0    0.011719        0.011719
6   17257.717773   16857.712158 -11463.247314  17257.717773  400.022949  16857.712158        0.0  400.005615      300.022949
7   17257.717773   17057.694824 -11463.247314  17257.717773    1.000000  17057.694824        0.0  200.022949      200.022949
8   17257.717773   17057.694824 -11463.247314  17257.717773    1.000000  17057.694824        0.0  200.022949      100.022949
high_util=True, low_delay=False, ramp_up=False, ramp_down=False.[0m
[07/20 17:55:13]  --------------------------------------------------------------------------------
[07/20 17:55:13]  Iteration: 67 (8 solution, 58 counterexamples)
[07/20 17:55:16]  Generator returned sat in 1.305814 secs.
[07/20 17:55:16]  Candidate solution: 
[1m[94mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:55:16]  Improved gap from 1/1200 to 23.4375
[07/20 17:55:16]  Improved number of small numbers from 91 to 101 out of a max of 101
[07/20 17:55:16]  Verifer returned sat in 0.383932 secs.
[07/20 17:55:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   16822.314941   16722.319580 -11827.872559  16822.314941    0.092529  16722.319580        0.0   99.995361       99.995117
1   17119.199707   16822.319580 -11827.872559  17119.199707  396.880127  16822.319580        0.0  296.880127      296.879883
2   17122.314697   16830.569824 -11827.872559  17122.314697  299.995117  16830.569824        0.0  291.744873      199.994873
3   17145.757324   16963.302979 -11827.872559  17145.757324  315.187500  16963.302979        0.0  182.454346      123.437500
4   17145.757324   17119.199707 -11827.872559  17145.757324  121.491699  17119.199707        0.0   26.557617       23.437500
5   17145.757324   17122.319824 -11751.310059  17145.757324    0.010000  17122.319824        0.0   23.437500        0.000000
6   17269.194824   17145.757324 -11751.310059  17269.194824  146.875000  17145.757324        0.0  123.437500       23.437500
7   17269.194824   17245.757324 -11674.747559  17269.194824    0.010000  17245.757324        0.0   23.437500        0.000000
8   17269.194824   17269.194824 -11674.747559  17269.194824    0.010000  17269.194824        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:55:17]  --------------------------------------------------------------------------------
[07/20 17:55:17]  Iteration: 68 (8 solution, 59 counterexamples)
[07/20 17:55:20]  Generator returned sat in 1.776037 secs.
[07/20 17:55:20]  Candidate solution: 
[1m[94mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:55:20]  Improved gap from 367/16 to 23.4375
[07/20 17:55:20]  Improved number of small numbers from 60 to 101 out of a max of 101
[07/20 17:55:20]  Verifer returned sat in 0.560677 secs.
[07/20 17:55:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   16513.849609   16335.734863 -11827.872559  16513.849609    0.092285  16335.734863        0.0  178.114746       99.989990
1   16816.964844   16513.859619 -11827.872559  16816.964844  481.229980  16513.859619        0.0  303.105225      303.105225
2   16816.964844   16524.224609 -11827.872559  16816.964844  303.105225  16524.224609        0.0  292.740234      203.105225
3   16840.412109   16671.853027 -11827.872559  16840.412109  316.187500  16671.853027        0.0  168.559082      126.552490
4   16840.412109   16813.859619 -11827.872559  16840.412109  168.559082  16813.859619        0.0   26.552490       26.552490
5   16840.412109   16816.974609 -11754.425049  16840.412109    0.010000  16816.974609        0.0   23.437500        0.000000
6   16963.849609   16840.412109 -11754.425049  16963.849609  146.875000  16840.412109        0.0  123.437500       23.437500
7   16963.849609   16940.412109 -11677.862549  16963.849609    0.010000  16940.412109        0.0   23.437500        0.000000
8   16963.849609   16963.849609 -11677.862549  16963.849609    0.010000  16963.849609        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:55:21]  --------------------------------------------------------------------------------
[07/20 17:55:21]  Iteration: 69 (8 solution, 60 counterexamples)
[07/20 17:55:23]  Generator returned sat in 0.604020 secs.
[07/20 17:55:23]  Candidate solution: 
[1m[94mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:55:23]  Improved gap from 375/16 to 23.4375
[07/20 17:55:23]  Improved number of small numbers from 64 to 101 out of a max of 101
[07/20 17:55:23]  Verifer returned sat in 0.576664 secs.
[07/20 17:55:23]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   16025.886963   15912.517090 -11935.675293  16025.886963    0.092285  15912.517090        0.0  113.369873      113.369629
1   16025.886963   15912.517334 -11935.675293  16025.886963    0.002686  15912.517334        0.0  113.369629       13.369629
2   16112.517090   16025.889404 -11935.675049  16112.517090  199.999756  16025.889404        0.0   86.627686        0.000000
3   16339.076904   16112.519531 -11935.675049  16339.076904  313.187500  16112.519531        0.0  226.557373      126.559814
4   16339.076904   16312.517090 -11935.675049  16339.076904    0.010000  16312.517090        0.0   26.559814       26.559814
5   16339.076904   16315.639404 -11862.234863  16339.076904    0.010000  16315.639404        0.0   23.437500        0.000000
6   16462.514404   16339.076904 -11862.234863  16462.514404  146.875000  16339.076904        0.0  123.437500       23.437500
7   16462.514404   16439.076904 -11785.672363  16462.514404    0.010000  16439.076904        0.0   23.437500        0.000000
8   16462.514404   16462.514404 -11785.672363  16462.514404    0.010000  16462.514404        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:55:24]  --------------------------------------------------------------------------------
[07/20 17:55:24]  Iteration: 70 (8 solution, 61 counterexamples)
[07/20 17:55:26]  Generator returned sat in 0.576821 secs.
[07/20 17:55:26]  Candidate solution: 
[1m[94mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:55:26]  Improved gap from 375/16 to 23.4375
[07/20 17:55:26]  Improved number of small numbers from 60 to 101 out of a max of 101
[07/20 17:55:26]  Verifer returned sat in 0.512336 secs.
[07/20 17:55:26]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   15656.521973   15456.519287 -11935.675537  15656.521973    0.092285  15456.519287        0.0  200.002686      200.000000
1   15656.521973   15456.521973 -11935.675537  15656.521973    0.002441  15456.521973        0.0  200.000000      100.000000
2   15656.521973   15568.894287 -11935.675537  15656.521973  199.997559  15568.894287        0.0   87.627686        0.000000
3   15883.081787   15656.521973 -11935.675537  15883.081787  314.187500  15656.521973        0.0  226.559814      126.559814
4   15883.081787   15856.521973 -11935.675537  15883.081787    0.010000  15856.521973        0.0   26.559814       26.559814
5   15883.081787   15859.644287 -11862.235352  15883.081787    0.010000  15859.644287        0.0   23.437500        0.000000
6   16006.519287   15883.081787 -11862.235352  16006.519287  146.875000  15883.081787        0.0  123.437500       23.437500
7   16006.519287   15983.081787 -11785.672852  16006.519287    0.010000  15983.081787        0.0   23.437500        0.000000
8   16006.519287   16006.519287 -11785.672852  16006.519287    0.010000  16006.519287        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:55:27]  --------------------------------------------------------------------------------
[07/20 17:55:27]  Iteration: 71 (8 solution, 62 counterexamples)
[07/20 17:55:29]  Generator returned sat in 0.897386 secs.
[07/20 17:55:29]  Candidate solution: 
[1m[94mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:55:29]  Verifer returned unsat in 0.225000 secs.
[07/20 17:55:29]  Proved solution: 
[1m[92mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:55:29]  --------------------------------------------------------------------------------
[07/20 17:55:29]  Iteration: 72 (9 solution, 62 counterexamples)
[07/20 17:55:31]  Generator returned sat in 0.492251 secs.
[07/20 17:55:31]  Candidate solution: 
[1m[94mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:55:31]  Improved gap from 1/600 to 100
[07/20 17:55:31]  Improved number of small numbers from 101 to 101 out of a max of 101
[07/20 17:55:31]  Verifer returned sat in 0.306279 secs.
[07/20 17:55:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   16406.590088   16106.635498 -12685.789062  16406.590088    0.092285  16106.635498        0.0  299.954590      199.954590
1   16606.590088   16306.635498 -12685.789062  16606.590088  499.954590  16306.635498        0.0  299.954590      299.954590
2   16706.726318   16306.635498 -12685.789062  16706.726318  400.090820  16306.635498        0.0  400.090820      300.090820
3   16706.726318   16406.635498 -12685.789062  16706.726318  400.045410  16406.635498        0.0  300.090820      200.090820
4   16806.680908   16606.635498 -12685.789062  16806.680908  400.045410  16606.635498        0.0  200.045410      200.045410
5   17006.680908   16606.635498 -12685.789062  17006.680908  400.045410  16606.635498        0.0  400.045410      300.045410
6   17006.680908   16706.771729 -12685.789062  17006.680908  400.045410  16706.771729        0.0  299.909180      200.045410
7   17106.817139   16906.635498 -12685.789062  17106.817139  400.045410  16906.635498        0.0  200.181641      200.181641
8   17306.680908   16906.635498 -12685.789062  17306.680908  400.045410  16906.635498        0.0  400.045410      300.045410
high_util=True, low_delay=False, ramp_up=False, ramp_down=False.[0m
[07/20 17:55:32]  --------------------------------------------------------------------------------
[07/20 17:55:32]  Iteration: 73 (9 solution, 63 counterexamples)
[07/20 17:55:37]  Generator returned sat in 4.332620 secs.
[07/20 17:55:37]  Candidate solution: 
[1m[94mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:55:38]  Improved gap from 1/800 to 0
[07/20 17:55:38]  Improved number of small numbers from 67 to 81 out of a max of 101
[07/20 17:55:38]  Verifer returned sat in 0.695228 secs.
[07/20 17:55:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   16906.609375   16706.613037 -13185.766602  16906.609375    0.091797  16706.613037        0.0  199.996338      199.996338
1   16906.611572   16806.613037 -13185.766602  16906.611572  199.998535  16806.613037        0.0   99.998535       99.998535
2   16906.611816   16906.610498 -13185.766563  16906.611816   99.998779  16906.610498        0.0    0.001318       -0.001182
3   16906.624248   16906.613037 -13085.777813  16906.624248    0.013750  16906.613037        0.0    0.011211        0.000000
4   16906.624248   16906.624248 -12985.777813  16906.624248    0.010000  16906.624248        0.0    0.000000        0.000000
5   16906.634248   16906.624248 -12885.787813  16906.634248    0.010000  16906.624248        0.0    0.010000        0.000000
6   16906.634248   16906.634248 -12785.787842  16906.634248    0.010000  16906.634248        0.0    0.000000       -0.000029
7   16906.644248   16906.635498 -12685.797852  16906.644248    0.010000  16906.635498        0.0    0.008750       -0.000039
8   16906.645498   16906.645264 -12685.797852  16906.645498    0.010000  16906.645264        0.0    0.000234      -99.998789
high_util=False, low_delay=True, ramp_up=False, ramp_down=False.[0m
[07/20 17:55:39]  --------------------------------------------------------------------------------
[07/20 17:55:39]  Iteration: 74 (9 solution, 64 counterexamples)
[07/20 17:55:41]  Generator returned sat in 1.374091 secs.
[07/20 17:55:41]  Candidate solution: 
[1m[94mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 17:55:42]  Improved gap from 1/800 to 48.4375
[07/20 17:55:42]  Improved number of small numbers from 56 to 93 out of a max of 101
[07/20 17:55:42]  Verifer returned sat in 0.955761 secs.
[07/20 17:55:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   17056.596680   16656.606689 -13135.760498  17056.596680    0.091553  16656.606689        0.0  399.989990      399.989990
1   17056.596680   16756.606689 -13135.760498  17056.596680    0.001250  16756.606689        0.0  299.989990      299.989990
2   17056.606689   16856.606689 -13135.760498  17056.606689  300.000000  16856.606689        0.0  200.000000      200.000000
3   17056.606689   16922.939209 -13135.760498  17056.606689    0.001250  16922.939209        0.0  133.667480      100.000000
4   17056.606689   17056.598066 -13135.760498  17056.606689  133.666260  17056.598066        0.0    0.008623        0.000000
5   17056.608066   17056.606689 -13084.197998  17056.608066    0.010000  17056.606689        0.0    0.001377      -48.436123
6   17157.106689   17105.044189 -13036.261475  17157.106689  100.500000  17105.044189        0.0   52.062500       -0.000977
7   17196.596680   17157.108066 -12985.750244  17196.596680   91.552490  17157.108066        0.0   39.488613       -9.999756
8   17207.863066   17206.596680 -12985.750244  17207.863066   50.755000  17206.596680        0.0    1.266387      -98.733369
high_util=False, low_delay=True, ramp_up=False, ramp_down=False.[0m
[07/20 17:55:43]  --------------------------------------------------------------------------------
[07/20 17:55:43]  Iteration: 75 (9 solution, 65 counterexamples)
[07/20 17:55:45]  Generator returned sat in 0.669178 secs.
[07/20 17:55:45]  Candidate solution: 
[1m[94mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/20 17:55:45]  Improved gap from 775/16 to 48.4375
[07/20 17:55:46]  Improved number of small numbers from 55 to 101 out of a max of 101
[07/20 17:55:46]  Verifer returned sat in 0.558229 secs.
[07/20 17:55:46]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   17533.593994   17282.033691 -14239.727783  17533.593994    0.091553  17282.033691        0.0  251.560303      151.560303
1   17533.593994   17482.033691 -14239.727783  17533.593994    0.002686  17482.033691        0.0   51.560303       51.560303
2   17785.158691   17533.596191 -14239.727783  17785.158691  303.125000  17533.596191        0.0  251.562500      203.125000
3   17833.596191   17649.075195 -14239.727783  17833.596191  300.000000  17649.075195        0.0  184.520996      151.562500
4   17833.596191   17782.033691 -14239.727783  17833.596191  184.520752  17782.033691        0.0   51.562500       51.562500
5   17833.596191   17785.158691 -14191.290283  17833.596191    0.010000  17785.158691        0.0   48.437500        0.000000
6   17833.596191   17833.596191 -14139.727783  17833.596191    0.010000  17833.596191        0.0    0.000000      -48.437500
7   17926.856689   17882.033691 -14088.165283  17926.856689   93.260498  17882.033691        0.0   44.822998       -3.614502
8   17933.033691   17930.471436 -14088.165283  17933.033691   51.000000  17930.471436        0.0    2.562256      -97.437500
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:55:46]  --------------------------------------------------------------------------------
[07/20 17:55:46]  Iteration: 76 (9 solution, 66 counterexamples)
[07/20 17:55:48]  Generator returned sat in 0.954142 secs.
[07/20 17:55:48]  Candidate solution: 
[1m[94mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/20 17:55:49]  Improved number of small numbers from 86 to 86 out of a max of 100
[07/20 17:55:49]  Verifer returned sat in 0.355574 secs.
[07/20 17:55:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t   queue_t  bottle_queue_t
0   17533.593994   17233.593994 -14088.165283  17533.593994    0.091553  17233.593994        0.0  300.0000        200.0000
1   17533.593994   17333.593994 -14088.165283  17533.593994    0.002500  17333.593994        0.0  200.0000        100.0000
2   17533.593994   17436.390494 -14088.165283  17533.593994    0.002500  17436.390494        0.0   97.2035          0.0000
3   17933.596494   17533.593994 -14088.165283  17933.596494  497.206000  17533.593994        0.0  400.0025        300.0025
4   17933.596494   17733.593994 -14088.165283  17933.596494  399.603000  17733.593994        0.0  200.0025        200.0025
5   18134.395494   17833.593994 -14088.165283  18134.395494  400.801500  17833.593994        0.0  300.8015        300.8015
6   18233.596494   17833.593994 -14088.165283  18233.596494  400.002500  17833.593994        0.0  400.0025        300.0025
7   18233.596494   17933.593994 -14088.165283  18233.596494    0.010000  17933.593994        0.0  300.0025        200.0025
8   18233.596494   18033.593994 -14088.165283  18233.596494    0.010000  18033.593994        0.0  200.0025        100.0025
high_util=True, low_delay=False, ramp_up=False, ramp_down=False.[0m
[07/20 17:55:49]  --------------------------------------------------------------------------------
[07/20 17:55:49]  Iteration: 77 (9 solution, 67 counterexamples)
[07/20 17:55:52]  Generator returned sat in 1.273470 secs.
[07/20 17:55:52]  Candidate solution: 
[1m[94mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/20 17:55:53]  Improved gap from 185/8192 to 35.9375
[07/20 17:55:53]  Improved number of small numbers from 64 to 70 out of a max of 101
[07/20 17:55:53]  Verifer returned sat in 1.071911 secs.
[07/20 17:55:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t   cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   17650.724609   17518.089478 -14394.043945  17650.724609   0.091309  17518.089478        0.0  132.635132       99.954956
1   17650.724609   17650.679321 -14394.043945  17650.724609   0.045166  17650.679321        0.0    0.045288       -0.045044
2   17686.661987   17650.769653 -14329.981445  17686.661987  35.982666  17650.769653        0.0   35.892334       -0.045166
3   17722.644653   17686.707153 -14265.919189  17722.644653  71.875000  17686.707153        0.0   35.937500       -0.000244
4   17772.015991   17730.873657 -14215.290283  17772.015991  85.308838  17730.873657        0.0   41.142334        0.000000
5   17772.015991   17772.015991 -14151.227783  17772.015991  41.097168  17772.015991        0.0    0.000000      -35.937500
6   17833.639160   17807.953491 -14088.165283  17833.639160  61.623169  17807.953491        0.0   25.685669      -11.251831
7   17869.576660   17844.890991 -14024.102783  17869.576660  61.623169  17844.890991        0.0   24.685669      -11.251831
8   17902.899658   17880.828613 -14024.102783  17902.899658  58.008667  17880.828613        0.0   22.071045      -77.928833
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:55:54]  --------------------------------------------------------------------------------
[07/20 17:55:54]  Iteration: 78 (9 solution, 68 counterexamples)
[07/20 17:55:56]  Generator returned sat in 0.986679 secs.
[07/20 17:55:56]  Candidate solution: 
[1m[94mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/20 17:55:57]  Improved gap from 0 to 0
[07/20 17:55:57]  Improved number of small numbers from 77 to 101 out of a max of 101
[07/20 17:55:57]  Verifer returned sat in 0.745099 secs.
[07/20 17:55:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   17548.724609   17548.702148 -14486.120361  17548.724609    0.091064  17548.702148        0.0    0.022461        0.022461
1   17748.702148   17648.702148 -14486.120361  17748.702148  200.000000  17648.702148        0.0  100.000000      100.000000
2   17748.702148   17748.679443 -14486.120361  17748.702148  100.000000  17748.679443        0.0    0.022705        0.000000
3   17748.747314   17748.724609 -14387.142578  17748.747314    0.067871  17748.724609        0.0    0.022705       -0.977051
4   17749.724609   17749.724365 -14287.142822  17749.724609    1.000000  17749.724365        0.0    0.000244        0.000000
5   17750.724365   17749.724609 -14188.142578  17750.724365    1.000000  17749.724609        0.0    0.999756        0.000000
6   17750.724609   17750.724365 -14088.165283  17750.724609    1.000000  17750.724365        0.0    0.000244       -0.022461
7   17751.724365   17750.747314 -13989.142822  17751.724365    1.000000  17750.747314        0.0    0.977051       -0.000244
8   17751.747314   17751.747070 -13989.142578  17751.747314    1.000000  17751.747070        0.0    0.000244      -99.977051
high_util=False, low_delay=True, ramp_up=False, ramp_down=False.[0m
[07/20 17:55:57]  --------------------------------------------------------------------------------
[07/20 17:55:57]  Iteration: 79 (9 solution, 69 counterexamples)
[07/20 17:56:01]  Generator returned sat in 1.988627 secs.
[07/20 17:56:01]  Candidate solution: 
[1m[94mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/20 17:56:02]  Improved gap from 1/4096 to 14.0625
[07/20 17:56:03]  Improved number of small numbers from 52 to 101 out of a max of 101
[07/20 17:56:03]  Verifer returned sat in 1.668195 secs.
[07/20 17:56:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   17433.071289   17333.115967 -14270.534180  17433.071289    0.091064  17333.115967        0.0   99.955322       99.955322
1   17633.071045   17433.115967 -14270.534180  17633.071045  299.955078  17433.115967        0.0  199.955078      199.955078
2   17825.161133   17433.115967 -14270.534180  17825.161133  392.045166  17433.115967        0.0  392.045166      292.045166
3   17825.161133   17633.115967 -14270.534180  17825.161133  392.000000  17633.115967        0.0  192.045166      192.045166
4   17830.115967   17731.571045 -14270.534180  17830.115967  197.000000  17731.571045        0.0   98.544922       97.000000
5   17830.115967   17779.821045 -14267.534180  17830.115967   98.500000  17779.821045        0.0   50.294922        0.000000
6   17830.115967   17830.115967 -14181.596924  17830.115967   50.250000  17830.115967        0.0    0.000000      -14.062744
7   17856.240967   17844.178711 -14095.659424  17856.240967   26.125000  17844.178711        0.0   12.062256       -2.000244
8   17858.241211   17858.241211 -14095.659424  17858.241211   14.062500  17858.241211        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:56:03]  --------------------------------------------------------------------------------
[07/20 17:56:03]  Iteration: 80 (9 solution, 70 counterexamples)
[07/20 17:56:06]  Generator returned sat in 1.453180 secs.
[07/20 17:56:06]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/20 17:56:07]  Improved number of small numbers from 55 to 100 out of a max of 100
[07/20 17:56:07]  Verifer returned sat in 0.800423 secs.
[07/20 17:56:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   16974.868652   16874.913574 -13912.331787  16974.868652    0.091064  16874.913574        0.0   99.955078       -0.044678
1   16974.958252   16974.913330 -13912.331787  16974.958252  100.044678  16974.913330        0.0    0.044922      -99.955078
2   17374.868408   17078.868652 -13912.331787  17374.868408  399.955078  17078.868652        0.0  295.999756      199.955078
3   17573.048340   17174.913574 -13912.331787  17573.048340  494.179688  17174.913574        0.0  398.134766      298.135010
4   17573.048340   17374.913330 -13912.331787  17573.048340  398.089844  17374.913330        0.0  198.135010      198.135010
5   17774.958252   17374.913330 -13912.331787  17774.958252  400.044922  17374.913330        0.0  400.044922      300.044922
6   17774.958252   17474.913574 -13912.331787  17774.958252  296.044678  17474.913574        0.0  300.044678      200.044922
7   17774.958252   17674.913330 -13912.331787  17774.958252  300.000000  17674.913330        0.0  100.044922      100.044922
8   17974.913330   17774.913330 -13912.331787  17974.913330  300.000000  17774.913330        0.0  200.000000      200.000000
high_util=True, low_delay=False, ramp_up=False, ramp_down=False.[0m
[07/20 17:56:07]  --------------------------------------------------------------------------------
[07/20 17:56:07]  Iteration: 81 (9 solution, 71 counterexamples)
[07/20 17:56:12]  Generator returned sat in 2.695258 secs.
[07/20 17:56:12]  Candidate solution: 
[1m[94mif(qbound[t][6]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/20 17:56:12]  Improved gap from 0 to 17.1875
[07/20 17:56:13]  Improved number of small numbers from 54 to 101 out of a max of 101
[07/20 17:56:13]  Verifer returned sat in 0.943846 secs.
[07/20 17:56:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   15949.041504   15549.041748 -12486.460205  15949.041504    0.091064  15549.041748        0.0  399.999756      399.999756
1   15949.041748   15549.041748 -12486.460205  15949.041748  400.000000  15549.041748        0.0  400.000000      300.000000
2   16039.086426   15649.041748 -12486.460205  16039.086426  490.044678  15649.041748        0.0  390.044678      290.044678
3   16039.086426   15794.041748 -12486.460205  16039.086426  390.000000  15794.041748        0.0  245.044678      190.044678
4   16039.086426   15949.041504 -12486.460205  16039.086426  245.000000  15949.041504        0.0   90.044922       90.044678
5   16072.541504   16009.836670 -12486.460205  16072.541504  123.500000  16009.836670        0.0   62.704834       23.499756
6   16072.586670   16064.621826 -12419.227783  16072.586670   62.750000  16064.621826        0.0    7.964844       -9.222656
7   16096.996826   16081.809326 -12336.415283  16096.996826   32.375000  16081.809326        0.0   15.187500       -2.000000
8   16098.996826   16098.996826 -12336.415283  16098.996826   17.187500  16098.996826        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:56:13]  --------------------------------------------------------------------------------
[07/20 17:56:13]  Iteration: 82 (9 solution, 72 counterexamples)
[07/20 17:56:16]  Generator returned sat in 1.211926 secs.
[07/20 17:56:16]  Candidate solution: 
[1m[94mif(qbound[t][6]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/20 17:56:17]  Improved gap from 88099/14336 to 29.6875
[07/20 17:56:17]  Improved number of small numbers from 56 to 101 out of a max of 101
[07/20 17:56:17]  Verifer returned sat in 1.151241 secs.
[07/20 17:56:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   12874.822754   12372.278564 -9356.910889  12874.822754    0.090820  12372.278564        0.0  502.544189      455.330322
1   12874.822754   12419.492432 -9356.910889  12874.822754    0.044678  12419.492432        0.0  455.330322      355.330322
2   12874.822754   12593.992432 -9356.910889  12874.822754    0.044434  12593.992432        0.0  280.830322      255.330322
3   12874.822754   12619.492432 -9356.910889  12874.822754  280.830078  12619.492432        0.0  255.330322      155.330322
4   12874.822754   12811.974365 -9356.910889  12874.822754  123.606934  12811.974365        0.0   62.848389       55.330322
5   12874.822754   12819.492432 -9312.241211  12874.822754   62.803467  12819.492432        0.0   55.330322        0.000000
6   12932.242432   12874.822754 -9269.660889  12932.242432  112.750000  12874.822754        0.0   57.419678        0.000000
7   12932.242432   12932.242432 -9199.348389  12932.242432   57.375000  12932.242432        0.0    0.000000      -29.687500
8   12961.929932   12961.929932 -9199.348389  12961.929932   29.687500  12961.929932        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:56:17]  --------------------------------------------------------------------------------
[07/20 17:56:17]  Iteration: 83 (9 solution, 73 counterexamples)
[07/20 17:56:27]  Generator returned sat in 7.854338 secs.
[07/20 17:56:27]  Candidate solution: 
[1m[94mif(qbound[t][6]):
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/20 17:56:27]  Improved gap from 554917/32768 to 100
[07/20 17:56:28]  Improved number of small numbers from 71 to 85 out of a max of 101
[07/20 17:56:28]  Verifer returned sat in 0.738236 secs.
[07/20 17:56:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   17755.917480   17033.805664 -9356.910889  17755.917480    0.090820  17033.805664        0.0  722.111816      622.111816
1   17755.917480   17133.805664 -9356.910889  17755.917480    0.044678  17133.805664        0.0  622.111816      522.111816
2   17755.917480   17267.805664 -9356.910889  17755.917480    0.022461  17267.805664        0.0  488.111816      422.111816
3   17755.917480   17345.805664 -9356.910889  17755.917480  488.089355  17345.805664        0.0  410.111816      322.111816
4   17755.917480   17533.805664 -9356.910889  17755.917480  400.044678  17533.805664        0.0  222.111816      222.111816
5   17933.828003   17533.805664 -9356.910889  17933.828003  400.022339  17533.805664        0.0  400.022339      300.022339
6   17933.828003   17733.805664 -9356.910889  17933.828003  333.011169  17733.805664        0.0  200.022339      200.022339
7   18094.311249   17755.917480 -9356.910889  18094.311249  360.505585  17755.917480        0.0  338.393768      260.505585
8   18094.311249   17833.805664 -9356.910889  18094.311249  181.252792  17833.805664        0.0  260.505585      160.505585
high_util=True, low_delay=False, ramp_up=False, ramp_down=False.[0m
[07/20 17:56:28]  --------------------------------------------------------------------------------
[07/20 17:56:28]  Iteration: 84 (9 solution, 74 counterexamples)
[07/20 17:56:33]  Generator returned sat in 3.261843 secs.
[07/20 17:56:33]  Candidate solution: 
[1m[94mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 17:56:33]  Improved gap from 0 to 23.4375
[07/20 17:56:34]  Improved number of small numbers from 64 to 101 out of a max of 101
[07/20 17:56:34]  Verifer returned sat in 0.403202 secs.
[07/20 17:56:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0    17756.39624   17332.958740 -9510.035889  17756.39624    0.090820  17332.958740        0.0  423.437500        423.4375
1    17756.39624   17432.958740 -9510.035889  17756.39624  423.437500  17432.958740        0.0  323.437500        323.4375
2    17756.39624   17439.208740 -9510.035889  17756.39624  323.415283  17439.208740        0.0  317.187500        223.4375
3    17756.39624   17532.958740 -9510.035889  17756.39624    0.021973  17532.958740        0.0  223.437500        123.4375
4    17756.39624   17732.936523 -9510.035889  17756.39624  100.000000  17732.936523        0.0   23.459717         23.4375
5    17756.39624   17732.958740 -9433.473389  17756.39624    0.500000  17732.958740        0.0   23.437500          0.0000
6    17879.83374   17756.396240 -9433.473389  17879.83374  146.875000  17756.396240        0.0  123.437500         23.4375
7    17879.83374   17856.396240 -9356.910889  17879.83374    0.500000  17856.396240        0.0   23.437500          0.0000
8    17879.83374   17879.833740 -9356.910889  17879.83374    0.500000  17879.833740        0.0    0.000000       -100.0000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:56:34]  --------------------------------------------------------------------------------
[07/20 17:56:34]  Iteration: 85 (9 solution, 75 counterexamples)
[07/20 17:56:36]  Generator returned sat in 0.831146 secs.
[07/20 17:56:36]  Candidate solution: 
[1m[94mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 17:56:37]  Improved gap from 0 to 35.9375
[07/20 17:56:37]  Improved number of small numbers from 101 to 101 out of a max of 101
[07/20 17:56:37]  Verifer returned sat in 0.709979 secs.
[07/20 17:56:37]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   17900.251709   17776.561279 -9742.258057  17900.251709    0.090820  17776.561279        0.0  123.690430       99.955566
1   17900.296143   17900.296143 -9742.258057  17900.296143  123.734863  17900.296143        0.0    0.000000        0.000000
2   17933.108643   17900.340576 -9678.239990  17933.108643   32.812500  17900.340576        0.0   32.768066       -3.169434
3   17977.493408   17936.278076 -9619.455322  17977.493408   77.152832  17936.278076        0.0   41.215332        0.000000
4   18016.636475   17977.493408 -9558.598389  18016.636475   80.358398  17977.493408        0.0   39.143066        0.000000
5   18016.636475   18016.636475 -9494.535889  18016.636475   39.098633  18016.636475        0.0    0.000000      -35.937500
6   18075.284424   18055.573975 -9433.473389  18075.284424   58.647949  18055.573975        0.0   19.710449      -16.227051
7   18115.721924   18091.511475 -9369.410889  18115.721924   60.147949  18091.511475        0.0   24.210449      -11.727051
8   18149.020508   18127.448975 -9369.410889  18149.020508   57.509033  18127.448975        0.0   21.571533      -78.428467
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:56:38]  --------------------------------------------------------------------------------
[07/20 17:56:38]  Iteration: 86 (9 solution, 76 counterexamples)
[07/20 17:56:45]  Generator returned sat in 5.644541 secs.
[07/20 17:56:45]  Candidate solution: 
[1m[94mif(qbound[t][6]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 17:56:46]  Improved gap from 363/8192 to 15.625
[07/20 17:56:46]  Improved number of small numbers from 54 to 101 out of a max of 101
[07/20 17:56:46]  Verifer returned sat in 1.398247 secs.
[07/20 17:56:46]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4251.674561    4151.674561 -9519.455078  4251.674561    0.090576  4151.674561        0.0  100.000000      100.000000
1    4251.718994    4251.674561 -9519.455078  4251.718994  100.044434  4251.674561        0.0    0.044434        0.044434
2    4686.005371    4251.674805 -9519.455078  4686.005371  434.330811  4251.674805        0.0  434.330566      334.330811
3    4686.005371    4451.674561 -9519.455078  4686.005371  407.000000  4451.674561        0.0  234.330811      234.330811
4    4686.005371    4551.674561 -9519.455078  4686.005371  205.000000  4551.674561        0.0  134.330811      134.330811
5    4686.005371    4632.461182 -9519.455078  4686.005371  104.000000  4632.461182        0.0   53.544189       34.330811
6    4686.005371    4657.711182 -9453.785889  4686.005371   53.500000  4657.711182        0.0   28.294189        0.000000
7    4686.005371    4686.005371 -9369.410889  4686.005371   28.250000  4686.005371        0.0    0.000000      -15.625000
8    4701.630371    4701.630371 -9369.410889  4701.630371   15.625000  4701.630371        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:56:47]  --------------------------------------------------------------------------------
[07/20 17:56:47]  Iteration: 87 (9 solution, 77 counterexamples)
[07/20 17:56:50]  Generator returned sat in 1.176685 secs.
[07/20 17:56:50]  Candidate solution: 
[1m[94mif(qbound[t][5]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 17:56:51]  Improved gap from 0 to 31.25
[07/20 17:56:52]  Improved number of small numbers from 51 to 101 out of a max of 101
[07/20 17:56:52]  Verifer returned sat in 1.854096 secs.
[07/20 17:56:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4029.088867    3861.133301 -9519.455322  4029.088867    0.090332  3861.133301        0.0  167.955566      167.955566
1    4337.977051    3861.133301 -9519.455322  4337.977051  476.843750  3861.133301        0.0  476.843750      376.843750
2    4337.977051    4029.133301 -9519.455322  4337.977051  476.843750  4029.133301        0.0  308.843750      276.843750
3    4337.977051    4161.133301 -9519.455322  4337.977051  308.843750  4161.133301        0.0  176.843750      176.843750
4    4337.977051    4258.471680 -9519.455322  4337.977051  155.921875  4258.471680        0.0   79.505371       76.843750
5    4337.977051    4261.133301 -9496.299072  4337.977051   79.460938  4261.133301        0.0   76.843750        0.000000
6    4377.133301    4337.977051 -9435.455322  4377.133301  116.000000  4337.977051        0.0   39.156250        0.000000
7    4397.477051    4377.177246 -9366.749268  4397.477051   59.500000  4377.177246        0.0   20.299805      -10.950195
8    4408.427246    4408.427246 -9366.749268  4408.427246   31.250000  4408.427246        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:56:52]  --------------------------------------------------------------------------------
[07/20 17:56:52]  Iteration: 88 (9 solution, 78 counterexamples)
[07/20 17:56:55]  Generator returned sat in 1.138205 secs.
[07/20 17:56:55]  Candidate solution: 
[1m[94mif(qbound[t][5]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 17:56:55]  Improved gap from 181/4096 to 23.4375
[07/20 17:56:55]  Improved number of small numbers from 56 to 101 out of a max of 101
[07/20 17:56:55]  Verifer returned sat in 0.486367 secs.
[07/20 17:56:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4419.008545    4022.089111 -9680.411377  4419.008545    0.090332  4022.089111        0.0  396.919434      396.919434
1    4445.526611    4122.089111 -9680.411377  4445.526611  423.437500  4122.089111        0.0  323.437500      323.437500
2    4445.526611    4128.339111 -9680.411377  4445.526611    0.043945  4128.339111        0.0  317.187500      223.437500
3    4445.526611    4322.089111 -9680.411377  4445.526611  317.187256  4322.089111        0.0  123.437500      123.437500
4    4445.526611    4419.008301 -9680.411377  4445.526611    1.500000  4419.008301        0.0   26.518311       23.437500
5    4445.526611    4422.089111 -9603.848877  4445.526611    1.500000  4422.089111        0.0   23.437500        0.000000
6    4568.964111    4445.526611 -9603.848877  4568.964111  146.875000  4445.526611        0.0  123.437500       23.437500
7    4568.964111    4545.526611 -9527.286377  4568.964111    1.500000  4545.526611        0.0   23.437500        0.000000
8    4568.964111    4568.964111 -9527.286377  4568.964111    1.500000  4568.964111        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:56:56]  --------------------------------------------------------------------------------
[07/20 17:56:56]  Iteration: 89 (9 solution, 79 counterexamples)
[07/20 17:57:01]  Generator returned sat in 3.520783 secs.
[07/20 17:57:01]  Candidate solution: 
[1m[94mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 1c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 17:57:01]  Improved gap from 0 to 100
[07/20 17:57:01]  Improved number of small numbers from 101 to 101 out of a max of 101
[07/20 17:57:01]  Verifer returned sat in 0.202586 secs.
[07/20 17:57:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3845.982422    3345.938232 -9680.411377  3845.982422    0.090332  3345.938232        0.0  500.044189      500.044189
1    4144.026611    3345.938232 -9680.411377  4144.026611  798.088379  3345.938232        0.0  798.088379      698.088379
2    4144.026611    3445.938232 -9680.411377  4144.026611    0.044189  3445.938232        0.0  698.088379      598.088379
3    4144.026611    3545.938232 -9680.411377  4144.026611  597.044189  3545.938232        0.0  598.088379      498.088379
4    4144.026611    3743.982422 -9680.411377  4144.026611  598.044189  3743.982422        0.0  400.044189      398.088379
5    4343.026611    3845.938232 -9680.411377  4343.026611  599.044189  3845.938232        0.0  497.088379      497.088379
6    4445.982422    3845.982422 -9680.411377  4445.982422  600.044189  3845.982422        0.0  600.000000      500.044189
7    4445.982422    4045.894043 -9680.411377  4445.982422    0.500000  4045.894043        0.0  400.088379      400.044189
8    4445.982422    4045.938232 -9680.411377  4445.982422    1.500000  4045.938232        0.0  400.044189      300.044189
high_util=True, low_delay=False, ramp_up=False, ramp_down=False.[0m
[07/20 17:57:02]  --------------------------------------------------------------------------------
[07/20 17:57:02]  Iteration: 90 (9 solution, 80 counterexamples)
[07/20 17:57:06]  Generator returned sat in 2.253393 secs.
[07/20 17:57:06]  Candidate solution: 
[1m[94mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 17:57:06]  Improved gap from 1069/2048 to 0
[07/20 17:57:06]  Improved number of small numbers from 67 to 101 out of a max of 101
[07/20 17:57:06]  Verifer returned sat in 0.313762 secs.
[07/20 17:57:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4544.026611    4042.070801 -9680.411621  4544.026611    0.090332  4042.070801        0.0  501.955811      501.955811
1    4544.026611    4142.070557 -9680.411621  4544.026611    0.021973  4142.070557        0.0  401.956055      401.955811
2    4544.026611    4242.070801 -9680.411621  4544.026611  401.955811  4242.070801        0.0  301.955811      301.955811
3    4544.026611    4342.070801 -9680.411621  4544.026611    0.021973  4342.070801        0.0  201.955811      201.955811
4    4544.026611    4442.070557 -9680.411621  4544.026611    0.500000  4442.070557        0.0  101.956055      101.955811
5    4544.026611    4542.048828 -9680.411621  4544.026611    2.000000  4542.048828        0.0    1.977783        1.955811
6    4544.048828    4542.070801 -9582.389648  4544.048828    2.000000  4542.070801        0.0    1.978027        0.000000
7    4544.048828    4544.048828 -9482.889404  4544.048828    0.500000  4544.048828        0.0    0.000000       -0.499756
8    4544.548828    4544.548828 -9482.889404  4544.548828    0.500000  4544.548828        0.0    0.000000      -99.999756
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:57:07]  --------------------------------------------------------------------------------
[07/20 17:57:07]  Iteration: 91 (9 solution, 81 counterexamples)
[07/20 17:57:10]  Generator returned sat in 1.069173 secs.
[07/20 17:57:10]  Candidate solution: 
[1m[94mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 17:57:10]  Improved gap from 1/2 to 0
[07/20 17:57:10]  Improved number of small numbers from 65 to 101 out of a max of 101
[07/20 17:57:10]  Verifer returned sat in 0.496108 secs.
[07/20 17:57:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4288.315186    3887.309570 -9780.883789  4288.315186  0.090088  3887.309570        0.0  401.005615      401.005615
1    4288.315186    3887.309570 -9780.883789  4288.315186  0.021729  3887.309570        0.0  401.005615      301.005615
2    4288.315186    4087.309570 -9780.883789  4288.315186  0.483643  4087.309570        0.0  201.005615      201.005615
3    4288.315186    4187.309570 -9780.883789  4288.315186  0.005371  4187.309570        0.0  101.005615      101.005615
4    4288.315186    4287.304443 -9780.883789  4288.315186  1.000000  4287.304443        0.0    1.010742        1.005615
5    4288.315186    4287.309570 -9681.889404  4288.315186  1.000000  4287.309570        0.0    1.005615        0.000000
6    4288.315186    4288.315186 -9581.889404  4288.315186  1.000000  4288.315186        0.0    0.000000        0.000000
7    4289.315186    4288.315186 -9482.889404  4289.315186  1.000000  4288.315186        0.0    1.000000        0.000000
8    4289.315186    4289.315186 -9482.889404  4289.315186  0.500000  4289.315186        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:57:11]  --------------------------------------------------------------------------------
[07/20 17:57:11]  Iteration: 92 (9 solution, 82 counterexamples)
[07/20 17:57:13]  Generator returned sat in 1.096153 secs.
[07/20 17:57:14]  Candidate solution: 
[1m[94mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 17:57:14]  Improved gap from 0 to 0
[07/20 17:57:14]  Improved number of small numbers from 78 to 101 out of a max of 101
[07/20 17:57:14]  Verifer returned sat in 0.489369 secs.
[07/20 17:57:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4834.806641    4334.805420 -9780.883789  4834.806641  0.090088  4334.805420        0.0  500.001221      500.001221
1    4834.806641    4434.805420 -9780.883789  4834.806641  0.021484  4434.805420        0.0  400.001221      400.001221
2    4834.806641    4434.805420 -9780.883789  4834.806641  0.483643  4434.805420        0.0  400.001221      300.001221
3    4834.806641    4534.805664 -9780.883789  4834.806641  0.005371  4534.805664        0.0  300.000977      200.001221
4    4834.806641    4734.805420 -9780.883789  4834.806641  1.500000  4734.805420        0.0  100.001221      100.001221
5    4834.806641    4834.305420 -9780.883789  4834.806641  0.500000  4834.305420        0.0    0.501221        0.001221
6    4834.806641    4834.805420 -9680.885010  4834.806641  0.500000  4834.805420        0.0    0.001221        0.000000
7    4836.305420    4834.806641 -9582.383789  4836.305420  1.500000  4834.806641        0.0    1.498779        0.000000
8    4836.305420    4836.305420 -9582.383789  4836.305420  0.500000  4836.305420        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:57:14]  --------------------------------------------------------------------------------
[07/20 17:57:14]  Iteration: 93 (9 solution, 83 counterexamples)
[07/20 17:57:17]  Generator returned sat in 1.200180 secs.
[07/20 17:57:18]  Candidate solution: 
[1m[94mif(qbound[t][6]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 17:57:18]  Improved gap from 4107/8192 to 0
[07/20 17:57:18]  Improved number of small numbers from 64 to 101 out of a max of 101
[07/20 17:57:18]  Verifer returned sat in 0.479108 secs.
[07/20 17:57:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5732.704834    5331.199463 -9780.884033  5732.704834  0.089844  5331.199463        0.0  401.505371      401.505371
1    5732.704834    5431.199463 -9780.884033  5732.704834  0.021484  5431.199463        0.0  301.505371      301.505371
2    5732.704834    5431.199463 -9780.884033  5732.704834  0.483643  5431.199463        0.0  301.505371      201.505371
3    5732.704834    5631.199219 -9780.884033  5732.704834  0.005371  5631.199219        0.0  101.505615      101.505371
4    5732.704834    5731.199463 -9780.884033  5732.704834  0.500000  5731.199463        0.0    1.505371        1.505371
5    5732.704834    5731.199463 -9682.389404  5732.704834  0.500000  5731.199463        0.0    1.505371        0.000000
6    5732.704834    5732.704834 -9582.394775  5732.704834  1.500000  5732.704834        0.0    0.000000       -0.005371
7    5733.204834    5732.710205 -9482.894531  5733.204834  0.500000  5732.710205        0.0    0.494629       -0.005127
8    5733.210205    5733.210205 -9482.894531  5733.210205  0.500000  5733.210205        0.0    0.000000      -99.999756
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:57:18]  --------------------------------------------------------------------------------
[07/20 17:57:18]  Iteration: 94 (9 solution, 84 counterexamples)
[07/20 17:57:22]  Generator returned sat in 2.036619 secs.
[07/20 17:57:22]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 17:57:23]  Improved number of small numbers from 100 to 100 out of a max of 100
[07/20 17:57:23]  Verifer returned sat in 0.197391 secs.
[07/20 17:57:23]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5827.177979    5527.188721 -9976.873291  5827.177979    0.089844  5527.188721        0.0  299.989258      299.989258
1    5827.177979    5627.188721 -9976.873291  5827.177979    0.021484  5627.188721        0.0  199.989258      199.989258
2    5827.177979    5627.188721 -9976.873291  5827.177979    0.483643  5627.188721        0.0  199.989258       99.989258
3    6024.699463    5827.188721 -9976.873291  6024.699463  397.510742  5827.188721        0.0  197.510742      197.510742
4    6225.199463    5827.188721 -9976.873291  6225.199463  398.010742  5827.188721        0.0  398.010742      298.010742
5    6225.699463    6027.188721 -9976.873291  6225.699463  398.510742  6027.188721        0.0  198.510742      198.510742
6    6426.199463    6027.188721 -9976.873291  6426.199463  399.010742  6027.188721        0.0  399.010742      299.010742
7    6426.699463    6227.188721 -9976.873291  6426.699463  399.510742  6227.188721        0.0  199.510742      199.510742
8    6627.199463    6227.188721 -9976.873291  6627.199463  400.010742  6227.188721        0.0  400.010742      300.010742
high_util=True, low_delay=False, ramp_up=True, ramp_down=False.[0m
[07/20 17:57:23]  --------------------------------------------------------------------------------
[07/20 17:57:23]  Iteration: 95 (9 solution, 85 counterexamples)
[07/20 17:57:26]  Generator returned sat in 1.485827 secs.
[07/20 17:57:26]  Candidate solution: 
[1m[94mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 17:57:27]  Improved gap from 0 to 14.0625
[07/20 17:57:27]  Improved number of small numbers from 101 to 101 out of a max of 101
[07/20 17:57:27]  Verifer returned sat in 0.608022 secs.
[07/20 17:57:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7218.483643    6682.546143 -9976.873535  7218.483643    0.089600  6682.546143        0.0  535.937500      535.893799
1    7218.483643    6682.589844 -9976.873535  7218.483643  535.937500  6682.589844        0.0  535.893799      435.893799
2    7218.483643    6782.589844 -9976.873535  7218.483643    0.043701  6782.589844        0.0  435.893799      335.893799
3    7218.483643    6982.589844 -9976.873535  7218.483643  405.000000  6982.589844        0.0  235.893799      235.893799
4    7218.483643    7082.589844 -9976.873535  7218.483643  204.000000  7082.589844        0.0  135.893799      135.893799
5    7218.483643    7165.189941 -9976.873535  7218.483643  103.500000  7165.189941        0.0   53.293701       35.893799
6    7218.483643    7204.421143 -9912.767334  7218.483643   53.250000  7204.421143        0.0   14.062500        0.000000
7    7232.546143    7218.483643 -9826.829834  7232.546143   28.125000  7218.483643        0.0   14.062500        0.000000
8    7232.546143    7232.546143 -9826.829834  7232.546143    0.500000  7232.546143        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:57:28]  --------------------------------------------------------------------------------
[07/20 17:57:28]  Iteration: 96 (9 solution, 86 counterexamples)
[07/20 17:57:31]  Generator returned sat in 1.717008 secs.
[07/20 17:57:31]  Candidate solution: 
[1m[94mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 17:57:32]  Improved gap from 0 to 23.4375
[07/20 17:57:32]  Improved number of small numbers from 52 to 101 out of a max of 101
[07/20 17:57:32]  Verifer returned sat in 0.521900 secs.
[07/20 17:57:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6416.273926    5992.836426 -9287.120605  6416.273926    0.089600  5992.836426        0.0  423.437500        423.4375
1    6416.273926    5992.836426 -9287.120605  6416.273926    0.021729  5992.836426        0.0  423.437500        323.4375
2    6416.273926    6102.086426 -9287.120605  6416.273926   37.543457  6102.086426        0.0  314.187500        223.4375
3    6416.273926    6270.988770 -9287.120605  6416.273926    0.021729  6270.988770        0.0  145.285156        123.4375
4    6416.273926    6389.733398 -9287.120605  6416.273926  140.576172  6389.733398        0.0   26.540527         23.4375
5    6416.273926    6392.836426 -9210.558105  6416.273926    0.500000  6392.836426        0.0   23.437500          0.0000
6    6539.711426    6416.273926 -9210.558105  6539.711426  146.875000  6416.273926        0.0  123.437500         23.4375
7    6539.711426    6516.273926 -9133.995605  6539.711426    0.500000  6516.273926        0.0   23.437500          0.0000
8    6539.711426    6539.711426 -9133.995605  6539.711426    0.500000  6539.711426        0.0    0.000000       -100.0000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:57:32]  --------------------------------------------------------------------------------
[07/20 17:57:32]  Iteration: 97 (9 solution, 87 counterexamples)
[07/20 17:57:36]  Generator returned sat in 1.553410 secs.
[07/20 17:57:36]  Candidate solution: 
[1m[94mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 17:57:36]  Improved number of small numbers from 88 to 100 out of a max of 100
[07/20 17:57:36]  Verifer returned sat in 0.163033 secs.
[07/20 17:57:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6639.211182    6139.211426 -9433.495850  6639.211182    0.089355  6139.211426        0.0  499.999756      499.999756
1    6639.211182    6139.211426 -9433.495850  6639.211182    0.021729  6139.211426        0.0  499.999756      399.999756
2    6639.211182    6239.211426 -9433.495850  6639.211182   37.543213  6239.211426        0.0  399.999756      299.999756
3    6639.211182    6439.211426 -9433.495850  6639.211182    0.021484  6439.211426        0.0  199.999756      199.999756
4    6639.211182    6439.211426 -9433.495850  6639.211182    0.500000  6439.211426        0.0  199.999756       99.999756
5    6639.211182    6639.206055 -9433.495605  6639.211182    0.500000  6639.206055        0.0    0.005127        0.000000
6    7040.700684    6639.211182 -9433.495605  7040.700684  401.494629  6639.211182        0.0  401.489502      301.489502
7    7040.700684    6739.211182 -9433.495605  7040.700684    0.500000  6739.211182        0.0  301.489502      201.489502
8    7040.700684    6840.700684 -9433.495605  7040.700684    0.500000  6840.700684        0.0  200.000000      101.489502
high_util=True, low_delay=False, ramp_up=False, ramp_down=False.[0m
[07/20 17:57:36]  --------------------------------------------------------------------------------
[07/20 17:57:36]  Iteration: 98 (9 solution, 88 counterexamples)
[07/20 17:57:40]  Generator returned sat in 1.688062 secs.
[07/20 17:57:40]  Candidate solution: 
[1m[94mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 17:57:40]  Improved gap from 0 to 100
[07/20 17:57:41]  Improved number of small numbers from 64 to 101 out of a max of 101
[07/20 17:57:41]  Verifer returned sat in 0.674046 secs.
[07/20 17:57:41]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6639.189209    5954.298096 -9433.495605  6639.189209    0.089355  5954.298096        0.0  684.891113      600.021729
1    6639.189209    6039.167480 -9433.495605  6639.189209  684.891113  6039.167480        0.0  600.021729      500.021729
2    6639.189209    6139.167480 -9433.495605  6639.189209   37.542969  6139.167480        0.0  500.021729      400.021729
3    6639.210938    6242.167725 -9433.495605  6639.210938  500.043457  6242.167725        0.0  397.043213      300.043457
4    6639.210938    6439.167480 -9433.495605  6639.210938  395.956543  6439.167480        0.0  200.043457      200.043457
5    6839.145752    6533.363525 -9433.495605  6839.145752  399.978271  6533.363525        0.0  305.782227      299.978271
6    6932.450684    6639.167480 -9433.495605  6932.450684  399.087158  6639.167480        0.0  293.283203      293.283203
7    7039.210938    6639.189209 -9433.495605  7039.210938  400.043457  6639.189209        0.0  400.021729      300.043457
8    7039.210938    6839.167480 -9433.495605  7039.210938    0.500000  6839.167480        0.0  200.043457      200.043457
high_util=True, low_delay=False, ramp_up=False, ramp_down=False.[0m
[07/20 17:57:41]  --------------------------------------------------------------------------------
[07/20 17:57:41]  Iteration: 99 (9 solution, 89 counterexamples)
[07/20 17:57:44]  Generator returned sat in 1.249529 secs.
[07/20 17:57:44]  Candidate solution: 
[1m[94mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 17:57:45]  Improved gap from 357/8192 to 23.4375
[07/20 17:57:45]  Improved number of small numbers from 82 to 101 out of a max of 101
[07/20 17:57:45]  Verifer returned sat in 0.364687 secs.
[07/20 17:57:45]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     6635.16748    6108.626953 -9433.495605   6635.16748    0.089111  6108.626953        0.0  526.540527      426.540527
1     6635.16748    6308.626709 -9433.495605   6635.16748  526.540527  6308.626709        0.0  326.540771      326.540527
2     6635.16748    6321.979980 -9433.495605   6635.16748  326.540527  6321.979980        0.0  313.187500      226.540527
3     6635.16748    6408.626953 -9433.495605   6635.16748    0.021729  6408.626953        0.0  226.540527      126.540527
4     6635.16748    6608.626709 -9433.495605   6635.16748    0.500000  6608.626709        0.0   26.540771       26.540527
5     6635.16748    6611.729980 -9360.036133   6635.16748    0.500000  6611.729980        0.0   23.437500        0.000000
6     6758.60498    6635.167480 -9360.036133   6758.60498  146.875000  6635.167480        0.0  123.437500       23.437500
7     6758.60498    6735.167480 -9283.473633   6758.60498    0.500000  6735.167480        0.0   23.437500        0.000000
8     6758.60498    6758.604980 -9283.473633   6758.60498    0.500000  6758.604980        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:57:45]  --------------------------------------------------------------------------------
[07/20 17:57:45]  Iteration: 100 (9 solution, 90 counterexamples)
[07/20 17:57:50]  Generator returned sat in 2.497360 secs.
[07/20 17:57:50]  Candidate solution: 
[1m[94mif(qbound[t][6]):
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 17:57:50]  Improved gap from 89/4096 to 14.0625
[07/20 17:57:50]  Improved number of small numbers from 101 to 101 out of a max of 101
[07/20 17:57:50]  Verifer returned sat in 0.353534 secs.
[07/20 17:57:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     6735.66748    6221.604980 -9445.973633   6735.66748    0.089111  6221.604980        0.0  514.062500        514.0625
1     6735.66748    6321.604980 -9445.973633   6735.66748    0.043457  6321.604980        0.0  414.062500        414.0625
2     6735.66748    6321.604980 -9445.973633   6735.66748  414.019043  6321.604980        0.0  414.062500        314.0625
3     6735.66748    6521.604980 -9445.973633   6735.66748  390.000000  6521.604980        0.0  214.062500        214.0625
4     6735.66748    6599.773438 -9445.973633   6735.66748  197.000000  6599.773438        0.0  135.894043        114.0625
5     6735.66748    6683.374023 -9445.973633   6735.66748  100.500000  6683.374023        0.0   52.293457         14.0625
6     6735.66748    6721.604980 -9360.036133   6735.66748   52.250000  6721.604980        0.0   14.062500          0.0000
7     6749.72998    6735.667480 -9274.098633   6749.72998   28.125000  6735.667480        0.0   14.062500          0.0000
8     6749.72998    6749.729980 -9274.098633   6749.72998    0.500000  6749.729980        0.0    0.000000       -100.0000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:57:51]  --------------------------------------------------------------------------------
[07/20 17:57:51]  Iteration: 101 (9 solution, 91 counterexamples)
[07/20 17:57:54]  Generator returned sat in 1.429292 secs.
[07/20 17:57:54]  Candidate solution: 
[1m[94mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 17:57:55]  Improved gap from 225/16 to 14.0625
[07/20 17:57:55]  Improved number of small numbers from 101 to 101 out of a max of 101
[07/20 17:57:55]  Verifer returned sat in 1.024611 secs.
[07/20 17:57:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7829.671875    7315.609375 -9445.973633  7829.671875    0.089111  7315.609375        0.0  514.062500        514.0625
1    7829.671875    7315.609375 -9445.973633  7829.671875    0.043457  7315.609375        0.0  514.062500        414.0625
2    7829.671875    7415.609375 -9445.973633  7829.671875    0.043457  7415.609375        0.0  414.062500        314.0625
3    7829.671875    7515.609375 -9445.973633  7829.671875  390.000000  7515.609375        0.0  314.062500        214.0625
4    7829.671875    7693.777832 -9445.973633  7829.671875  197.000000  7693.777832        0.0  135.894043        114.0625
5    7829.671875    7777.378418 -9445.973633  7829.671875  100.500000  7777.378418        0.0   52.293457         14.0625
6    7829.671875    7815.609375 -9360.036133  7829.671875   52.250000  7815.609375        0.0   14.062500          0.0000
7    7843.734375    7829.671875 -9274.098633  7843.734375   28.125000  7829.671875        0.0   14.062500          0.0000
8    7843.734375    7843.734375 -9274.098633  7843.734375    0.500000  7843.734375        0.0    0.000000       -100.0000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:57:56]  --------------------------------------------------------------------------------
[07/20 17:57:56]  Iteration: 102 (9 solution, 92 counterexamples)
[07/20 17:58:00]  Generator returned sat in 2.095477 secs.
[07/20 17:58:00]  Candidate solution: 
[1m[94mif(qbound[t][4]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 17:58:00]  Improved gap from 89/4096 to 23.4375
[07/20 17:58:00]  Improved number of small numbers from 101 to 101 out of a max of 101
[07/20 17:58:00]  Verifer returned sat in 0.413686 secs.
[07/20 17:58:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0    6720.627441    6520.627441 -9445.973633  6720.627441    0.089111  6520.627441        0.0  200.00000        100.0000
1    6720.627441    6620.627441 -9445.973633  6720.627441  200.000000  6620.627441        0.0  100.00000          0.0000
2    7044.064941    6730.877441 -9445.973633  7044.064941  423.437500  6730.877441        0.0  313.18750        223.4375
3    7044.064941    6820.627441 -9445.973633  7044.064941  313.187500  6820.627441        0.0  223.43750        123.4375
4    7044.064941    7017.589111 -9445.973633  7044.064941    0.500000  7017.589111        0.0   26.47583         23.4375
5    7044.064941    7020.627441 -9369.411133  7044.064941    0.500000  7020.627441        0.0   23.43750          0.0000
6    7167.502441    7044.064941 -9369.411133  7167.502441  146.875000  7044.064941        0.0  123.43750         23.4375
7    7167.502441    7144.064941 -9292.848633  7167.502441    0.500000  7144.064941        0.0   23.43750          0.0000
8    7167.502441    7167.502441 -9292.848633  7167.502441    0.500000  7167.502441        0.0    0.00000       -100.0000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:58:01]  --------------------------------------------------------------------------------
[07/20 17:58:01]  Iteration: 103 (9 solution, 93 counterexamples)
[07/20 17:58:06]  Generator returned sat in 3.158026 secs.
[07/20 17:58:06]  Candidate solution: 
[1m[94mif(qbound[t][5]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 17:58:06]  Improved gap from 177/4096 to 23.4375
[07/20 17:58:06]  Improved number of small numbers from 56 to 101 out of a max of 101
[07/20 17:58:06]  Verifer returned sat in 0.508449 secs.
[07/20 17:58:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6421.584229    6221.605713 -9346.408691  6421.584229    0.089111  6221.605713        0.0  199.978516       99.978516
1    6745.043213    6421.605713 -9346.408691  6745.043213  523.437500  6421.605713        0.0  323.437500      323.437500
2    6745.043213    6431.855713 -9346.408691  6745.043213    0.021484  6431.855713        0.0  313.187500      223.437500
3    6745.043213    6621.605713 -9346.408691  6745.043213    0.021729  6621.605713        0.0  123.437500      123.437500
4    6745.043213    6721.583984 -9346.408691  6745.043213    0.500000  6721.583984        0.0   23.459229       23.437500
5    6745.043213    6721.605713 -9269.846191  6745.043213    0.500000  6721.605713        0.0   23.437500        0.000000
6    6868.480713    6745.043213 -9269.846191  6868.480713  146.875000  6745.043213        0.0  123.437500       23.437500
7    6868.480713    6845.043213 -9193.283691  6868.480713    0.500000  6845.043213        0.0   23.437500        0.000000
8    6868.480713    6868.480713 -9193.283691  6868.480713    0.500000  6868.480713        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:58:07]  --------------------------------------------------------------------------------
[07/20 17:58:07]  Iteration: 104 (9 solution, 94 counterexamples)
[07/20 17:58:17]  Generator returned sat in 8.065912 secs.
[07/20 17:58:17]  Candidate solution: 
[1m[94mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:58:18]  Improved gap from 0 to 35.9375
[07/20 17:58:18]  Improved number of small numbers from 89 to 97 out of a max of 101
[07/20 17:58:18]  Verifer returned sat in 0.917104 secs.
[07/20 17:58:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6653.778564    6530.200684 -9565.125000  6653.778564    0.088867  6530.200684        0.0  123.577881       99.956787
1    6653.864746    6653.821533 -9565.125000  6653.864746  123.664062  6653.821533        0.0    0.043213        0.042969
2    6653.951172    6653.907959 -9502.148682  6653.951172    0.129639  6653.907959        0.0    0.043213      -36.894287
3    6731.980469    6690.845703 -9443.326904  6731.980469   78.072510  6690.845703        0.0   41.134766       -0.043213
4    6771.168213    6732.023682 -9382.471436  6771.168213   80.322510  6732.023682        0.0   39.144531        0.000000
5    6771.168213    6771.168213 -9319.408936  6771.168213   39.101074  6771.168213        0.0    0.000000      -36.937500
6    6829.798340    6808.105713 -9256.346191  6829.798340   58.630127  6808.105713        0.0   21.692627      -15.244629
7    6866.735718    6845.043213 -9193.283936  6866.735718   58.630005  6845.043213        0.0   21.692505      -15.244995
8    6901.552979    6881.980713 -9193.283936  6901.552979   56.509766  6881.980713        0.0   19.572266      -80.427734
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:58:18]  --------------------------------------------------------------------------------
[07/20 17:58:18]  Iteration: 105 (9 solution, 95 counterexamples)
[07/20 17:58:28]  Generator returned sat in 7.811121 secs.
[07/20 17:58:28]  Candidate solution: 
[1m[94mif(qbound[t][6]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 17:58:29]  Improved gap from 0 to 23.4375
[07/20 17:58:29]  Improved number of small numbers from 101 to 101 out of a max of 101
[07/20 17:58:29]  Verifer returned sat in 0.406491 secs.
[07/20 17:58:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6668.572021    6142.095703 -9253.148926  6668.572021    0.088867  6142.095703        0.0  526.476318      426.476318
1    6668.572021    6242.095703 -9253.148926  6668.572021  526.476318  6242.095703        0.0  426.476318      326.476318
2    6668.572021    6352.384521 -9253.148926  6668.572021  426.476318  6352.384521        0.0  316.187500      226.476318
3    6668.572021    6442.095703 -9253.148926  6668.572021  316.187500  6442.095703        0.0  226.476318      126.476318
4    6668.572021    6642.095703 -9253.148926  6668.572021    0.500000  6642.095703        0.0   26.476318       26.476318
5    6668.572021    6645.134521 -9179.625244  6668.572021    0.500000  6645.134521        0.0   23.437500        0.000000
6    6792.009521    6668.572021 -9179.625244  6792.009521  146.875000  6668.572021        0.0  123.437500       23.437500
7    6792.009521    6768.572021 -9103.062744  6792.009521    0.500000  6768.572021        0.0   23.437500        0.000000
8    6792.009521    6792.009521 -9103.062744  6792.009521    0.500000  6792.009521        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:58:29]  --------------------------------------------------------------------------------
[07/20 17:58:29]  Iteration: 106 (9 solution, 96 counterexamples)
[07/20 17:58:33]  Generator returned sat in 1.485390 secs.
[07/20 17:58:33]  Candidate solution: 
[1m[94mif(qbound[t][6]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 17:58:33]  Improved gap from 353/8192 to 23.4375
[07/20 17:58:33]  Improved number of small numbers from 97 to 101 out of a max of 101
[07/20 17:58:33]  Verifer returned sat in 0.469456 secs.
[07/20 17:58:33]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6394.009277    5970.571777 -8981.625488  6394.009277    0.088379  5970.571777        0.0  423.437500        423.4375
1    6394.009277    5970.571777 -8981.625488  6394.009277  423.437256  5970.571777        0.0  423.437500        323.4375
2    6394.009277    6078.821777 -8981.625488  6394.009277  423.437256  6078.821777        0.0  315.187500        223.4375
3    6394.009277    6270.571777 -8981.625488  6394.009277    0.021729  6270.571777        0.0  123.437500        123.4375
4    6394.009277    6370.550293 -8981.625488  6394.009277    0.500000  6370.550293        0.0   23.458984         23.4375
5    6394.009277    6370.571777 -8905.062988  6394.009277    0.500000  6370.571777        0.0   23.437500          0.0000
6    6517.446777    6394.009277 -8905.062988  6517.446777  146.875000  6394.009277        0.0  123.437500         23.4375
7    6517.446777    6494.009277 -8828.500488  6517.446777    0.500000  6494.009277        0.0   23.437500          0.0000
8    6517.446777    6517.446777 -8828.500488  6517.446777    0.500000  6517.446777        0.0    0.000000       -100.0000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:58:34]  --------------------------------------------------------------------------------
[07/20 17:58:34]  Iteration: 107 (9 solution, 97 counterexamples)
[07/20 17:58:38]  Generator returned sat in 2.462941 secs.
[07/20 17:58:39]  Candidate solution: 
[1m[94mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 17:58:39]  Improved number of small numbers from 51 to 100 out of a max of 100
[07/20 17:58:39]  Verifer returned sat in 0.246483 secs.
[07/20 17:58:39]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6616.457764    6016.457764 -9027.511475  6616.457764    0.088379  6016.457764        0.0  600.000000      600.000000
1    6616.457764    6016.957764 -9027.511475  6616.457764  423.437012  6016.957764        0.0  599.500000      500.000000
2    6616.457764    6216.457520 -9027.511475  6616.457764  599.494629  6216.457520        0.0  400.000244      400.000000
3    6616.457764    6216.941406 -9027.511475  6616.457764    0.021484  6216.941406        0.0  399.516357      300.000000
4    6616.457764    6316.457764 -9027.511475  6616.457764    0.500000  6316.457764        0.0  300.000000      200.000000
5    6616.457764    6516.457520 -9027.511475  6616.457764  300.000000  6516.457520        0.0  100.000244      100.000000
6    6616.457764    6616.452148 -9027.511475  6616.457764    0.500000  6616.452148        0.0    0.005615        0.000000
7    7016.462891    6616.457764 -9027.511475  7016.462891  400.010742  6616.457764        0.0  400.005127      300.005127
8    7016.462891    6716.457764 -9027.511475  7016.462891    0.500000  6716.457764        0.0  300.005127      200.005127
high_util=True, low_delay=False, ramp_up=False, ramp_down=False.[0m
[07/20 17:58:39]  --------------------------------------------------------------------------------
[07/20 17:58:39]  Iteration: 108 (9 solution, 98 counterexamples)
[07/20 17:58:46]  Generator returned sat in 4.854451 secs.
[07/20 17:58:46]  Candidate solution: 
[1m[94mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 17:58:47]  Improved gap from 11/1024 to 0
[07/20 17:58:47]  Improved number of small numbers from 101 to 101 out of a max of 101
[07/20 17:58:47]  Verifer returned sat in 0.430613 secs.
[07/20 17:58:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6367.005859    6116.419922 -9027.511475  6367.005859    0.088379  6116.419922        0.0  250.585938      250.585938
1    6367.005859    6216.419922 -9027.511475  6367.005859  250.585938  6216.419922        0.0  150.585938      150.585938
2    6367.005859    6316.376953 -9027.511475  6367.005859  150.542969  6316.376953        0.0   50.628906       50.585938
3    6367.005859    6316.419922 -8978.097412  6367.005859   50.628906  6316.419922        0.0   50.585938        0.000000
4    6516.419922    6367.005859 -8978.097412  6516.419922  200.000000  6367.005859        0.0  149.414062       49.414062
5    6516.419922    6467.005859 -8927.511475  6516.419922    0.500000  6467.005859        0.0   49.414062        0.000000
6    6516.419922    6516.419922 -8827.511475  6516.419922    0.500000  6516.419922        0.0    0.000000        0.000000
7    6516.919922    6516.462891 -8728.011475  6516.919922    0.500000  6516.462891        0.0    0.457031        0.000000
8    6516.962891    6516.962891 -8728.011475  6516.962891    0.500000  6516.962891        0.0    0.000000      -99.957031
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:58:47]  --------------------------------------------------------------------------------
[07/20 17:58:47]  Iteration: 109 (9 solution, 99 counterexamples)
[07/20 17:58:52]  Generator returned sat in 2.899697 secs.
[07/20 17:58:52]  Candidate solution: 
[1m[94mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:58:53]  Improved number of small numbers from 53 to 100 out of a max of 100
[07/20 17:58:53]  Verifer returned sat in 0.818220 secs.
[07/20 17:58:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6166.135986    5466.093262 -8978.097656  6166.135986    0.088135  5466.093262        0.0  700.042725      699.999756
1    6166.136230    5466.136230 -8978.097656  6166.136230  700.042969  5466.136230        0.0  700.000000      600.000000
2    6166.178955    5665.707520 -8978.097656  6166.178955  700.042725  5665.707520        0.0  500.471436      500.042725
3    6166.178955    5765.964844 -8978.097656  6166.178955  500.471191  5765.964844        0.0  400.214111      400.042725
4    6166.178955    5866.136230 -8978.097656  6166.178955  400.171387  5866.136230        0.0  300.042725      300.042725
5    6266.221924    5866.178955 -8978.097656  6266.221924  400.085693  5866.178955        0.0  400.042969      300.085693
6    6266.221924    6066.135986 -8978.097656  6266.221924  300.278564  6066.135986        0.0  200.085938      200.085693
7    6366.360840    6166.135986 -8978.097656  6366.360840  300.224854  6166.135986        0.0  200.224854      200.224609
8    6466.248291    6166.136230 -8978.097656  6466.248291  300.112305  6166.136230        0.0  300.112061      200.112061
high_util=True, low_delay=False, ramp_up=False, ramp_down=False.[0m
[07/20 17:58:54]  --------------------------------------------------------------------------------
[07/20 17:58:54]  Iteration: 110 (9 solution, 100 counterexamples)
[07/20 17:59:00]  Generator returned sat in 3.950706 secs.
[07/20 17:59:00]  Candidate solution: 
[1m[94mif(qbound[t][6]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:59:00]  Verifer returned unsat in 0.198394 secs.
[07/20 17:59:00]  Proved solution: 
[1m[92mif(qbound[t][6]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:59:00]  --------------------------------------------------------------------------------
[07/20 17:59:00]  Iteration: 111 (10 solution, 100 counterexamples)
[07/20 17:59:04]  Generator returned sat in 1.541382 secs.
[07/20 17:59:04]  Candidate solution: 
[1m[94mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:59:04]  Verifer returned unsat in 0.193745 secs.
[07/20 17:59:04]  Proved solution: 
[1m[92mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:59:04]  --------------------------------------------------------------------------------
[07/20 17:59:04]  Iteration: 112 (11 solution, 100 counterexamples)
[07/20 17:59:11]  Generator returned sat in 5.108612 secs.
[07/20 17:59:12]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 17:59:12]  Improved gap from 351/4096 to 12.5
[07/20 17:59:12]  Improved number of small numbers from 57 to 101 out of a max of 101
[07/20 17:59:12]  Verifer returned sat in 0.640064 secs.
[07/20 17:59:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6065.741455    5865.698975 -8978.097656  6065.741455    0.087891  5865.698975        0.0  200.042480      100.042480
1    6065.741455    6065.698975 -8978.097656  6065.741455    0.042969  6065.698975        0.0    0.042480        0.042480
2    6503.156006    6065.698975 -8978.097656  6503.156006  437.457031  6065.698975        0.0  437.457031      337.457031
3    6503.156006    6265.698975 -8978.097656  6503.156006  400.000000  6265.698975        0.0  237.457031      237.457031
4    6503.156006    6365.698730 -8978.097656  6503.156006  200.000000  6365.698730        0.0  137.457275      137.457031
5    6503.156006    6453.113037 -8978.097656  6503.156006  100.000000  6453.113037        0.0   50.042969       37.457031
6    6503.156006    6490.656006 -8915.554688  6503.156006   50.000000  6490.656006        0.0   12.500000        0.000000
7    6515.656006    6503.156006 -8828.054688  6515.656006   25.000000  6503.156006        0.0   12.500000        0.000000
8    6515.656006    6515.656006 -8828.054688  6515.656006    0.500000  6515.656006        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 17:59:13]  --------------------------------------------------------------------------------
[07/20 17:59:13]  Iteration: 113 (11 solution, 101 counterexamples)
[07/20 17:59:18]  Generator returned sat in 3.445157 secs.
[07/20 17:59:18]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 17:59:19]  Improved number of small numbers from 82 to 96 out of a max of 100
[07/20 17:59:19]  Verifer returned sat in 0.747550 secs.
[07/20 17:59:19]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6265.698730    5965.041504 -9077.440186  6265.698730    0.087891  5965.041504        0.0  300.657227      200.657227
1    6265.741455    6165.041504 -9077.440186  6265.741455  300.699951  6165.041504        0.0  100.699951      100.699951
2    6365.041504    6165.041504 -9077.440186  6365.041504  200.000000  6165.041504        0.0  200.000000      100.000000
3    6765.084229    6265.784180 -9077.440186  6765.084229  600.042725  6265.784180        0.0  499.300049      400.042725
4    6765.084229    6365.041504 -9077.440186  6765.084229  300.742676  6365.041504        0.0  400.042725      300.042725
5    6765.084229    6465.041504 -9077.440186  6765.084229  200.000000  6465.041504        0.0  300.042725      200.042725
6    6765.084229    6665.041260 -9077.440186  6765.084229  300.000000  6665.041260        0.0  100.042969      100.042725
7    7064.298340    6765.041504 -9077.440186  7064.298340  399.257080  6765.041504        0.0  299.256836      299.256836
8    7165.170044    6765.126953 -9077.440186  7165.170044  400.128540  6765.126953        0.0  400.043091      300.128540
high_util=True, low_delay=False, ramp_up=True, ramp_down=False.[0m
[07/20 17:59:20]  --------------------------------------------------------------------------------
[07/20 17:59:20]  Iteration: 114 (11 solution, 102 counterexamples)
[07/20 17:59:25]  Generator returned sat in 2.978410 secs.
[07/20 17:59:25]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/20 17:59:26]  Improved gap from 814579/8192 to 100
[07/20 17:59:26]  Improved number of small numbers from 93 to 93 out of a max of 101
[07/20 17:59:26]  Verifer returned sat in 0.927246 secs.
[07/20 17:59:26]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4900.870605    4704.956055 -7813.226562  4900.870605    0.087891  4704.956055        0.0  195.914551      100.042725
1    4900.870605    4804.656982 -7813.226562  4900.870605  195.871826  4804.656982        0.0   96.213623        0.042725
2    4900.870605    4900.827881 -7813.226562  4900.870605    0.042725  4900.827881        0.0    0.042725      -99.957275
3    5400.785156    5000.827881 -7813.226562  5400.785156  499.957275  5000.827881        0.0  399.957275      299.957275
4    5400.785156    5200.827881 -7813.226562  5400.785156  399.914551  5200.827881        0.0  199.957275      199.957275
5    5600.870605    5200.827881 -7813.226562  5600.870605  400.042725  5200.827881        0.0  400.042725      300.042725
6    5600.870605    5400.827881 -7813.226562  5600.870605  352.021362  5400.827881        0.0  200.042725      200.042725
7    5778.838562    5400.827881 -7813.226562  5778.838562  378.010681  5400.827881        0.0  378.010681      278.010681
8    5778.838562    5500.827881 -7813.226562  5778.838562  100.000000  5500.827881        0.0  278.010681      178.010681
high_util=True, low_delay=False, ramp_up=False, ramp_down=False.[0m
[07/20 17:59:26]  --------------------------------------------------------------------------------
[07/20 17:59:26]  Iteration: 115 (11 solution, 103 counterexamples)
[07/20 17:59:30]  Generator returned sat in 1.435688 secs.
[07/20 17:59:30]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 17:59:31]  Improved number of small numbers from 65 to 67 out of a max of 100
[07/20 17:59:31]  Verifer returned sat in 1.206517 secs.
[07/20 17:59:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4503.751953    4415.410391 -7813.226807  4503.751953    0.087402  4415.410391        0.0   88.341562       -0.042959
1    4503.837637    4503.794912 -7813.226807  4503.837637   88.427246  4503.794912        0.0    0.042725      -99.957275
2    4703.794912    4603.794912 -7813.226807  4703.794912  200.000000  4603.794912        0.0  100.000000        0.000000
3    5103.752188    4706.624014 -7813.226807  5103.752188  499.957275  4706.624014        0.0  397.128174      299.957275
4    5103.752188    4903.794912 -7813.226807  5103.752188  397.085449  4903.794912        0.0  199.957275      199.957275
5    5303.837637    4903.794912 -7813.226807  5303.837637  400.042725  4903.794912        0.0  400.042725      300.042725
6    5303.837637    5103.794912 -7813.226807  5303.837637  351.521362  5103.794912        0.0  200.042725      200.042725
7    5479.641042    5103.794912 -7813.226807  5479.641042  375.846130  5103.794912        0.0  375.846130      275.846130
8    5479.641042    5203.794922 -7813.226807  5479.641042  100.000000  5203.794922        0.0  275.846121      175.846130
high_util=True, low_delay=False, ramp_up=False, ramp_down=False.[0m
[07/20 17:59:32]  --------------------------------------------------------------------------------
[07/20 17:59:32]  Iteration: 116 (11 solution, 104 counterexamples)
[07/20 17:59:36]  Generator returned sat in 1.587663 secs.
[07/20 17:59:36]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 17:59:37]  Improved gap from 349/8192 to 100
[07/20 17:59:38]  Improved number of small numbers from 45 to 101 out of a max of 101
[07/20 17:59:38]  Verifer returned sat in 1.778170 secs.
[07/20 17:59:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4503.008057    4406.667236 -7418.315674  4503.008057    0.087402  4406.667236        0.0   96.340820       -0.042480
1    4603.007812    4503.050537 -7418.315674  4603.007812  196.340576  4503.050537        0.0   99.957275       -0.042725
2    4703.837402    4603.050537 -7418.315674  4703.837402  200.786865  4603.050537        0.0  100.786865        0.786865
3    5103.007812    4703.879883 -7418.315674  5103.007812  499.957275  4703.879883        0.0  399.127930      299.957275
4    5103.007812    4903.050537 -7418.315674  5103.007812  399.084961  4903.050537        0.0  199.957275      199.957275
5    5303.093018    4903.050537 -7418.315674  5303.093018  400.042480  4903.050537        0.0  400.042480      300.042480
6    5303.093018    5103.050537 -7418.315674  5303.093018  350.521240  5103.050537        0.0  200.042480      200.042480
7    5478.396484    5103.050537 -7418.315674  5478.396484  375.345947  5103.050537        0.0  375.345947      275.345947
8    5478.396484    5203.050537 -7418.315674  5478.396484  100.000000  5203.050537        0.0  275.345947      175.345947
high_util=True, low_delay=False, ramp_up=False, ramp_down=False.[0m
[07/20 17:59:38]  --------------------------------------------------------------------------------
[07/20 17:59:38]  Iteration: 117 (11 solution, 105 counterexamples)
[07/20 17:59:42]  Generator returned sat in 1.610741 secs.
[07/20 17:59:42]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/20 17:59:42]  Improved number of small numbers from 100 to 100 out of a max of 100
[07/20 17:59:42]  Verifer returned sat in 0.127163 secs.
[07/20 17:59:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4503.008057    4408.667236 -7418.315674  4503.008057    0.087402  4408.667236        0.0   94.340820       -0.042480
1    4603.007812    4503.050537 -7418.315674  4603.007812  194.340576  4503.050537        0.0   99.957275       -0.042725
2    4703.837402    4604.050537 -7418.315674  4703.837402  200.786865  4604.050537        0.0   99.786865        0.786865
3    5103.007812    4703.879883 -7418.315674  5103.007812  498.957275  4703.879883        0.0  399.127930      299.957275
4    5103.007812    4903.050537 -7418.315674  5103.007812  398.084961  4903.050537        0.0  199.957275      199.957275
5    5303.093018    4903.050537 -7418.315674  5303.093018  400.042480  4903.050537        0.0  400.042480      300.042480
6    5303.093018    5103.050537 -7418.315674  5303.093018  350.521240  5103.050537        0.0  200.042480      200.042480
7    5478.896484    5103.050537 -7418.315674  5478.896484  375.845947  5103.050537        0.0  375.845947      275.845947
8    5478.896484    5203.050537 -7418.315674  5478.896484  100.000000  5203.050537        0.0  275.845947      175.845947
high_util=True, low_delay=False, ramp_up=False, ramp_down=False.[0m
[07/20 17:59:43]  --------------------------------------------------------------------------------
[07/20 17:59:43]  Iteration: 118 (11 solution, 106 counterexamples)
[07/20 17:59:49]  Generator returned sat in 3.740201 secs.
[07/20 17:59:49]  Candidate solution: 
[1m[94mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:59:49]  Verifer returned unsat in 0.283738 secs.
[07/20 17:59:49]  Proved solution: 
[1m[92mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:59:49]  --------------------------------------------------------------------------------
[07/20 17:59:49]  Iteration: 119 (12 solution, 106 counterexamples)
[07/20 17:59:54]  Generator returned sat in 2.155932 secs.
[07/20 17:59:54]  Candidate solution: 
[1m[94mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:59:54]  Verifer returned unsat in 0.247498 secs.
[07/20 17:59:54]  Proved solution: 
[1m[92mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 17:59:54]  --------------------------------------------------------------------------------
[07/20 17:59:54]  Iteration: 120 (13 solution, 106 counterexamples)
[07/20 18:00:00]  Generator returned sat in 3.732132 secs.
[07/20 18:00:00]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:00:01]  Improved gap from 0 to 35.9375
[07/20 18:00:01]  Improved number of small numbers from 97 to 101 out of a max of 101
[07/20 18:00:01]  Verifer returned sat in 0.798261 secs.
[07/20 18:00:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4683.705322    4503.559570 -7662.140869  4683.705322    0.086914  4503.559570        0.0  180.145752       91.792725
1    4691.912598    4683.790039 -7662.140869  4691.912598  188.353027  4683.790039        0.0    8.122559        0.000000
2    4743.504883    4707.397461 -7613.733154  4743.504883   59.714844  4707.397461        0.0   36.107422        0.000000
3    4827.540039    4743.504883 -7597.768311  4827.540039  120.142578  4743.504883        0.0   84.035156        0.000000
4    4863.477539    4827.540039 -7533.705811  4863.477539  119.972656  4827.540039        0.0   35.937500        0.000000
5    4899.415039    4863.477539 -7469.643311  4899.415039   71.875000  4863.477539        0.0   35.937500        0.000000
6    4941.517578    4899.415039 -7411.745850  4941.517578   78.040039  4899.415039        0.0   42.102539        0.000000
7    4977.370117    4941.517578 -7347.683350  4977.370117   77.955078  4941.517578        0.0   35.852539       -0.084961
8    5055.495117    4977.455322 -7347.683350  5055.495117  113.977539  4977.455322        0.0   78.039795      -21.959961
high_util=False, low_delay=True, ramp_up=False, ramp_down=False.[0m
[07/20 18:00:01]  --------------------------------------------------------------------------------
[07/20 18:00:01]  Iteration: 121 (13 solution, 107 counterexamples)
[07/20 18:00:06]  Generator returned sat in 2.246358 secs.
[07/20 18:00:06]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:00:06]  Verifer returned unsat in 0.255380 secs.
[07/20 18:00:06]  Proved solution: 
[1m[92mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:00:06]  --------------------------------------------------------------------------------
[07/20 18:00:06]  Iteration: 122 (14 solution, 107 counterexamples)
[07/20 18:00:17]  Generator returned sat in 8.364971 secs.
[07/20 18:00:17]  Candidate solution: 
[1m[94mif(qbound[t][5]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 18:00:18]  Improved gap from 87/2048 to 31.25
[07/20 18:00:18]  Improved number of small numbers from 53 to 99 out of a max of 101
[07/20 18:00:18]  Verifer returned sat in 0.962415 secs.
[07/20 18:00:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4828.766846    4728.809570 -7924.010498  4828.766846    0.086670  4728.809570        0.0   99.957275       99.957275
1    5160.059570    4828.809326 -7924.010498  5160.059570  431.250000  4828.809326        0.0  331.250244      331.250000
2    5160.059570    4894.479492 -7924.010498  5160.059570    0.042480  4894.479492        0.0  265.580078      231.250000
3    5160.059570    5028.809326 -7924.010498  5160.059570   60.332520  5028.809326        0.0  131.250244      131.250000
4    5160.059570    5128.767090 -7924.010498  5160.059570   31.666260  5128.767090        0.0   31.292480       31.250000
5    5160.059570    5128.809570 -7855.260498  5160.059570   17.333130  5128.809570        0.0   31.250000        0.000000
6    5246.474609    5160.059570 -7841.675537  5246.474609  117.665039  5160.059570        0.0   86.415039        0.000000
7    5246.474609    5246.474609 -7772.925537  5246.474609   60.332520  5246.474609        0.0    0.000000      -31.250000
8    5278.140869    5277.724609 -7772.925537  5278.140869   31.666260  5277.724609        0.0    0.416260      -99.583740
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:00:19]  --------------------------------------------------------------------------------
[07/20 18:00:19]  Iteration: 123 (14 solution, 108 counterexamples)
[07/20 18:00:23]  Generator returned sat in 2.019271 secs.
[07/20 18:00:23]  Candidate solution: 
[1m[94mif(qbound[t][5]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 18:00:24]  Improved gap from 0 to 31.25
[07/20 18:00:24]  Improved number of small numbers from 55 to 101 out of a max of 101
[07/20 18:00:24]  Verifer returned sat in 0.911630 secs.
[07/20 18:00:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4874.208008    4774.250488 -7924.010254  4874.208008    0.086670  4774.250488        0.0   99.957520       99.957520
1    5230.835449    4874.250488 -7924.010254  5230.835449  456.584961  4874.250488        0.0  356.584961      356.584961
2    5230.835449    4946.250488 -7924.010254  5230.835449  356.584961  4946.250488        0.0  284.584961      256.584961
3    5230.835449    5074.250488 -7924.010254  5230.835449   59.500000  5074.250488        0.0  156.584961      156.584961
4    5230.835449    5174.208252 -7924.010254  5230.835449   31.250000  5174.208252        0.0   56.627197       56.584961
5    5230.835449    5174.250488 -7880.595215  5230.835449   17.125000  5174.250488        0.0   56.584961        0.000000
6    5290.250488    5230.835449 -7840.052979  5290.250488  116.000000  5230.835449        0.0   59.415039       -0.042725
7    5290.335449    5290.293213 -7771.302979  5290.335449   59.500000  5290.293213        0.0    0.042236      -31.207764
8    5321.543213    5321.543213 -7771.302979  5321.543213   31.250000  5321.543213        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:00:25]  --------------------------------------------------------------------------------
[07/20 18:00:25]  Iteration: 124 (14 solution, 109 counterexamples)
[07/20 18:00:29]  Generator returned sat in 1.763965 secs.
[07/20 18:00:29]  Candidate solution: 
[1m[94mif(qbound[t][5]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 18:00:30]  Improved gap from 125/4 to 31.25
[07/20 18:00:31]  Improved number of small numbers from 62 to 99 out of a max of 101
[07/20 18:00:31]  Verifer returned sat in 1.945636 secs.
[07/20 18:00:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5101.163330    4901.205811 -7921.387939  5101.163330    0.086670  4901.205811        0.0  199.957520       99.957520
1    5458.995850    5101.205811 -7921.387939  5458.995850  557.790039  5101.205811        0.0  357.790039      357.790039
2    5458.995850    5166.875977 -7921.387939  5458.995850    0.042480  5166.875977        0.0  292.119873      257.790039
3    5458.995850    5201.205811 -7921.387939  5458.995850   60.832520  5201.205811        0.0  257.790039      157.790039
4    5458.995850    5401.163574 -7921.387939  5458.995850   31.916260  5401.163574        0.0   57.832275       57.790039
5    5458.995850    5401.206055 -7879.177979  5458.995850   17.458130  5401.206055        0.0   57.789795        0.000000
6    5519.871094    5458.995850 -7840.053223  5519.871094  118.665039  5458.995850        0.0   60.875244        0.000000
7    5519.871094    5519.871094 -7771.303223  5519.871094   60.832520  5519.871094        0.0    0.000000      -31.250000
8    5551.787354    5551.121094 -7771.303223  5551.787354   31.916260  5551.121094        0.0    0.666260      -99.333740
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:00:31]  --------------------------------------------------------------------------------
[07/20 18:00:31]  Iteration: 125 (14 solution, 110 counterexamples)
[07/20 18:00:35]  Generator returned sat in 1.625086 secs.
[07/20 18:00:35]  Candidate solution: 
[1m[94mif(qbound[t][5]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 18:00:37]  Improved gap from 249/8 to 31.25
[07/20 18:00:38]  Improved number of small numbers from 66 to 68 out of a max of 101
[07/20 18:00:38]  Verifer returned sat in 2.208863 secs.
[07/20 18:00:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3539.895752    3439.916992 -8405.875122  3539.895752    0.086426  3439.916992        0.0   99.978760       99.978760
1    3897.802612    3539.916748 -8405.875122  3897.802612  457.885620  3539.916748        0.0  357.885864      357.885620
2    3897.802612    3604.544434 -8405.875122  3897.802612    0.042236  3604.544434        0.0  293.258179      257.885620
3    3897.802612    3739.916992 -8405.875122  3897.802612   60.843140  3739.916992        0.0  157.885620      157.885620
4    3897.802612    3839.895752 -8405.875122  3897.802612   31.921570  3839.895752        0.0   57.906860       57.885620
5    3897.802612    3839.916992 -8363.760742  3897.802612   17.460785  3839.916992        0.0   57.885620        0.000000
6    3958.603271    3897.802612 -8324.582520  3958.603271  118.686279  3897.802612        0.0   60.800659       -0.021118
7    3958.645752    3958.624512 -8255.832642  3958.645752   60.843140  3958.624512        0.0    0.021240      -31.228760
8    3990.546082    3989.874512 -8255.832520  3990.546082   31.921570  3989.874512        0.0    0.671570      -99.328308
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:00:38]  --------------------------------------------------------------------------------
[07/20 18:00:38]  Iteration: 126 (14 solution, 111 counterexamples)
[07/20 18:00:43]  Generator returned sat in 2.814642 secs.
[07/20 18:00:43]  Candidate solution: 
[1m[94mif(qbound[t][5]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 18:00:44]  Improved gap from 0 to 23.4375
[07/20 18:00:44]  Improved number of small numbers from 64 to 101 out of a max of 101
[07/20 18:00:44]  Verifer returned sat in 0.399928 secs.
[07/20 18:00:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0     3582.55127     3474.30127 -8440.302002   3582.55127    0.086182   3474.30127        0.0  108.25000       108.25000
1     3897.76001     3474.30127 -8440.302002   3897.76001  423.458740   3474.30127        0.0  423.45874       323.45874
2     3897.76001     3582.57251 -8440.302002   3897.76001    0.021240   3582.57251        0.0  315.18750       223.45874
3     3897.76001     3674.30127 -8440.302002   3897.76001    0.021240   3674.30127        0.0  223.45874       123.45874
4     3897.76001     3874.30127 -8440.302002   3897.76001    1.500000   3874.30127        0.0   23.45874        23.45874
5     3897.76001     3874.32251 -8363.760742   3897.76001    1.500000   3874.32251        0.0   23.43750         0.00000
6     4021.19751     3897.76001 -8363.760742   4021.19751  146.875000   3897.76001        0.0  123.43750        23.43750
7     4021.19751     3997.76001 -8287.198242   4021.19751    1.500000   3997.76001        0.0   23.43750         0.00000
8     4021.19751     4021.19751 -8287.198242   4021.19751    1.500000   4021.19751        0.0    0.00000      -100.00000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:00:44]  --------------------------------------------------------------------------------
[07/20 18:00:44]  Iteration: 127 (14 solution, 112 counterexamples)
[07/20 18:00:49]  Generator returned sat in 2.427065 secs.
[07/20 18:00:49]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 18:00:51]  Improved gap from 347/8192 to 31.25
[07/20 18:00:51]  Improved number of small numbers from 71 to 84 out of a max of 101
[07/20 18:00:51]  Verifer returned sat in 2.019073 secs.
[07/20 18:00:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3311.416748    3111.416992 -8177.417725  3311.416748    0.085938  3111.416992        0.0  199.999756       99.999756
1    3311.416992    3311.416748 -8177.417725  3311.416992  200.000000  3311.416748        0.0    0.000244        0.000000
2    3311.459229    3311.416992 -8110.667725  3311.459229    0.042480  3311.416992        0.0    0.042236      -33.207764
3    3631.084351    3344.666992 -8110.667725  3631.084351  319.667358  3344.666992        0.0  286.417358      186.417358
4    3631.084351    3544.666992 -8110.667725  3631.084351  161.333679  3544.666992        0.0   86.417358       86.417358
5    3631.084351    3544.666992 -8097.085083  3631.084351   82.166840  3544.666992        0.0   86.417358        0.000000
6    3662.291992    3631.084351 -8028.335205  3662.291992  117.625000  3631.084351        0.0   31.207642       -0.042480
7    3691.396851    3662.334473 -7959.585205  3691.396851   60.312500  3662.334473        0.0   29.062378       -2.187622
8    3693.990723    3693.584473 -7959.584961  3693.990723   31.656250  3693.584473        0.0    0.406250      -99.593506
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:00:52]  --------------------------------------------------------------------------------
[07/20 18:00:52]  Iteration: 128 (14 solution, 113 counterexamples)
[07/20 18:00:58]  Generator returned sat in 3.888674 secs.
[07/20 18:00:58]  Candidate solution: 
[1m[94mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 18:00:59]  Improved gap from 173/2048 to 0
[07/20 18:00:59]  Improved number of small numbers from 91 to 101 out of a max of 101
[07/20 18:00:59]  Verifer returned sat in 0.521257 secs.
[07/20 18:00:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3694.861816    3594.904053 -8312.177734  3694.861816    0.085693  3594.904053        0.0   99.957764       99.957764
1    3694.946045    3594.904053 -8312.177734  3694.946045  100.041992  3594.904053        0.0  100.041992        0.041992
2    3694.946045    3694.904053 -8212.219727  3694.946045  100.000000  3694.904053        0.0    0.041992        0.000000
3    3796.488281    3694.946289 -8212.219727  3796.488281  101.584229  3694.946289        0.0  101.541992        1.542236
4    3796.488281    3794.946045 -8113.761963  3796.488281    1.500000  3794.946045        0.0    1.542236        0.000000
5    3796.488281    3796.488281 -8013.804443  3796.488281    1.500000  3796.488281        0.0    0.000000       -0.042480
6    3797.988281    3797.946289 -7915.262207  3797.988281    1.500000  3797.946289        0.0    0.041992       -0.000244
7    3799.446289    3799.404053 -7818.177490  3799.446289    1.500000  3799.404053        0.0    0.042236       -1.457520
8    3800.904053    3800.904053 -7818.177490  3800.904053    1.500000  3800.904053        0.0    0.000000      -99.999756
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:00:59]  --------------------------------------------------------------------------------
[07/20 18:00:59]  Iteration: 129 (14 solution, 114 counterexamples)
[07/20 18:01:09]  Generator returned sat in 7.055951 secs.
[07/20 18:01:09]  Candidate solution: 
[1m[94mif(qbound[t][8]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:01:09]  Improved number of small numbers from 55 to 100 out of a max of 100
[07/20 18:01:09]  Verifer returned sat in 0.304886 secs.
[07/20 18:01:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4194.839844    3494.839600 -8312.177979  4194.839844    0.085449  3494.839600        0.0  700.000244      700.000000
1    4194.839844    3494.839844 -8312.177979  4194.839844  700.000000  3494.839844        0.0  700.000000      600.000000
2    4194.839844    3694.839844 -8312.177979  4194.839844    0.041992  3694.839844        0.0  500.000000      500.000000
3    4194.966064    3794.839600 -8312.177979  4194.966064  500.126221  3794.839600        0.0  400.126465      400.126221
4    4194.966064    3794.881836 -8312.177979  4194.966064  300.000000  3794.881836        0.0  400.084229      300.126221
5    4194.966064    3894.839844 -8312.177979  4194.966064  300.041992  3894.839844        0.0  300.126221      200.126221
6    4194.966064    3994.881592 -8312.177979  4194.966064  200.500000  3994.881592        0.0  200.084473      100.126221
7    4194.966064    4194.797607 -8312.177979  4194.966064  200.041992  4194.797607        0.0    0.168457        0.126221
8    4595.213379    4194.839844 -8312.177979  4595.213379  400.415771  4194.839844        0.0  400.373535      300.373535
high_util=True, low_delay=False, ramp_up=True, ramp_down=False.[0m
[07/20 18:01:10]  --------------------------------------------------------------------------------
[07/20 18:01:10]  Iteration: 130 (14 solution, 115 counterexamples)
[07/20 18:01:14]  Generator returned sat in 1.760860 secs.
[07/20 18:01:14]  Candidate solution: 
[1m[94mif(qbound[t][8]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:01:14]  Verifer returned unsat in 0.215384 secs.
[07/20 18:01:14]  Proved solution: 
[1m[92mif(qbound[t][8]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:01:14]  --------------------------------------------------------------------------------
[07/20 18:01:14]  Iteration: 131 (15 solution, 115 counterexamples)
[07/20 18:01:18]  Generator returned sat in 1.622676 secs.
[07/20 18:01:19]  Candidate solution: 
[1m[94mif(qbound[t][8]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:01:19]  Verifer returned unsat in 0.333893 secs.
[07/20 18:01:19]  Proved solution: 
[1m[92mif(qbound[t][8]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:01:19]  --------------------------------------------------------------------------------
[07/20 18:01:19]  Iteration: 132 (16 solution, 115 counterexamples)
[07/20 18:01:23]  Generator returned sat in 1.628259 secs.
[07/20 18:01:23]  Candidate solution: 
[1m[94mif(qbound[t][8]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:01:23]  Verifer returned unsat in 0.276562 secs.
[07/20 18:01:23]  Proved solution: 
[1m[92mif(qbound[t][8]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:01:24]  --------------------------------------------------------------------------------
[07/20 18:01:24]  Iteration: 133 (17 solution, 115 counterexamples)
[07/20 18:01:28]  Generator returned sat in 1.613498 secs.
[07/20 18:01:28]  Candidate solution: 
[1m[94mif(qbound[t][8]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:01:28]  Verifer returned unsat in 0.298352 secs.
[07/20 18:01:28]  Proved solution: 
[1m[92mif(qbound[t][8]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:01:28]  --------------------------------------------------------------------------------
[07/20 18:01:28]  Iteration: 134 (18 solution, 115 counterexamples)
[07/20 18:01:32]  Generator returned sat in 1.711874 secs.
[07/20 18:01:32]  Candidate solution: 
[1m[94mif(qbound[t][8]):
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:01:33]  Improved number of small numbers from 64 to 100 out of a max of 100
[07/20 18:01:33]  Verifer returned sat in 0.252624 secs.
[07/20 18:01:33]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3496.819580    2795.798828 -8312.177979  3496.819580    0.085449  2795.798828        0.0  701.020752      701.020752
1    3496.819580    2895.798828 -8312.177979  3496.819580    0.041992  2895.798828        0.0  601.020752      601.020752
2    3496.819580    2895.798828 -8312.177979  3496.819580    0.020752  2895.798828        0.0  601.020752      501.020752
3    3496.819580    2997.714844 -8312.177979  3496.819580    0.020996  2997.714844        0.0  499.104736      401.020752
4    3496.819580    3096.798828 -8312.177979  3496.819580  201.916016  3096.798828        0.0  400.020752      301.020752
5    3496.819580    3290.798828 -8312.177979  3496.819580  201.000000  3290.798828        0.0  206.020752      201.020752
6    3685.798828    3395.798828 -8312.177979  3685.798828  395.000000  3395.798828        0.0  290.000000      290.000000
7    3793.840820    3495.798828 -8312.177979  3793.840820  398.041992  3495.798828        0.0  298.041992      298.041992
8    3895.819824    3495.798828 -8312.177979  3895.819824  400.020996  3495.798828        0.0  400.020996      300.020996
high_util=True, low_delay=False, ramp_up=True, ramp_down=False.[0m
[07/20 18:01:33]  --------------------------------------------------------------------------------
[07/20 18:01:33]  Iteration: 135 (18 solution, 116 counterexamples)
[07/20 18:01:37]  Generator returned sat in 1.756035 secs.
[07/20 18:01:38]  Candidate solution: 
[1m[94mif(qbound[t][8]):
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:01:38]  Improved number of small numbers from 88 to 88 out of a max of 100
[07/20 18:01:38]  Verifer returned sat in 0.426836 secs.
[07/20 18:01:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3496.819580    2793.882812 -8312.177979  3496.819580    0.085449  2793.882812        0.0  702.936768      701.020752
1    3496.819580    2895.798828 -8312.177979  3496.819580    0.041992  2895.798828        0.0  601.020752      601.020752
2    3496.819580    2895.798828 -8312.177979  3496.819580    0.020752  2895.798828        0.0  601.020752      501.020752
3    3496.819580    2995.798828 -8312.177979  3496.819580    0.020996  2995.798828        0.0  501.020752      401.020752
4    3496.819580    3096.809204 -8312.177979  3496.819580  201.916016  3096.809204        0.0  400.010376      301.020752
5    3496.819580    3291.861084 -8312.177979  3496.819580  201.010376  3291.861084        0.0  204.958496      201.020752
6    3687.923340    3395.798828 -8312.177979  3687.923340  396.062256  3395.798828        0.0  292.124512      292.124512
7    3794.829956    3495.798828 -8312.177979  3794.829956  399.031128  3495.798828        0.0  299.031128      299.031128
8    3895.809204    3495.798828 -8312.177979  3895.809204  400.010376  3495.798828        0.0  400.010376      300.010376
high_util=True, low_delay=False, ramp_up=True, ramp_down=False.[0m
[07/20 18:01:38]  --------------------------------------------------------------------------------
[07/20 18:01:38]  Iteration: 136 (18 solution, 117 counterexamples)
[07/20 18:01:52]  Generator returned sat in 11.084042 secs.
[07/20 18:01:52]  Candidate solution: 
[1m[94mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:01:53]  Verifer returned unsat in 0.288210 secs.
[07/20 18:01:53]  Proved solution: 
[1m[92mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:01:53]  --------------------------------------------------------------------------------
[07/20 18:01:53]  Iteration: 137 (19 solution, 117 counterexamples)
[07/20 18:01:57]  Generator returned sat in 1.687924 secs.
[07/20 18:01:57]  Candidate solution: 
[1m[94mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:01:57]  Verifer returned unsat in 0.306106 secs.
[07/20 18:01:57]  Proved solution: 
[1m[92mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:01:57]  --------------------------------------------------------------------------------
[07/20 18:01:57]  Iteration: 138 (20 solution, 117 counterexamples)
[07/20 18:02:02]  Generator returned sat in 1.951060 secs.
[07/20 18:02:02]  Candidate solution: 
[1m[94mif(qbound[t][6]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:02:02]  Verifer returned unsat in 0.408315 secs.
[07/20 18:02:02]  Proved solution: 
[1m[92mif(qbound[t][6]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:02:02]  --------------------------------------------------------------------------------
[07/20 18:02:02]  Iteration: 139 (21 solution, 117 counterexamples)
[07/20 18:02:07]  Generator returned sat in 1.702644 secs.
[07/20 18:02:07]  Candidate solution: 
[1m[94mif(qbound[t][6]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:02:07]  Verifer returned unsat in 0.329109 secs.
[07/20 18:02:07]  Proved solution: 
[1m[92mif(qbound[t][6]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:02:07]  --------------------------------------------------------------------------------
[07/20 18:02:07]  Iteration: 140 (22 solution, 117 counterexamples)
[07/20 18:02:11]  Generator returned sat in 1.674585 secs.
[07/20 18:02:12]  Candidate solution: 
[1m[94mif(qbound[t][6]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:02:12]  Verifer returned unsat in 0.230280 secs.
[07/20 18:02:12]  Proved solution: 
[1m[92mif(qbound[t][6]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:02:12]  --------------------------------------------------------------------------------
[07/20 18:02:12]  Iteration: 141 (23 solution, 117 counterexamples)
[07/20 18:02:17]  Generator returned sat in 2.518364 secs.
[07/20 18:02:17]  Candidate solution: 
[1m[94mif(qbound[t][6]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:02:17]  Verifer returned unsat in 0.284561 secs.
[07/20 18:02:17]  Proved solution: 
[1m[92mif(qbound[t][6]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:02:17]  --------------------------------------------------------------------------------
[07/20 18:02:17]  Iteration: 142 (24 solution, 117 counterexamples)
[07/20 18:02:22]  Generator returned sat in 1.698450 secs.
[07/20 18:02:22]  Candidate solution: 
[1m[94mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:02:22]  Verifer returned unsat in 0.385501 secs.
[07/20 18:02:22]  Proved solution: 
[1m[92mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:02:22]  --------------------------------------------------------------------------------
[07/20 18:02:22]  Iteration: 143 (25 solution, 117 counterexamples)
[07/20 18:02:31]  Generator returned sat in 6.342128 secs.
[07/20 18:02:31]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:02:32]  Improved gap from 0 to 14.0625
[07/20 18:02:32]  Improved number of small numbers from 57 to 101 out of a max of 101
[07/20 18:02:32]  Verifer returned sat in 0.833616 secs.
[07/20 18:02:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3911.197754    3811.155762 -8627.010986  3911.197754    0.085205  3811.155762        0.0  100.041992        0.041992
1    3911.197754    3911.155762 -8627.010986  3911.197754  100.041748  3911.155762        0.0    0.041992      -99.958008
2    4446.197510    4011.155762 -8627.010986  4446.197510  535.041748  4011.155762        0.0  435.041748      335.041748
3    4446.197510    4111.155762 -8627.010986  4446.197510  435.000000  4111.155762        0.0  335.041748      235.041748
4    4446.197510    4311.155518 -8627.010986  4446.197510  218.000000  4311.155518        0.0  135.041992      135.041748
5    4446.197510    4390.905762 -8627.010986  4446.197510  109.500000  4390.905762        0.0   55.291748       35.041748
6    4446.197510    4432.093018 -8562.052734  4446.197510   55.250000  4432.093018        0.0   14.104492        0.000000
7    4460.218018    4446.197510 -8476.115234  4460.218018   28.125000  4446.197510        0.0   14.020508       -0.041992
8    4460.260010    4460.260010 -8476.114990  4460.260010   14.062500  4460.260010        0.0    0.000000      -99.999756
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:02:32]  --------------------------------------------------------------------------------
[07/20 18:02:32]  Iteration: 144 (25 solution, 118 counterexamples)
[07/20 18:02:41]  Generator returned sat in 6.048557 secs.
[07/20 18:02:41]  Candidate solution: 
[1m[94mif(qbound[t][6]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:02:42]  Verifer returned unsat in 0.222111 secs.
[07/20 18:02:42]  Proved solution: 
[1m[92mif(qbound[t][6]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:02:42]  --------------------------------------------------------------------------------
[07/20 18:02:42]  Iteration: 145 (26 solution, 118 counterexamples)
[07/20 18:02:48]  Generator returned sat in 3.425303 secs.
[07/20 18:02:48]  Candidate solution: 
[1m[94mif(qbound[t][5]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:02:48]  Verifer returned unsat in 0.358056 secs.
[07/20 18:02:48]  Proved solution: 
[1m[92mif(qbound[t][5]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:02:48]  --------------------------------------------------------------------------------
[07/20 18:02:48]  Iteration: 146 (27 solution, 118 counterexamples)
[07/20 18:02:53]  Generator returned sat in 2.421623 secs.
[07/20 18:02:53]  Candidate solution: 
[1m[94mif(qbound[t][8]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:02:54]  Verifer returned unsat in 0.261494 secs.
[07/20 18:02:54]  Proved solution: 
[1m[92mif(qbound[t][8]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:02:54]  --------------------------------------------------------------------------------
[07/20 18:02:54]  Iteration: 147 (28 solution, 118 counterexamples)
[07/20 18:02:58]  Generator returned sat in 1.758263 secs.
[07/20 18:02:58]  Candidate solution: 
[1m[94mif(qbound[t][8]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:02:58]  Improved gap from 0 to 23.4375
[07/20 18:02:59]  Improved number of small numbers from 55 to 101 out of a max of 101
[07/20 18:02:59]  Verifer returned sat in 0.530120 secs.
[07/20 18:02:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5119.625732    4696.188232 -8915.186523  5119.625732    0.085205  4696.188232        0.0  423.437500      423.437500
1    5119.625732    4796.188232 -8915.186523  5119.625732  423.437256  4796.188232        0.0  323.437500      323.437500
2    5119.625732    4896.187988 -8915.186523  5119.625732    0.001221  4896.187988        0.0  223.437744      223.437500
3    5119.625732    4907.906494 -8915.186523  5119.625732    0.001465  4907.906494        0.0  211.719238      123.437500
4    5119.625732    5096.186768 -8915.186523  5119.625732  211.718262  5096.186768        0.0   23.438965       23.437500
5    5119.625732    5096.188232 -8838.624023  5119.625732    0.010000  5096.188232        0.0   23.437500        0.000000
6    5119.625732    5119.625732 -8762.061523  5119.625732    0.010000  5119.625732        0.0    0.000000      -23.437500
7    5331.344971    5143.063232 -8762.061523  5331.344971  211.719238  5143.063232        0.0  188.281738       88.281738
8    5331.344971    5246.185547 -8762.061523  5331.344971   46.876465  5246.185547        0.0   85.159424      -11.718262
high_util=False, low_delay=True, ramp_up=False, ramp_down=False.[0m
[07/20 18:02:59]  --------------------------------------------------------------------------------
[07/20 18:02:59]  Iteration: 148 (28 solution, 119 counterexamples)
[07/20 18:03:03]  Generator returned sat in 1.877180 secs.
[07/20 18:03:04]  Candidate solution: 
[1m[94mif(qbound[t][8]):
	c_f[0][t] = max(0.01, 1c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:03:04]  Improved number of small numbers from 65 to 100 out of a max of 100
[07/20 18:03:04]  Verifer returned sat in 0.361786 secs.
[07/20 18:03:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4531.343506    3631.344482 -7950.342773  4531.343506    0.084961  3631.344482        0.0  899.999023      799.999023
1    4531.343506    3731.344482 -7950.342773  4531.343506  423.437012  3731.344482        0.0  799.999023      699.999023
2    4531.343506    3931.343018 -7950.342773  4531.343506    0.000977  3931.343018        0.0  600.000488      599.999023
3    4531.343506    3931.344482 -7950.342773  4531.343506  600.000000  3931.344482        0.0  599.999023      499.999023
4    4531.344482    4131.344482 -7950.342773  4531.344482  600.000000  4131.344482        0.0  400.000000      400.000000
5    4731.344482    4231.344482 -7950.342773  4731.344482  600.000000  4231.344482        0.0  500.000000      500.000000
6    4831.344482    4331.344238 -7950.342773  4831.344482  600.000000  4331.344238        0.0  500.000244      500.000000
7    4831.344482    4431.343750 -7950.342773  4831.344482  399.999756  4431.343750        0.0  400.000732      400.000000
8    4831.344482    4431.344482 -7950.342773  4831.344482  399.999756  4431.344482        0.0  400.000000      300.000000
high_util=True, low_delay=False, ramp_up=False, ramp_down=False.[0m
[07/20 18:03:04]  --------------------------------------------------------------------------------
[07/20 18:03:04]  Iteration: 149 (28 solution, 120 counterexamples)
[07/20 18:03:09]  Generator returned sat in 1.845038 secs.
[07/20 18:03:09]  Candidate solution: 
[1m[94mif(qbound[t][8]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:03:09]  Verifer returned unsat in 0.186612 secs.
[07/20 18:03:09]  Proved solution: 
[1m[92mif(qbound[t][8]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:03:09]  --------------------------------------------------------------------------------
[07/20 18:03:09]  Iteration: 150 (29 solution, 120 counterexamples)
[07/20 18:03:14]  Generator returned sat in 2.536532 secs.
[07/20 18:03:15]  Candidate solution: 
[1m[94mif(qbound[t][4]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:03:15]  Verifer returned unsat in 0.325002 secs.
[07/20 18:03:15]  Proved solution: 
[1m[92mif(qbound[t][4]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:03:15]  --------------------------------------------------------------------------------
[07/20 18:03:15]  Iteration: 151 (30 solution, 120 counterexamples)
[07/20 18:03:20]  Generator returned sat in 2.207398 secs.
[07/20 18:03:20]  Candidate solution: 
[1m[94mif(qbound[t][4]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:03:20]  Verifer returned unsat in 0.225780 secs.
[07/20 18:03:20]  Proved solution: 
[1m[92mif(qbound[t][4]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:03:20]  --------------------------------------------------------------------------------
[07/20 18:03:20]  Iteration: 152 (31 solution, 120 counterexamples)
[07/20 18:03:25]  Generator returned sat in 1.884578 secs.
[07/20 18:03:25]  Candidate solution: 
[1m[94mif(qbound[t][4]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:03:25]  Verifer returned unsat in 0.316860 secs.
[07/20 18:03:25]  Proved solution: 
[1m[92mif(qbound[t][4]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:03:25]  --------------------------------------------------------------------------------
[07/20 18:03:25]  Iteration: 153 (32 solution, 120 counterexamples)
[07/20 18:03:30]  Generator returned sat in 1.831264 secs.
[07/20 18:03:30]  Candidate solution: 
[1m[94mif(qbound[t][4]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:03:30]  Verifer returned unsat in 0.332437 secs.
[07/20 18:03:30]  Proved solution: 
[1m[92mif(qbound[t][4]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:03:30]  --------------------------------------------------------------------------------
[07/20 18:03:30]  Iteration: 154 (33 solution, 120 counterexamples)
[07/20 18:03:35]  Generator returned sat in 1.998453 secs.
[07/20 18:03:35]  Candidate solution: 
[1m[94mif(qbound[t][4]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:03:35]  Verifer returned unsat in 0.179950 secs.
[07/20 18:03:35]  Proved solution: 
[1m[92mif(qbound[t][4]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:03:35]  --------------------------------------------------------------------------------
[07/20 18:03:35]  Iteration: 155 (34 solution, 120 counterexamples)
[07/20 18:03:40]  Generator returned sat in 2.135388 secs.
[07/20 18:03:40]  Candidate solution: 
[1m[94mif(qbound[t][4]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:03:40]  Verifer returned unsat in 0.259457 secs.
[07/20 18:03:40]  Proved solution: 
[1m[92mif(qbound[t][4]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:03:40]  --------------------------------------------------------------------------------
[07/20 18:03:40]  Iteration: 156 (35 solution, 120 counterexamples)
[07/20 18:03:48]  Generator returned sat in 5.381113 secs.
[07/20 18:03:49]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/20 18:03:49]  Improved gap from 85/4096 to 1.5625
[07/20 18:03:49]  Improved number of small numbers from 55 to 101 out of a max of 101
[07/20 18:03:49]  Verifer returned sat in 0.591533 secs.
[07/20 18:03:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5007.844727    5007.844482 -9048.364258  5007.844727    0.084961  5007.844482        0.0    0.000244        0.000244
1    5107.802979    5107.490234 -9048.364258  5107.802979   99.958496  5107.490234        0.0    0.312744       -0.041504
2    5109.406982    5107.844482 -8949.926758  5109.406982    1.916748  5107.844482        0.0    1.562500        0.000000
3    5309.406982    5209.406982 -8949.926758  5309.406982  201.562500  5209.406982        0.0  100.000000      100.000000
4    5309.406982    5209.407227 -8949.926758  5309.406982    2.000000  5209.407227        0.0   99.999756        0.000000
5    5311.324219    5309.406982 -8851.885498  5311.324219  101.916992  5309.406982        0.0    1.917236       -0.041504
6    5311.406982    5311.365723 -8753.843750  5311.406982    2.000000  5311.365723        0.0    0.041260       -1.916992
7    5313.365723    5313.324219 -8655.843750  5313.365723    2.000000  5313.324219        0.0    0.041504       -1.958252
8    5315.324219    5315.323975 -8655.843750  5315.324219    2.000000  5315.323975        0.0    0.000244      -99.999756
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:03:50]  --------------------------------------------------------------------------------
[07/20 18:03:50]  Iteration: 157 (35 solution, 121 counterexamples)
[07/20 18:03:59]  Generator returned sat in 6.737520 secs.
[07/20 18:03:59]  Candidate solution: 
[1m[94mif(qbound[t][5]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 18:04:00]  Improved gap from 339/16384 to 23.4375
[07/20 18:04:00]  Improved number of small numbers from 101 to 101 out of a max of 101
[07/20 18:04:00]  Verifer returned sat in 0.468022 secs.
[07/20 18:04:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5536.383301    5433.052246 -8949.926758  5536.383301    0.084961  5433.052246        0.0  103.331055      103.331055
1    5856.489746    5533.052246 -8949.926758  5856.489746  423.437500  5533.052246        0.0  323.437500      323.437500
2    5856.489746    5536.383301 -8949.926758  5856.489746  323.437500  5536.383301        0.0  320.106445      223.437500
3    5856.489746    5733.052246 -8949.926758  5856.489746  320.106445  5733.052246        0.0  123.437500      123.437500
4    5856.489746    5832.969482 -8949.926758  5856.489746    0.500000  5832.969482        0.0   23.520264       23.437500
5    5856.489746    5833.052246 -8873.364258  5856.489746    0.500000  5833.052246        0.0   23.437500        0.000000
6    5982.886719    5856.489746 -8873.364258  5982.886719  149.834473  5856.489746        0.0  126.396973       26.396973
7    5982.886719    5956.489746 -8799.761230  5982.886719    0.500000  5956.489746        0.0   26.396973        0.000000
8    5982.886719    5982.886719 -8799.761230  5982.886719    0.500000  5982.886719        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:04:00]  --------------------------------------------------------------------------------
[07/20 18:04:00]  Iteration: 158 (35 solution, 122 counterexamples)
[07/20 18:04:06]  Generator returned sat in 3.071087 secs.
[07/20 18:04:06]  Candidate solution: 
[1m[94mif(qbound[t][5]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 18:04:06]  Improved gap from 1093/48 to 23.4375
[07/20 18:04:07]  Improved number of small numbers from 64 to 101 out of a max of 101
[07/20 18:04:07]  Verifer returned sat in 0.511242 secs.
[07/20 18:04:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5534.876221    5427.708984 -8949.926758  5534.876221    0.084961  5427.708984        0.0  107.167236      107.167236
1    5851.146484    5527.708984 -8949.926758  5851.146484  423.437500  5527.708984        0.0  323.437500      323.437500
2    5851.146484    5534.958984 -8949.926758  5851.146484  323.437500  5534.958984        0.0  316.187500      223.437500
3    5851.146484    5727.708984 -8949.926758  5851.146484  316.187256  5727.708984        0.0  123.437500      123.437500
4    5851.146484    5824.666504 -8949.926758  5851.146484    0.500000  5824.666504        0.0   26.479980       23.437500
5    5851.146484    5827.708984 -8873.364258  5851.146484    0.500000  5827.708984        0.0   23.437500        0.000000
6    5974.583984    5851.146484 -8873.364258  5974.583984  146.875000  5851.146484        0.0  123.437500       23.437500
7    5974.583984    5951.146484 -8796.801758  5974.583984    0.500000  5951.146484        0.0   23.437500        0.000000
8    5974.583984    5974.583984 -8796.801758  5974.583984    0.500000  5974.583984        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:04:07]  --------------------------------------------------------------------------------
[07/20 18:04:07]  Iteration: 159 (35 solution, 123 counterexamples)
[07/20 18:04:14]  Generator returned sat in 4.450807 secs.
[07/20 18:04:14]  Candidate solution: 
[1m[94mif(qbound[t][4]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 18:04:15]  Improved gap from 169/8192 to 23.4375
[07/20 18:04:15]  Improved number of small numbers from 82 to 101 out of a max of 101
[07/20 18:04:15]  Verifer returned sat in 0.465014 secs.
[07/20 18:04:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5651.146484    5474.604492 -9096.822510  5651.146484    0.084717  5474.604492        0.0  176.541992       76.541992
1    5674.604492    5651.166992 -9096.822510  5674.604492  200.000000  5651.166992        0.0   23.437500        0.000000
2    6001.146484    5684.958984 -9096.822510  6001.146484  349.979492  5684.958984        0.0  316.187500      226.541992
3    6001.146484    5774.604736 -9096.822510  6001.146484    0.020508  5774.604736        0.0  226.541748      126.541992
4    6001.146484    5974.604492 -9096.822510  6001.146484    0.500000  5974.604492        0.0   26.541992       26.541992
5    6001.146484    5977.708984 -9023.364502  6001.146484    0.500000  5977.708984        0.0   23.437500        0.000000
6    6124.583984    6001.146484 -9023.364502  6124.583984  146.875000  6001.146484        0.0  123.437500       23.437500
7    6124.583984    6101.146484 -8946.802002  6124.583984    0.500000  6101.146484        0.0   23.437500        0.000000
8    6124.583984    6124.583984 -8946.802002  6124.583984    0.500000  6124.583984        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:04:15]  --------------------------------------------------------------------------------
[07/20 18:04:15]  Iteration: 160 (35 solution, 124 counterexamples)
[07/20 18:04:20]  Generator returned sat in 2.433460 secs.
[07/20 18:04:20]  Candidate solution: 
[1m[94mif(qbound[t][4]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 18:04:21]  Improved gap from 375/16 to 23.4375
[07/20 18:04:21]  Improved number of small numbers from 91 to 101 out of a max of 101
[07/20 18:04:21]  Verifer returned sat in 0.400897 secs.
[07/20 18:04:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4446.814453    4246.834961 -8690.800293  4446.814453    0.084717  4246.834961        0.0  199.979492       99.979492
1    4448.896484    4446.834961 -8690.800293  4448.896484  202.061523  4446.834961        0.0    2.061523        2.061523
2    4770.272461    4448.916992 -8690.800293  4770.272461  323.437500  4448.916992        0.0  321.355469      223.437500
3    4770.272461    4646.834961 -8690.800293  4770.272461    0.020508  4646.834961        0.0  123.437500      123.437500
4    4770.272461    4746.814453 -8690.800293  4770.272461    0.500000  4746.814453        0.0   23.458008       23.437500
5    4770.272461    4746.834961 -8614.237793  4770.272461    0.500000  4746.834961        0.0   23.437500        0.000000
6    4896.793945    4770.272461 -8614.237793  4896.793945  149.958984  4770.272461        0.0  126.521484       26.521484
7    4896.793945    4870.272461 -8540.759277  4896.793945    0.500000  4870.272461        0.0   26.521484        0.000000
8    4896.793945    4896.793945 -8540.759277  4896.793945    0.500000  4896.793945        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:04:21]  --------------------------------------------------------------------------------
[07/20 18:04:21]  Iteration: 161 (35 solution, 125 counterexamples)
[07/20 18:04:27]  Generator returned sat in 2.474370 secs.
[07/20 18:04:27]  Candidate solution: 
[1m[94mif(qbound[t][4]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 18:04:27]  Improved gap from 375/16 to 23.4375
[07/20 18:04:27]  Improved number of small numbers from 70 to 101 out of a max of 101
[07/20 18:04:27]  Verifer returned sat in 0.470283 secs.
[07/20 18:04:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4035.525146    3976.191162 -8690.800537  4035.525146    0.084717  3976.191162        0.0   59.333984       59.333984
1    4088.524902    4035.545410 -8690.800537  4088.524902  112.333740  4035.545410        0.0   52.979492       12.333740
2    4402.732910    4088.545410 -8690.800537  4402.732910  367.187500  4088.545410        0.0  314.187500      226.541748
3    4402.732910    4276.191162 -8690.800537  4402.732910    0.020508  4276.191162        0.0  126.541748      126.541748
4    4402.732910    4376.190918 -8690.800537  4402.732910    0.500000  4376.190918        0.0   26.541992       26.541748
5    4402.732910    4379.295410 -8617.342285  4402.732910    0.500000  4379.295410        0.0   23.437500        0.000000
6    4526.170410    4402.732910 -8617.342285  4526.170410  146.875000  4402.732910        0.0  123.437500       23.437500
7    4526.170410    4502.732910 -8540.779785  4526.170410    0.500000  4502.732910        0.0   23.437500        0.000000
8    4526.170410    4526.170410 -8540.779785  4526.170410    0.500000  4526.170410        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:04:28]  --------------------------------------------------------------------------------
[07/20 18:04:28]  Iteration: 162 (35 solution, 126 counterexamples)
[07/20 18:04:35]  Generator returned sat in 4.393379 secs.
[07/20 18:04:35]  Candidate solution: 
[1m[94mif(qbound[t][4]):
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 18:04:36]  Improved gap from 337/8192 to 14.0625
[07/20 18:04:36]  Improved number of small numbers from 56 to 101 out of a max of 101
[07/20 18:04:36]  Verifer returned sat in 0.755213 secs.
[07/20 18:04:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4849.398926    4465.254150 -9179.863525  4849.398926    0.084473  4465.254150        0.0  384.144775      384.144775
1    4971.191650    4565.213135 -9179.863525  4971.191650  505.937500  4565.213135        0.0  405.978516      405.937500
2    4985.295410    4565.254150 -9179.863525  4985.295410  420.082275  4565.254150        0.0  420.041260      320.041260
3    4985.295410    4765.254150 -9179.863525  4985.295410  420.000000  4765.254150        0.0  220.041260      220.041260
4    4985.295410    4849.398926 -9179.863525  4985.295410  211.000000  4849.398926        0.0  135.896484      120.041260
5    4985.295410    4931.045410 -9179.863525  4985.295410  106.500000  4931.045410        0.0   54.250000       20.041260
6    4985.295410    4971.232910 -9099.904785  4985.295410   54.250000  4971.232910        0.0   14.062500        0.000000
7    4999.357910    4985.295410 -9013.967285  4999.357910   28.125000  4985.295410        0.0   14.062500        0.000000
8    4999.357910    4999.357910 -9013.967285  4999.357910    0.500000  4999.357910        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:04:36]  --------------------------------------------------------------------------------
[07/20 18:04:36]  Iteration: 163 (35 solution, 127 counterexamples)
[07/20 18:04:44]  Generator returned sat in 5.083587 secs.
[07/20 18:04:44]  Candidate solution: 
[1m[94mif(qbound[t][5]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:04:44]  Verifer returned unsat in 0.194747 secs.
[07/20 18:04:44]  Proved solution: 
[1m[92mif(qbound[t][5]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:04:44]  --------------------------------------------------------------------------------
[07/20 18:04:44]  Iteration: 164 (36 solution, 127 counterexamples)
[07/20 18:04:54]  Generator returned sat in 7.265781 secs.
[07/20 18:04:55]  Candidate solution: 
[1m[94mif(qbound[t][5]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/20 18:04:55]  Improved gap from 0 to 14.0625
[07/20 18:04:55]  Improved number of small numbers from 101 to 101 out of a max of 101
[07/20 18:04:55]  Verifer returned sat in 0.888002 secs.
[07/20 18:04:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4519.760498    4319.801514 -9168.676270  4519.760498    0.084473  4319.801514        0.0  199.958984       99.958984
1    4526.760498    4519.801514 -9168.676270  4526.760498  206.958984  4519.801514        0.0    6.958984        6.958984
2    4914.842529    4526.801514 -9168.676270  4914.842529  395.041016  4526.801514        0.0  388.041016      295.041016
3    4914.842529    4719.801514 -9168.676270  4914.842529  388.000000  4719.801514        0.0  195.041016      195.041016
4    4914.842529    4816.301514 -9168.676270  4914.842529  195.000000  4816.301514        0.0   98.541016       95.041016
5    4914.842529    4900.780029 -9163.717285  4914.842529   98.500000  4900.780029        0.0   14.062500        0.000000
6    4951.030029    4914.883545 -9099.904785  4951.030029   50.250000  4914.883545        0.0   36.146484        0.000000
7    4951.030029    4951.030029 -9013.967285  4951.030029   26.125000  4951.030029        0.0    0.000000      -14.062500
8    4965.092529    4965.092529 -9013.967285  4965.092529   14.062500  4965.092529        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:04:56]  --------------------------------------------------------------------------------
[07/20 18:04:56]  Iteration: 165 (36 solution, 128 counterexamples)
[07/20 18:05:04]  Generator returned sat in 5.222455 secs.
[07/20 18:05:04]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/20 18:05:06]  Improved gap from 21/512 to 29.6875
[07/20 18:05:06]  Improved number of small numbers from 65 to 101 out of a max of 101
[07/20 18:05:06]  Verifer returned sat in 1.849672 secs.
[07/20 18:05:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5654.032227    5477.614258 -9171.447754  5654.032227    0.084229  5477.614258        0.0  176.417969      176.417969
1    5654.032227    5477.614258 -9171.447754  5654.032227  176.417725  5477.614258        0.0  176.417969       76.417969
2    5777.532227    5654.114258 -9171.447754  5777.532227  299.917969  5654.114258        0.0  123.417969       99.917969
3    5960.676758    5777.614258 -9171.447754  5960.676758  306.562500  5777.614258        0.0  183.062500      183.062500
4    5960.676758    5877.614258 -9171.447754  5960.676758  154.281250  5877.614258        0.0   83.062500       83.062500
5    5960.676758    5877.614258 -9154.510254  5960.676758   78.140625  5877.614258        0.0   83.062500        0.000000
6    5990.364258    5960.676758 -9084.197998  5990.364258  112.750000  5960.676758        0.0   29.687500       -0.000244
7    6018.051758    5990.446533 -9013.967529  6018.051758   57.375000  5990.446533        0.0   27.605225       -2.082275
8    6020.134033    6020.134033 -9013.967529  6020.134033   29.687500  6020.134033        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:05:06]  --------------------------------------------------------------------------------
[07/20 18:05:06]  Iteration: 166 (36 solution, 129 counterexamples)
[07/20 18:05:12]  Generator returned sat in 2.641050 secs.
[07/20 18:05:12]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/20 18:05:14]  Improved gap from 7493/256 to 29.6875
[07/20 18:05:14]  Improved number of small numbers from 56 to 99 out of a max of 101
[07/20 18:05:14]  Verifer returned sat in 2.026755 secs.
[07/20 18:05:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5531.190674    5431.231445 -9865.457275  5531.190674    0.083984  5431.231445        0.0   99.959229       -0.040771
1    5531.272461    5531.231445 -9795.144775  5531.272461  100.041016  5531.231445        0.0    0.041016      -29.646484
2    5638.459717    5638.418945 -9795.144775  5638.459717  107.228271  5638.418945        0.0    0.040771      -22.459229
3    5937.140137    5760.918945 -9795.144775  5937.140137  298.721191  5760.918945        0.0  176.221191      176.221191
4    5937.140137    5860.918945 -9795.144775  5937.140137  150.360596  5860.918945        0.0   76.221191       76.221191
5    5937.140137    5860.918945 -9771.365967  5937.140137   76.180298  5860.918945        0.0   76.221191        0.000000
6    5973.668945    5937.140137 -9707.894775  5973.668945  112.750000  5937.140137        0.0   36.528809        0.000000
7    5994.515137    5973.709717 -9637.623047  5994.515137   57.375000  5973.709717        0.0   20.805420       -8.882080
8    6003.397217    6003.397217 -9637.623047  6003.397217   29.687500  6003.397217        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:05:14]  --------------------------------------------------------------------------------
[07/20 18:05:14]  Iteration: 167 (36 solution, 130 counterexamples)
[07/20 18:05:21]  Generator returned sat in 3.236236 secs.
[07/20 18:05:21]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/20 18:05:22]  Improved gap from 239271/8192 to 29.6875
[07/20 18:05:22]  Improved number of small numbers from 91 to 101 out of a max of 101
[07/20 18:05:22]  Verifer returned sat in 1.286471 secs.
[07/20 18:05:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6023.296631    5946.111816 -10830.543213  6023.296631    0.083740  5946.111816        0.0   77.184814       70.271973
1    6023.378174    6023.337402 -10830.543213  6023.378174   77.266357  6023.337402        0.0    0.040771      -29.646484
2    6352.983887    6131.524658 -10830.543213  6352.983887  329.646484  6131.524658        0.0  221.459229      199.959229
3    6428.912354    6253.024658 -10830.543213  6428.912354  297.387695  6253.024658        0.0  175.887695      175.887695
4    6428.912354    6353.024658 -10830.543213  6428.912354  149.693848  6353.024658        0.0   75.887695       75.887695
5    6428.912354    6353.024658 -10806.430908  6428.912354   75.846924  6353.024658        0.0   75.887695        0.000000
6    6465.774658    6428.912354 -10743.293213  6465.774658  112.750000  6428.912354        0.0   36.862305        0.000000
7    6486.287354    6473.296631 -10680.502686  6486.287354   57.375000  6473.296631        0.0   12.990723      -16.696777
8    6502.984131    6502.984131 -10610.190186  6502.984131   29.687500  6502.984131        0.0    0.000000      -29.687500
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:05:22]  --------------------------------------------------------------------------------
[07/20 18:05:22]  Iteration: 168 (36 solution, 131 counterexamples)
[07/20 18:05:33]  Generator returned sat in 8.062727 secs.
[07/20 18:05:34]  Candidate solution: 
[1m[94mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 18:05:34]  Improved gap from 0 to 12.5
[07/20 18:05:34]  Improved number of small numbers from 79 to 101 out of a max of 101
[07/20 18:05:34]  Verifer returned sat in 0.735611 secs.
[07/20 18:05:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6028.831055    5891.453125 -10768.971680  6028.831055    0.083496  5891.453125        0.0  137.377930      137.377930
1    6291.452881    5891.453125 -10768.971680  6291.452881  399.999756  5891.453125        0.0  399.999756      299.999756
2    6428.912354    6028.871582 -10768.971680  6428.912354  537.459229  6028.871582        0.0  400.040771      337.459229
3    6428.912354    6191.452881 -10768.971680  6428.912354  400.000000  6191.452881        0.0  237.459473      237.459229
4    6428.912354    6291.452881 -10768.971680  6428.912354  200.000000  6291.452881        0.0  137.459473      137.459229
5    6428.912354    6291.453125 -10768.971680  6428.912354  100.000000  6291.453125        0.0  137.459229       37.459229
6    6428.912354    6416.412354 -10706.430908  6428.912354   50.000000  6416.412354        0.0   12.500000        0.000000
7    6441.412354    6428.912354 -10618.930908  6441.412354   25.000000  6428.912354        0.0   12.500000        0.000000
8    6441.412354    6441.412354 -10618.930908  6441.412354    0.500000  6441.412354        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:05:35]  --------------------------------------------------------------------------------
[07/20 18:05:35]  Iteration: 169 (36 solution, 132 counterexamples)
[07/20 18:05:42]  Generator returned sat in 4.656877 secs.
[07/20 18:05:42]  Candidate solution: 
[1m[94mif(qbound[t][4]):
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 18:05:43]  Improved gap from 333/8192 to 12.5
[07/20 18:05:43]  Improved number of small numbers from 62 to 101 out of a max of 101
[07/20 18:05:43]  Verifer returned sat in 0.786997 secs.
[07/20 18:05:43]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5373.002441    4973.042969 -10768.971924  5373.002441    0.083496  4973.042969        0.0  399.959473      399.959473
1    5373.042969    4973.083496 -10768.971924  5373.042969  400.000000  4973.083496        0.0  399.959473      300.000000
2    5497.961426    5110.461426 -10768.971924  5497.961426  524.877930  5110.461426        0.0  387.500000      324.918457
3    5510.461426    5273.042725 -10768.971924  5510.461426  400.000000  5273.042725        0.0  237.418701      237.418457
4    5510.461426    5373.002197 -10768.971924  5510.461426  200.000000  5373.002197        0.0  137.459229      137.418457
5    5510.461426    5373.042969 -10768.971924  5510.461426  100.000000  5373.042969        0.0  137.418457       37.418457
6    5510.461426    5497.961426 -10706.390381  5510.461426   50.000000  5497.961426        0.0   12.500000        0.000000
7    5522.961426    5510.461426 -10618.890381  5522.961426   25.000000  5510.461426        0.0   12.500000        0.000000
8    5522.961426    5522.961426 -10618.890381  5522.961426    0.500000  5522.961426        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:05:44]  --------------------------------------------------------------------------------
[07/20 18:05:44]  Iteration: 170 (36 solution, 133 counterexamples)
[07/20 18:05:51]  Generator returned sat in 4.089798 secs.
[07/20 18:05:51]  Candidate solution: 
[1m[94mif(qbound[t][4]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 18:05:51]  Improved gap from 1107/2048 to 23.4375
[07/20 18:05:51]  Improved number of small numbers from 101 to 101 out of a max of 101
[07/20 18:05:51]  Verifer returned sat in 0.336602 secs.
[07/20 18:05:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5526.735107    5026.897217 -10782.952881  5526.735107    0.083496  5026.897217        0.0  499.837891      399.837891
1    5526.816162    5226.897217 -10782.952881  5526.816162  499.918945  5226.897217        0.0  299.918945      299.918945
2    5550.334717    5233.147217 -10782.952881  5550.334717  323.437500  5233.147217        0.0  317.187500      223.437500
3    5550.334717    5426.897217 -10782.952881  5550.334717  317.187500  5426.897217        0.0  123.437500      123.437500
4    5550.334717    5526.816162 -10782.952881  5550.334717    0.500000  5526.816162        0.0   23.518555       23.437500
5    5550.334717    5526.897217 -10706.390381  5550.334717    0.500000  5526.897217        0.0   23.437500        0.000000
6    5673.772217    5550.334717 -10706.390381  5673.772217  146.875000  5550.334717        0.0  123.437500       23.437500
7    5673.772217    5650.334717 -10629.827881  5673.772217    0.500000  5650.334717        0.0   23.437500        0.000000
8    5673.772217    5673.772217 -10629.827881  5673.772217    0.500000  5673.772217        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:05:52]  --------------------------------------------------------------------------------
[07/20 18:05:52]  Iteration: 171 (36 solution, 134 counterexamples)
[07/20 18:05:59]  Generator returned sat in 4.434807 secs.
[07/20 18:05:59]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 18:05:59]  Improved gap from 83/2048 to 23.4375
[07/20 18:05:59]  Improved number of small numbers from 101 to 101 out of a max of 101
[07/20 18:05:59]  Verifer returned sat in 0.285949 secs.
[07/20 18:05:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5550.293945    5153.418945 -10809.474854  5550.293945    0.083252  5153.418945        0.0  396.875000      396.875000
1    5550.293945    5253.418945 -10809.474854  5550.293945  396.875000  5253.418945        0.0  296.875000      296.875000
2    5550.334473    5260.668945 -10809.474854  5550.334473  296.915527  5260.668945        0.0  289.665527      196.915527
3    5550.375000    5435.377279 -10809.474854  5550.375000  289.706055  5435.377279        0.0  114.997721       96.956055
4    5576.856445    5550.334473 -10809.474854  5576.856445  141.479167  5550.334473        0.0   26.521973       23.437500
5    5576.856445    5553.418945 -10732.912354  5576.856445    0.500000  5553.418945        0.0   23.437500        0.000000
6    5700.293945    5576.856445 -10732.912354  5700.293945  146.875000  5576.856445        0.0  123.437500       23.437500
7    5700.293945    5676.856445 -10656.349854  5700.293945    0.500000  5676.856445        0.0   23.437500        0.000000
8    5740.617432    5700.293945 -10656.349854  5740.617432   63.760986  5700.293945        0.0   40.323486      -59.676514
high_util=False, low_delay=True, ramp_up=False, ramp_down=False.[0m
[07/20 18:06:00]  --------------------------------------------------------------------------------
[07/20 18:06:00]  Iteration: 172 (36 solution, 135 counterexamples)
[07/20 18:06:06]  Generator returned sat in 2.831593 secs.
[07/20 18:06:06]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 18:06:06]  Improved gap from 375/16 to 23.4375
[07/20 18:06:06]  Improved number of small numbers from 101 to 101 out of a max of 101
[07/20 18:06:06]  Verifer returned sat in 0.579504 secs.
[07/20 18:06:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5684.812500    5184.893555 -10809.393799  5684.812500    0.083008  5184.893555        0.0  499.918945      399.918945
1    5684.812500    5384.893555 -10809.393799  5684.812500  499.918945  5384.893555        0.0  299.918945      299.918945
2    5684.893555    5393.224609 -10809.393799  5684.893555  300.000000  5393.224609        0.0  291.668945      200.000000
3    5684.893555    5533.239258 -10809.393799  5684.893555  291.668945  5533.239258        0.0  151.654297      100.000000
4    5708.412109    5684.893555 -10809.393799  5708.412109  175.172852  5684.893555        0.0   23.518555       23.518555
5    5708.412109    5684.974609 -10732.912354  5708.412109    0.500000  5684.974609        0.0   23.437500        0.000000
6    5831.849609    5708.412109 -10732.912354  5831.849609  146.875000  5708.412109        0.0  123.437500       23.437500
7    5831.849609    5808.412109 -10656.349854  5831.849609    0.500000  5808.412109        0.0   23.437500        0.000000
8    5871.171387    5831.849609 -10656.349854  5871.171387   62.759277  5831.849609        0.0   39.321777      -60.678223
high_util=False, low_delay=True, ramp_up=False, ramp_down=False.[0m
[07/20 18:06:07]  --------------------------------------------------------------------------------
[07/20 18:06:07]  Iteration: 173 (36 solution, 136 counterexamples)
[07/20 18:06:22]  Generator returned sat in 11.823750 secs.
[07/20 18:06:22]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:06:24]  Improved gap from 0 to 48.4375
[07/20 18:06:25]  Improved number of small numbers from 55 to 63 out of a max of 101
[07/20 18:06:25]  Verifer returned sat in 2.700212 secs.
[07/20 18:06:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6101.725098    6101.684600 -11404.175597  6101.725098    0.082520  6101.684600        0.0    0.040497        0.040497
1    6101.725098    6101.684600 -11352.613097  6101.725098    0.040283  6101.684600        0.0    0.040497      -48.397003
2    6299.601267    6250.122100 -11352.613097  6299.601267  197.916667  6250.122100        0.0   49.479167       49.479167
3    6450.122100    6299.601267 -11352.613097  6450.122100  200.000000  6299.601267        0.0  150.520833      100.000000
4    6498.559600    6448.369822 -11352.613097  6498.559600  198.958333  6448.369822        0.0   50.189779       48.437500
5    6498.559600    6450.122100 -11301.050597  6498.559600    0.500000  6450.122100        0.0   48.437500        0.000000
6    6498.559600    6498.559600 -11249.488097  6498.559600    0.500000  6498.559600        0.0    0.000000      -48.437500
7    6598.288767    6546.997100 -11200.779785  6598.288767   99.729167  6546.997100        0.0   51.291667       -0.000021
8    6646.175323    6598.329102 -11200.779541  6646.175323   99.178223  6598.329102        0.0   47.846221      -52.113221
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:06:25]  --------------------------------------------------------------------------------
[07/20 18:06:25]  Iteration: 174 (36 solution, 137 counterexamples)
[07/20 18:06:38]  Generator returned sat in 9.661613 secs.
[07/20 18:06:38]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 18:06:39]  Improved gap from 83/2048 to 31.25
[07/20 18:06:40]  Improved number of small numbers from 53 to 67 out of a max of 101
[07/20 18:06:40]  Verifer returned sat in 1.936199 secs.
[07/20 18:06:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6101.644287    5901.684814 -11352.613097  6101.644287    0.082275  5901.684814        0.0  199.959473       99.959687
1    6172.725342    6101.684570 -11352.613097  6172.725342  271.040527  6101.684570        0.0   71.040771       71.040742
2    6172.725342    6172.684600 -11352.613097  6172.725342    0.040527  6172.684600        0.0    0.040742      -28.959258
3    6481.071970    6201.684814 -11352.613097  6481.071970  308.387370  6201.684814        0.0  279.387156      179.387370
4    6481.071970    6401.684600 -11352.613097  6481.071970  155.693685  6401.684600        0.0   79.387370       79.387370
5    6481.071970    6401.684600 -11332.000467  6481.071970   79.346842  6401.684600        0.0   79.387370        0.000000
6    6517.684600    6481.071970 -11268.653564  6517.684600  116.000000  6481.071970        0.0   36.612630       -0.040467
7    6540.571970    6517.725128 -11199.903625  6540.571970   59.500000  6517.725128        0.0   22.846842       -8.403158
8    6548.975128    6548.975128 -11199.903564  6548.975128   31.250000  6548.975128        0.0    0.000000      -99.999940
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:06:40]  --------------------------------------------------------------------------------
[07/20 18:06:40]  Iteration: 175 (36 solution, 138 counterexamples)
[07/20 18:06:47]  Generator returned sat in 3.425459 secs.
[07/20 18:06:47]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 18:06:49]  Improved gap from 252071/8192 to 31.25
[07/20 18:06:49]  Improved number of small numbers from 51 to 101 out of a max of 101
[07/20 18:06:49]  Verifer returned sat in 1.739657 secs.
[07/20 18:06:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6781.896729    6581.977783 -13131.224121  6781.896729    0.082275  6581.977783        0.0  199.918945       99.918945
1    6981.896729    6781.977539 -13131.224121  6981.896729  399.918945  6781.977539        0.0  199.919189      199.918945
2    7081.896729    6853.977783 -13131.224121  7081.896729  299.919189  6853.977783        0.0  227.918945      199.918945
3    7169.396729    6981.977539 -13131.224121  7169.396729  315.418945  6981.977539        0.0  187.419189      187.418945
4    7169.396729    7081.977783 -13131.224121  7169.396729  159.209473  7081.977783        0.0   87.418945       87.418945
5    7169.396729    7081.977783 -13118.643066  7169.396729   81.104736  7081.977783        0.0   87.418945        0.000000
6    7197.977783    7169.396729 -13049.893066  7197.977783  116.000000  7169.396729        0.0   28.581055       -2.668945
7    7228.896729    7200.646729 -12981.143066  7228.896729   59.500000  7200.646729        0.0   28.250000       -3.000000
8    7231.896729    7231.896729 -12981.143066  7231.896729   31.250000  7231.896729        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:06:49]  --------------------------------------------------------------------------------
[07/20 18:06:49]  Iteration: 176 (36 solution, 139 counterexamples)
[07/20 18:06:57]  Generator returned sat in 4.767421 secs.
[07/20 18:06:57]  Candidate solution: 
[1m[94mif(qbound[t][4]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 18:06:58]  Improved gap from 331/8192 to 31.25
[07/20 18:06:59]  Improved number of small numbers from 101 to 101 out of a max of 101
[07/20 18:06:59]  Verifer returned sat in 1.342833 secs.
[07/20 18:06:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6840.815918    6740.896729 -13290.143066  6840.815918    0.082275  6740.896729        0.0   99.919189       -0.080811
1    6872.146729    6840.896729 -13221.393066  6872.146729  131.250000  6840.896729        0.0   31.250000        0.000000
2    7256.896729    6944.146729 -13221.393066  7256.896729  416.000000  6944.146729        0.0  312.750000      284.750000
3    7256.896729    7072.146729 -13221.393066  7256.896729   59.500000  7072.146729        0.0  184.750000      184.750000
4    7256.896729    7169.477539 -13221.393066  7256.896729   31.250000  7169.477539        0.0   87.419189       84.750000
5    7256.896729    7172.146729 -13206.143066  7256.896729   17.125000  7172.146729        0.0   84.750000        0.000000
6    7288.146729    7256.896729 -13137.393066  7288.146729  116.000000  7256.896729        0.0   31.250000        0.000000
7    7316.396729    7288.146729 -13068.643066  7316.396729   59.500000  7288.146729        0.0   28.250000       -3.000000
8    7319.396729    7319.396729 -13068.643066  7319.396729   31.250000  7319.396729        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:06:59]  --------------------------------------------------------------------------------
[07/20 18:06:59]  Iteration: 177 (36 solution, 140 counterexamples)
[07/20 18:07:11]  Generator returned sat in 8.771262 secs.
[07/20 18:07:11]  Candidate solution: 
[1m[94mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 18:07:11]  Improved gap from 1883/4096 to 23.4375
[07/20 18:07:12]  Improved number of small numbers from 101 to 101 out of a max of 101
[07/20 18:07:12]  Verifer returned sat in 0.502457 secs.
[07/20 18:07:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6582.918945    6582.878662 -13032.205566  6582.918945    0.082275  6582.878662        0.0    0.040283       -0.040283
1    6606.356445    6582.959229 -12955.643066  6606.356445   23.477783  6582.959229        0.0   23.397217       -0.040283
2    6706.235596    6606.396729 -12955.481934  6706.235596  123.276367  6606.396729        0.0   99.838867        0.000000
3    6929.673096    6706.275879 -12955.481934  6929.673096  323.276367  6706.275879        0.0  223.397217      123.437500
4    6929.673096    6906.195312 -12955.481934  6929.673096    0.500000  6906.195312        0.0   23.477783       23.437500
5    6929.673096    6906.235596 -12878.919434  6929.673096    0.500000  6906.235596        0.0   23.437500        0.000000
6    7056.155029    6929.673096 -12878.919434  7056.155029  149.919434  6929.673096        0.0  126.481934       26.481934
7    7056.155029    7029.673096 -12805.401367  7056.155029    0.500000  7029.673096        0.0   26.481934        0.000000
8    7056.155029    7056.155029 -12805.401367  7056.155029    0.500000  7056.155029        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:07:12]  --------------------------------------------------------------------------------
[07/20 18:07:12]  Iteration: 178 (36 solution, 141 counterexamples)
[07/20 18:07:23]  Generator returned sat in 8.103511 secs.
[07/20 18:07:23]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 18:07:24]  Improved gap from 329/8192 to 48.4375
[07/20 18:07:25]  Improved number of small numbers from 68 to 80 out of a max of 101
[07/20 18:07:25]  Verifer returned sat in 1.232875 secs.
[07/20 18:07:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5994.392334    5949.052734 -12985.152100  5994.392334    0.082275  5949.052734        0.0   45.339600       32.950806
1    5994.472412    5994.432617 -12985.152100  5994.472412   45.419678  5994.432617        0.0    0.039795      -66.969116
2    6208.495117    6061.441650 -12985.152100  6208.495117  214.062500  6061.441650        0.0  147.053467       47.053589
3    6208.495117    6208.494995 -12985.152100  6208.495117  142.325806  6208.494995        0.0    0.000122      -52.946411
4    6409.879028    6361.401367 -12985.152100  6409.879028  201.384033  6361.401367        0.0   48.477661       48.437500
5    6409.879028    6361.441528 -12933.589600  6409.879028    0.500000  6361.441528        0.0   48.437500        0.000000
6    6409.879028    6409.879028 -12882.027100  6409.879028    0.500000  6409.879028        0.0    0.000000      -48.437500
7    6511.321045    6458.316528 -12835.031738  6511.321045  101.442017  6458.316528        0.0   53.004517       -0.000122
8    6557.995117    6511.361084 -12835.031738  6557.995117   99.678589  6511.361084        0.0   46.634033      -53.326050
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:07:25]  --------------------------------------------------------------------------------
[07/20 18:07:25]  Iteration: 179 (36 solution, 142 counterexamples)
[07/20 18:07:33]  Generator returned sat in 5.110732 secs.
[07/20 18:07:33]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 18:07:37]  Improved gap from 0 to 35.9375
[07/20 18:07:37]  Improved number of small numbers from 55 to 101 out of a max of 101
[07/20 18:07:37]  Verifer returned sat in 3.625770 secs.
[07/20 18:07:37]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0    5690.656982    5622.031982 -12386.105469  5690.656982    0.082275  5622.031982        0.0  68.625000       -0.080322
1    5745.103516    5690.737305 -12340.552002  5745.103516  123.071533  5690.737305        0.0  54.366211       -0.080322
2    5781.121338    5745.183838 -12276.489746  5781.121338   90.384033  5745.183838        0.0  35.937500       -0.000244
3    5845.826660    5798.966553 -12241.194824  5845.826660  100.642822  5798.966553        0.0  46.860107        0.000000
4    5887.933838    5845.826660 -12183.302002  5887.933838   88.967285  5845.826660        0.0  42.107178        0.000000
5    5923.871338    5887.933838 -12119.239502  5923.871338   78.044678  5887.933838        0.0  35.937500        0.000000
6    5959.808838    5923.871338 -12055.177002  5959.808838   71.875000  5923.871338        0.0  35.937500        0.000000
7    5986.823730    5959.808838 -11991.114502  5986.823730   62.952393  5959.808838        0.0  27.014893       -8.922607
8    6048.776123    5995.746338 -11991.114502  6048.776123   88.967285  5995.746338        0.0  53.029785      -46.970215
high_util=False, low_delay=True, ramp_up=False, ramp_down=False.[0m
[07/20 18:07:38]  --------------------------------------------------------------------------------
[07/20 18:07:38]  Iteration: 180 (36 solution, 143 counterexamples)
[07/20 18:07:44]  Generator returned sat in 2.910177 secs.
[07/20 18:07:44]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 18:07:44]  Improved gap from 329/8192 to 35.9375
[07/20 18:07:45]  Improved number of small numbers from 60 to 62 out of a max of 101
[07/20 18:07:45]  Verifer returned sat in 1.366975 secs.
[07/20 18:07:45]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5649.358398    5540.681746 -12322.043213  5649.358398    0.082031  5540.681746        0.0  108.676652       58.837297
1    5686.608455    5654.583358 -12322.042969  5686.608455  145.926709  5654.583358        0.0   32.025098       -3.912402
2    5744.887069    5696.520858 -12276.489502  5744.887069   90.303711  5696.520858        0.0   48.366211       -0.080322
3    5809.672713    5744.967391 -12241.194824  5809.672713  113.151855  5744.967391        0.0   64.705322        0.000000
4    5847.610213    5809.672713 -12179.132324  5847.610213  102.642822  5809.672713        0.0   37.937500        0.000000
5    5887.717391    5847.610213 -12119.239502  5887.717391   78.044678  5847.610213        0.0   40.107178        0.000000
6    5923.654891    5887.717391 -12055.177002  5923.654891   76.044678  5887.717391        0.0   35.937500        0.000000
7    5959.592391    5923.654891 -11991.114502  5959.592391   71.875000  5923.654891        0.0   35.937500        0.000000
8    5981.145980    5959.592391 -11991.114502  5981.145980   57.491089  5959.592391        0.0   21.553589      -78.446411
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:07:46]  --------------------------------------------------------------------------------
[07/20 18:07:46]  Iteration: 181 (36 solution, 144 counterexamples)
[07/20 18:07:54]  Generator returned sat in 5.217315 secs.
[07/20 18:07:54]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/20 18:07:55]  Improved gap from 201769/16384 to 29.6875
[07/20 18:07:56]  Improved number of small numbers from 64 to 101 out of a max of 101
[07/20 18:07:56]  Verifer returned sat in 1.451825 secs.
[07/20 18:07:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    2638.304443    2538.384277 -12128.694580  2638.304443    0.081787  2538.384277        0.0   99.920166       99.920166
1    2738.384277    2638.384277 -12128.694580  2738.384277  200.000000  2638.384277        0.0  100.000000      100.000000
2    2738.384277    2713.884277 -12128.694580  2738.384277   99.999756  2713.884277        0.0   24.500000        0.000000
3    3028.929199    2738.384521 -12128.694580  3028.929199  315.044922  2738.384521        0.0  290.544678      190.544922
4    3028.929199    2938.384277 -12128.694580  3028.929199  158.522461  2938.384277        0.0   90.544922       90.544922
5    3028.929199    2938.384277 -12119.239502  3028.929199   80.261230  2938.384277        0.0   90.544922        0.000000
6    3051.134277    3028.929199 -12048.927246  3051.134277  112.750000  3028.929199        0.0   22.205078       -7.482666
7    3086.304199    3058.616943 -11978.614746  3086.304199   57.375000  3058.616943        0.0   27.687256       -2.000244
8    3088.304443    3088.304443 -11978.614502  3088.304443   29.687500  3088.304443        0.0    0.000000      -99.999756
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:07:56]  --------------------------------------------------------------------------------
[07/20 18:07:56]  Iteration: 182 (36 solution, 145 counterexamples)
[07/20 18:08:07]  Generator returned sat in 7.546428 secs.
[07/20 18:08:07]  Candidate solution: 
[1m[94mif(qbound[t][5]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 18:08:08]  Improved gap from 327/8192 to 15.625
[07/20 18:08:09]  Improved number of small numbers from 51 to 101 out of a max of 101
[07/20 18:08:09]  Verifer returned sat in 1.563956 secs.
[07/20 18:08:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3086.917725    2971.292969 -12405.864258  3086.917725    0.081543  2971.292969        0.0  115.624756       15.625000
1    3086.917725    3071.292725 -12321.489502  3086.917725    0.040039  3071.292725        0.0   15.625000       -0.000244
2    3493.957764    3086.917969 -12321.489502  3493.957764  422.665039  3086.917969        0.0  407.039795      307.039795
3    3493.957764    3286.917725 -12321.489502  3493.957764  407.000000  3286.917725        0.0  207.040039      207.039795
4    3493.957764    3386.917725 -12321.489502  3493.957764  205.000000  3386.917725        0.0  107.040039      107.039795
5    3493.957764    3452.127930 -12321.489502  3493.957764  104.000000  3452.127930        0.0   41.829834        7.039795
6    3505.627930    3505.627930 -12255.824463  3505.627930   53.500000  3505.627930        0.0    0.000000      -15.625000
7    3533.877930    3521.252930 -12171.449463  3533.877930   28.250000  3521.252930        0.0   12.625000       -3.000000
8    3536.877930    3536.877930 -12171.449463  3536.877930   15.625000  3536.877930        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:08:09]  --------------------------------------------------------------------------------
[07/20 18:08:09]  Iteration: 183 (36 solution, 146 counterexamples)
[07/20 18:08:25]  Generator returned sat in 12.937611 secs.
[07/20 18:08:25]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 18:08:26]  Improved gap from 327/8192 to 35.9375
[07/20 18:08:27]  Improved number of small numbers from 46 to 54 out of a max of 101
[07/20 18:08:27]  Verifer returned sat in 1.362223 secs.
[07/20 18:08:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3435.152832    3327.300181 -12669.764160  3435.152832    0.081299  3327.300181        0.0  107.852651       99.960205
1    3443.492930    3435.192515 -12669.764160  3443.492930  116.192749  3435.192515        0.0    8.300415        8.300303
2    3479.470347    3443.532847 -12614.041880  3479.470347   44.277832  3443.532847        0.0   35.937500        0.000000
3    3515.407847    3479.470347 -12549.979380  3515.407847   71.875000  3479.470347        0.0   35.937500        0.000000
4    3557.555430    3515.407847 -12492.126963  3557.555430   78.085083  3515.407847        0.0   42.147583        0.000000
5    3557.555430    3557.555430 -12428.064463  3557.555430   42.107666  3557.555430        0.0    0.000000      -35.937500
6    3615.066721    3593.492930 -12364.001963  3615.066721   57.511292  3593.492930        0.0   21.573792      -14.363708
7    3651.004221    3629.430430 -12299.939697  3651.004221   57.511292  3629.430430        0.0   21.573792      -14.363943
8    3686.941721    3665.368164 -12299.939453  3686.941721   57.511292  3665.368164        0.0   21.573557      -78.426199
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:08:27]  --------------------------------------------------------------------------------
[07/20 18:08:27]  Iteration: 184 (36 solution, 147 counterexamples)
[07/20 18:08:35]  Generator returned sat in 4.814082 secs.
[07/20 18:08:35]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 18:08:38]  Improved gap from 327/8192 to 35.9375
[07/20 18:08:40]  Improved number of small numbers from 43 to 52 out of a max of 101
[07/20 18:08:40]  Verifer returned sat in 4.071218 secs.
[07/20 18:08:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0    3490.625488    3426.602761 -12929.105022  3490.625488    0.081299  3426.602761        0.0  64.022727       64.022727
1    3562.540261    3490.665261 -12929.105022  3562.540261  135.937500  3490.665261        0.0  71.875000       35.937500
2    3562.540261    3526.602761 -12865.042522  3562.540261    0.039795  3526.602761        0.0  35.937500        0.000000
3    3607.962527    3562.540261 -12838.253418  3607.962527   81.359766  3562.540261        0.0  45.422266      -27.788631
4    3671.688894    3635.751394 -12774.191154  3671.688894  109.148633  3635.751394        0.0  35.937500        0.000000
5    3709.294461    3671.688894 -12711.796721  3709.294461   73.543066  3671.688894        0.0  37.605566        0.000000
6    3745.231961    3709.294461 -12647.734221  3745.231961   73.543066  3709.294461        0.0  35.937500        0.000000
7    3783.671560    3745.231961 -12586.173828  3783.671560   74.377100  3745.231961        0.0  38.439600       -0.000008
8    3837.660794    3783.711670 -12586.173584  3837.660794   92.428833  3783.711670        0.0  53.949124      -46.010530
high_util=False, low_delay=True, ramp_up=False, ramp_down=False.[0m
[07/20 18:08:40]  --------------------------------------------------------------------------------
[07/20 18:08:40]  Iteration: 185 (36 solution, 148 counterexamples)
[07/20 18:08:53]  Generator returned sat in 10.119225 secs.
[07/20 18:08:54]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 18:08:54]  Improved gap from 163/2048 to 23.4375
[07/20 18:08:54]  Improved number of small numbers from 97 to 101 out of a max of 101
[07/20 18:08:54]  Verifer returned sat in 0.406892 secs.
[07/20 18:08:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3562.540039    3539.102539 -12815.861328  3562.540039    0.081299  3539.102539        0.0   23.437500        0.000000
1    3562.540039    3562.540039 -12739.298828  3562.540039    0.039795  3562.540039        0.0    0.000000      -23.437500
2    3882.892334    3592.227539 -12739.298828  3882.892334  320.352295  3592.227539        0.0  290.664795      196.914795
3    3882.931885    3785.977539 -12739.298828  3882.931885  290.704346  3785.977539        0.0   96.954346       96.954346
4    3909.415039    3882.892090 -12739.298828  3909.415039  123.437500  3882.892090        0.0   26.522949       23.437500
5    3909.415039    3885.977539 -12662.736328  3909.415039    1.500000  3885.977539        0.0   23.437500        0.000000
6    4032.852539    3909.415039 -12662.736328  4032.852539  146.875000  3909.415039        0.0  123.437500       23.437500
7    4032.852539    4009.415039 -12586.173828  4032.852539    1.500000  4009.415039        0.0   23.437500        0.000000
8    4072.676514    4032.852539 -12586.173828  4072.676514   63.261475  4032.852539        0.0   39.823975      -60.176025
high_util=False, low_delay=True, ramp_up=False, ramp_down=False.[0m
[07/20 18:08:54]  --------------------------------------------------------------------------------
[07/20 18:08:54]  Iteration: 186 (36 solution, 149 counterexamples)
[07/20 18:09:02]  Generator returned sat in 3.994912 secs.
[07/20 18:09:02]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 18:09:02]  Improved gap from 325/16384 to 35.9375
[07/20 18:09:03]  Improved number of small numbers from 44 to 51 out of a max of 101
[07/20 18:09:03]  Verifer returned sat in 1.335628 secs.
[07/20 18:09:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3240.803955    3107.145203 -12460.466309  3240.803955    0.081299  3107.145203        0.0  133.658752       33.658936
1    3276.781067    3240.843567 -12430.102356  3276.781067  169.635864  3240.843567        0.0   35.937500        0.000000
2    3276.781067    3276.781067 -12366.040039  3276.781067    0.039551  3276.781067        0.0    0.000000      -35.937683
3    3389.014221    3318.349548 -12342.335510  3389.014221  112.233154  3318.349548        0.0   70.664673        0.000000
4    3424.951721    3389.014221 -12278.273010  3424.951721  106.602173  3389.014221        0.0   35.937500        0.000000
5    3464.099548    3424.951721 -12217.420837  3464.099548   75.085327  3424.951721        0.0   39.147827        0.000000
6    3500.037048    3464.099548 -12153.358337  3500.037048   75.085327  3464.099548        0.0   35.937500        0.000000
7    3537.974548    3500.037048 -12091.295837  3537.974548   73.875000  3500.037048        0.0   37.937500        0.000000
8    3556.548462    3537.974548 -12091.295654  3556.548462   56.511414  3537.974548        0.0   18.573914      -81.425903
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:09:04]  --------------------------------------------------------------------------------
[07/20 18:09:04]  Iteration: 187 (36 solution, 150 counterexamples)
[07/20 18:09:11]  Generator returned sat in 4.214180 secs.
[07/20 18:09:11]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 18:09:12]  Improved gap from 0 to 35.9375
[07/20 18:09:13]  Improved number of small numbers from 42 to 50 out of a max of 101
[07/20 18:09:13]  Verifer returned sat in 1.445143 secs.
[07/20 18:09:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3155.929688    3049.998352 -12310.370117  3155.929688    0.081055  3049.998352        0.0  105.931335       98.880859
1    3156.009216    3155.969543 -12310.370117  3156.009216  106.010864  3155.969543        0.0    0.039673       -1.039612
2    3192.946716    3157.048889 -12246.307678  3192.946716   36.977173  3157.048889        0.0   35.897827       -0.039673
3    3193.026062    3192.986389 -12182.245178  3193.026062   35.977173  3192.986389        0.0    0.039673      -35.897827
4    3265.980408    3228.923889 -12119.301697  3265.980408   72.994019  3228.923889        0.0   37.056519        0.000000
5    3301.878235    3265.980408 -12055.239197  3301.878235   72.954346  3265.980408        0.0   35.897827       -0.039673
6    3321.946167    3301.917908 -11991.176697  3321.946167   55.965759  3301.917908        0.0   20.028259      -15.909241
7    3357.883667    3337.855408 -11927.114258  3357.883667   55.965759  3337.855408        0.0   20.028259      -15.909302
8    3393.821167    3373.792969 -11927.114014  3393.821167   55.965759  3373.792969        0.0   20.028198      -79.971558
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:09:13]  --------------------------------------------------------------------------------
[07/20 18:09:13]  Iteration: 188 (36 solution, 151 counterexamples)
[07/20 18:09:20]  Generator returned sat in 3.120057 secs.
[07/20 18:09:20]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 18:09:21]  Improved gap from 325/8192 to 0
[07/20 18:09:21]  Improved number of small numbers from 62 to 101 out of a max of 101
[07/20 18:09:21]  Verifer returned sat in 1.150701 secs.
[07/20 18:09:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4308.717285    4308.707764 -12298.015137  4308.717285    0.081055  4308.707764        0.0    0.009521        0.009521
1    4308.737305    4308.727539 -12298.014893  4308.737305    0.029541  4308.727539        0.0    0.009766      -99.970215
2    4410.177979    4408.707520 -12199.495117  4410.177979  101.450439  4408.707520        0.0    1.470459       -0.009766
3    4510.187744    4410.187744 -12199.495117  4510.187744  101.480225  4410.187744        0.0  100.000000        0.000000
4    4511.667725    4510.187744 -12100.975342  4511.667725  101.479980  4510.187744        0.0    1.479980       -0.000244
5    4511.687744    4511.677734 -12002.475342  4511.687744    1.500000  4511.677734        0.0    0.010010       -1.480225
6    4513.177734    4513.167969 -11902.495117  4513.177734    1.500000  4513.167969        0.0    0.009766       -0.010010
7    4514.667969    4513.187744 -11803.975342  4514.667969    1.500000  4513.187744        0.0    1.480225        0.000000
8    4516.187744    4514.667969 -11803.975098  4516.187744    3.000000  4514.667969        0.0    1.519775      -98.479980
high_util=False, low_delay=True, ramp_up=False, ramp_down=False.[0m
[07/20 18:09:22]  --------------------------------------------------------------------------------
[07/20 18:09:22]  Iteration: 189 (36 solution, 152 counterexamples)
[07/20 18:09:30]  Generator returned sat in 4.643183 secs.
[07/20 18:09:30]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 18:09:30]  Improved gap from 1/700 to 23.4375
[07/20 18:09:30]  Improved number of small numbers from 59 to 101 out of a max of 101
[07/20 18:09:30]  Verifer returned sat in 0.747580 secs.
[07/20 18:09:30]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t   cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0    3970.775146    3941.081787 -12298.015381  3970.775146   0.081055  3941.081787        0.0  29.693359       29.693115
1    3994.252441    3970.814941 -12251.185791  3994.252441  53.170654  3970.814941        0.0  23.437500        0.000000
2    3994.292236    3994.252441 -12174.623291  3994.292236  23.477295  3994.252441        0.0   0.039795      -23.397705
3    4041.127441    4017.689941 -12098.060791  4041.127441  46.875000  4017.689941        0.0  23.437500        0.000000
4    4094.298096    4041.127441 -12051.231445  4094.298096  76.608154  4041.127441        0.0  53.170654        0.000000
5    4111.439941    4094.298096 -11974.668945  4111.439941  70.312500  4094.298096        0.0  17.141846       -6.295654
6    4166.110596    4117.735840 -11924.583496  4166.110596  71.812500  4117.735840        0.0  48.374756       -1.539551
7    4191.048340    4167.650146 -11848.021240  4191.048340  73.312500  4167.650146        0.0  23.398193       -0.039551
8    4242.462646    4191.087891 -11848.021240  4242.462646  74.812500  4191.087891        0.0  51.374756      -48.625244
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:09:31]  --------------------------------------------------------------------------------
[07/20 18:09:31]  Iteration: 190 (36 solution, 153 counterexamples)
[07/20 18:09:37]  Generator returned sat in 3.159296 secs.
[07/20 18:09:38]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 18:09:39]  Improved gap from 0 to 25.0
[07/20 18:09:39]  Improved number of small numbers from 64 to 101 out of a max of 101
[07/20 18:09:39]  Verifer returned sat in 1.471423 secs.
[07/20 18:09:39]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t   cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0    4145.555908    4123.595703 -13581.304688  4145.555908   0.081055  4123.595703        0.0  21.960205       21.960205
1    4170.555908    4145.595459 -13528.304443  4170.555908  46.960205  4145.595459        0.0  24.960449       -0.039551
2    4170.635010    4170.595703 -13453.304688  4170.635010  25.039551  4170.595703        0.0   0.039307      -24.960693
3    4242.595459    4195.595703 -13400.304443  4242.595459  71.999756  4195.595703        0.0  46.999756        0.000000
4    4267.595703    4242.595459 -13325.304688  4267.595703  72.000000  4242.595459        0.0  25.000244        0.000000
5    4339.595459    4267.595703 -13297.304443  4339.595459  97.000000  4267.595703        0.0  71.999756        0.000000
6    4364.595703    4339.595459 -13222.304688  4364.595703  97.000000  4339.595459        0.0  25.000244        0.000000
7    4389.595459    4365.635010 -13148.343994  4389.595459  50.000000  4365.635010        0.0  23.960449       -1.039551
8    4392.135010    4390.635254 -13148.343994  4392.135010  26.500000  4390.635254        0.0   1.499756      -98.500000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:09:40]  --------------------------------------------------------------------------------
[07/20 18:09:40]  Iteration: 191 (36 solution, 154 counterexamples)
[07/20 18:09:48]  Generator returned sat in 5.090321 secs.
[07/20 18:09:48]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 18:09:49]  Verifer returned unsat in 0.783438 secs.
[07/20 18:09:49]  Proved solution: 
[1m[92mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 18:09:49]  --------------------------------------------------------------------------------
[07/20 18:09:49]  Iteration: 192 (37 solution, 154 counterexamples)
[07/20 18:09:56]  Generator returned sat in 3.170674 secs.
[07/20 18:09:56]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/20 18:09:57]  Improved gap from 0 to 21.875
[07/20 18:09:57]  Improved number of small numbers from 64 to 101 out of a max of 101
[07/20 18:09:57]  Verifer returned sat in 1.549701 secs.
[07/20 18:09:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t   cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0    4672.092285    4644.296143 -13573.087402  4672.092285   0.080811  4644.296143        0.0  27.796143       27.796143
1    4694.046143    4672.171143 -13522.837402  4694.046143  49.750000  4672.171143        0.0  21.875000        0.000000
2    4720.217285    4694.046143 -13449.008545  4720.217285  48.046143  4694.046143        0.0  26.171143        0.000000
3    4742.092285    4720.217285 -13370.883545  4742.092285  48.046143  4720.217285        0.0  21.875000        0.000000
4    4796.138428    4742.092285 -13324.929688  4796.138428  75.921143  4742.092285        0.0  54.046143        0.000000
5    4812.013428    4796.138428 -13246.804932  4812.013428  69.921143  4796.138428        0.0  15.875000       -6.000244
6    4868.059570    4818.013672 -13196.851074  4868.059570  71.921143  4818.013672        0.0  50.045898       -0.000244
7    4891.934814    4868.138672 -13120.726074  4891.934814  73.921143  4868.138672        0.0  23.796143        0.000000
8    4944.059814    4892.013672 -13120.726074  4944.059814  75.921143  4892.013672        0.0  52.046143      -47.875000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:09:58]  --------------------------------------------------------------------------------
[07/20 18:09:58]  Iteration: 193 (37 solution, 155 counterexamples)
[07/20 18:10:05]  Generator returned sat in 3.328037 secs.
[07/20 18:10:05]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/20 18:10:06]  Improved gap from 323/4096 to 1.5625
[07/20 18:10:06]  Improved number of small numbers from 92 to 101 out of a max of 101
[07/20 18:10:06]  Verifer returned sat in 0.928654 secs.
[07/20 18:10:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5101.782715    5098.657715 -13543.680176  5101.782715    0.080566  5098.657715        0.0    3.125000        3.125000
1    5101.782715    5098.657715 -13446.844482  5101.782715    0.039551  5098.657715        0.0    3.125000       -0.039307
2    5101.861572    5101.822021 -13395.242432  5101.861572    3.203857  5101.822021        0.0    0.039551      -48.358398
3    5200.220215    5150.220215 -13345.242676  5200.220215   98.398193  5150.220215        0.0   50.000000        0.000000
4    5201.782715    5200.220215 -13246.805176  5201.782715   51.562500  5200.220215        0.0    1.562500        0.000000
5    5301.782715    5201.782715 -13246.805176  5301.782715  101.562500  5201.782715        0.0  100.000000        0.000000
6    5301.782715    5301.782715 -13148.367676  5301.782715   99.960693  5301.782715        0.0    0.000000       -1.562500
7    5303.782715    5303.345215 -13050.367432  5303.782715    2.000000  5303.345215        0.0    0.437500       -1.562256
8    5305.345215    5305.344971 -13050.367432  5305.345215    2.000000  5305.344971        0.0    0.000244      -99.999756
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:10:06]  --------------------------------------------------------------------------------
[07/20 18:10:06]  Iteration: 194 (37 solution, 156 counterexamples)
[07/20 18:10:21]  Generator returned sat in 11.542160 secs.
[07/20 18:10:21]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:10:22]  Verifer returned unsat in 0.329508 secs.
[07/20 18:10:22]  Proved solution: 
[1m[92mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:10:22]  --------------------------------------------------------------------------------
[07/20 18:10:22]  Iteration: 195 (38 solution, 156 counterexamples)
[07/20 18:10:35]  Generator returned sat in 9.432439 secs.
[07/20 18:10:35]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:10:40]  Improved gap from 161/8192 to 1.5625
[07/20 18:10:40]  Improved number of small numbers from 58 to 101 out of a max of 101
[07/20 18:10:40]  Verifer returned sat in 5.636559 secs.
[07/20 18:10:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4093.724854    3895.326660 -12440.349121  4093.724854    0.080566  3895.326660        0.0  198.398193       98.398193
1    4095.326660    4093.764404 -12440.349121  4095.326660  200.000000  4093.764404        0.0    1.562256        0.000000
2    4100.053467    4098.490967 -12345.075928  4100.053467    6.289062  4098.490967        0.0    1.562500        0.000000
3    4100.053467    4100.053467 -12246.638428  4100.053467    1.523193  4100.053467        0.0    0.000000       -1.562500
4    4203.178467    4131.100830 -12246.638428  4203.178467  103.125000  4131.100830        0.0   72.077637        1.562500
5    4203.178467    4201.615967 -12148.200928  4203.178467   70.230713  4201.615967        0.0    1.562500        0.000000
6    4254.178467    4203.178467 -12099.240234  4254.178467   52.562500  4203.178467        0.0   51.000000       -0.039307
7    4281.022217    4254.218018 -12026.044922  4281.022217   77.843750  4254.218018        0.0   26.804199       -0.000244
8    4354.698486    4281.061768 -12026.044922  4354.698486  100.480469  4281.061768        0.0   73.636719      -26.323975
high_util=False, low_delay=True, ramp_up=False, ramp_down=False.[0m
[07/20 18:10:41]  --------------------------------------------------------------------------------
[07/20 18:10:41]  Iteration: 196 (38 solution, 157 counterexamples)
[07/20 18:10:49]  Generator returned sat in 4.671193 secs.
[07/20 18:10:49]  Candidate solution: 
[1m[94mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:10:50]  Improved number of small numbers from 47 to 100 out of a max of 100
[07/20 18:10:50]  Verifer returned sat in 0.748741 secs.
[07/20 18:10:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4497.857910    4385.697021 -12930.719238  4497.857910    0.080322  4385.697021        0.0  112.160889       12.161133
1    4685.657471    4497.897217 -12930.719238  4685.657471  299.960449  4497.897217        0.0  187.760254       99.960693
2    4685.657471    4585.696777 -12930.719238  4685.657471    0.039307  4585.696777        0.0   99.960693       -0.039307
3    5110.647461    4685.697021 -12930.719238  5110.647461  524.950684  4685.697021        0.0  424.950439      324.950684
4    5110.647461    4885.579102 -12930.719238  5110.647461  412.475342  4885.579102        0.0  225.068359      224.950684
5    5285.657715    4985.696777 -12930.719238  5285.657715  400.078613  4985.696777        0.0  299.960938      299.960938
6    5385.736084    4985.696777 -12930.719238  5385.736084  400.039307  4985.696777        0.0  400.039307      300.039307
7    5385.736084    5185.696777 -12930.719238  5385.736084  350.019531  5185.696777        0.0  200.039307      200.039307
8    5510.765381    5285.696777 -12930.719238  5510.765381  325.068604  5285.696777        0.0  225.068604      225.068604
high_util=True, low_delay=False, ramp_up=False, ramp_down=False.[0m
[07/20 18:10:50]  --------------------------------------------------------------------------------
[07/20 18:10:50]  Iteration: 197 (38 solution, 158 counterexamples)
[07/20 18:10:59]  Generator returned sat in 4.653986 secs.
[07/20 18:10:59]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:10:59]  Improved gap from 0 to 23.4375
[07/20 18:10:59]  Improved number of small numbers from 101 to 101 out of a max of 101
[07/20 18:10:59]  Verifer returned sat in 0.437704 secs.
[07/20 18:10:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4537.180664    4537.141357 -12982.242432  4537.180664    0.080322  4537.141357        0.0    0.039307       -0.039307
1    4560.657471    4537.219971 -12905.679932  4560.657471   23.516113  4537.219971        0.0   23.437500        0.000000
2    4660.657471    4660.657471 -12905.679932  4660.657471  123.437500  4660.657471        0.0    0.000000        0.000000
3    4984.094971    4660.696777 -12905.679932  4984.094971  323.437500  4660.696777        0.0  323.398193      223.437500
4    4984.094971    4860.657471 -12905.679932  4984.094971  123.555420  4860.657471        0.0  123.437500      123.437500
5    4984.094971    4960.618164 -12905.679932  4984.094971    1.000000  4960.618164        0.0   23.476807       23.437500
6    4984.094971    4960.657471 -12829.117432  4984.094971    1.000000  4960.657471        0.0   23.437500        0.000000
7    4984.094971    4984.094971 -12752.554932  4984.094971    1.000000  4984.094971        0.0    0.000000      -23.437500
8    5107.532471    5007.532471 -12752.554932  5107.532471  123.437500  5007.532471        0.0  100.000000        0.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:11:00]  --------------------------------------------------------------------------------
[07/20 18:11:00]  Iteration: 198 (38 solution, 159 counterexamples)
[07/20 18:11:08]  Generator returned sat in 4.436674 secs.
[07/20 18:11:08]  Candidate solution: 
[1m[94mif(qbound[t][8]):
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:11:08]  Improved gap from 161/4096 to 23.4375
[07/20 18:11:09]  Improved number of small numbers from 99 to 99 out of a max of 101
[07/20 18:11:09]  Verifer returned sat in 0.618164 secs.
[07/20 18:11:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4384.094971    3960.657471 -12905.680176  4384.094971    0.080078  3960.657471        0.0  423.437500        423.4375
1    4384.094971    3960.657471 -12905.680176  4384.094971  423.437500  3960.657471        0.0  423.437500        323.4375
2    4384.094971    4060.657471 -12905.680176  4384.094971  423.437500  4060.657471        0.0  323.437500        223.4375
3    4384.094971    4160.657471 -12905.680176  4384.094971   95.907227  4160.657471        0.0  223.437500        123.4375
4    4384.094971    4358.578857 -12905.680176  4384.094971   48.953613  4358.578857        0.0   25.516113         23.4375
5    4384.094971    4360.657471 -12829.117676  4384.094971   25.476807  4360.657471        0.0   23.437500          0.0000
6    4384.094971    4384.094971 -12752.555176  4384.094971   13.738403  4384.094971        0.0    0.000000        -23.4375
7    4607.532471    4407.532471 -12752.555176  4607.532471  223.437500  4407.532471        0.0  200.000000        100.0000
8    4607.532471    4508.539551 -12752.555176  4607.532471   48.953613  4508.539551        0.0   98.992920          0.0000
high_util=False, low_delay=True, ramp_up=False, ramp_down=False.[0m
[07/20 18:11:09]  --------------------------------------------------------------------------------
[07/20 18:11:09]  Iteration: 199 (38 solution, 160 counterexamples)
[07/20 18:11:21]  Generator returned sat in 8.491014 secs.
[07/20 18:11:21]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 18:11:22]  Improved gap from 321/8192 to 14.0625
[07/20 18:11:22]  Improved number of small numbers from 50 to 101 out of a max of 101
[07/20 18:11:22]  Verifer returned sat in 1.035702 secs.
[07/20 18:11:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     997.848145     997.848145 -12861.055420   997.848145    0.079590   997.848145        0.0    0.000000       -0.019531
1     997.887451     997.867676 -12861.055420   997.887451    0.039307   997.867676        0.0    0.019775      -99.980225
2    1397.848145    1106.769775 -12861.055420  1397.848145  399.980469  1106.769775        0.0  291.078369      199.980469
3    1497.847900    1297.867676 -12861.055420  1497.847900  391.078125  1297.867676        0.0  199.980225      199.980225
4    1497.847900    1397.867676 -12861.055420  1497.847900  197.039062  1397.867676        0.0   99.980225       99.980225
5    1497.887207    1397.867676 -12861.055420  1497.887207  100.019531  1397.867676        0.0  100.019531        0.019531
6    1497.887207    1497.867676 -12775.117920  1497.887207   51.509766  1497.867676        0.0    0.019531      -14.042969
7    1525.122559    1511.930176 -12690.245361  1525.122559   27.254883  1511.930176        0.0   13.192383       -1.935059
8    1527.057617    1527.057617 -12690.245361  1527.057617   15.127441  1527.057617        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:11:23]  --------------------------------------------------------------------------------
[07/20 18:11:23]  Iteration: 200 (38 solution, 161 counterexamples)
[07/20 18:11:50]  Generator returned sat in 23.681333 secs.
[07/20 18:11:50]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/20 18:11:52]  Improved gap from 0 to 37.5
[07/20 18:11:52]  Improved number of small numbers from 55 to 101 out of a max of 101
[07/20 18:11:52]  Verifer returned sat in 2.074111 secs.
[07/20 18:11:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1246.926270    1243.406982 -13129.113770  1246.926270    0.079346  1243.406982        0.0    3.519287        0.019531
1    1246.926270    1246.906738 -13066.613770  1246.926270    3.499756  1246.906738        0.0    0.019531      -37.480469
2    1546.946045    1384.406738 -13066.613770  1546.946045  300.039307  1384.406738        0.0  162.539307      162.539307
3    1546.946045    1384.406982 -13066.613770  1546.946045    0.019531  1384.406982        0.0  162.539062       62.539307
4    1546.946045    1546.926514 -13066.613770  1546.946045   72.000000  1546.926514        0.0    0.019531      -37.460693
5    1619.926514    1584.406738 -13004.114014  1619.926514   73.000000  1584.406738        0.0   35.519775       -1.980469
6    1658.406738    1621.906982 -12941.614014  1658.406738   74.000000  1621.906982        0.0   36.499756       -1.000244
7    1696.906982    1659.406982 -12879.114014  1696.906982   75.000000  1659.406982        0.0   37.500000        0.000000
8    1717.147217    1696.906982 -12879.114014  1717.147217   57.740234  1696.906982        0.0   20.240234      -79.759766
high_util=False, low_delay=True, ramp_up=False, ramp_down=False.[0m
[07/20 18:11:53]  --------------------------------------------------------------------------------
[07/20 18:11:53]  Iteration: 201 (38 solution, 162 counterexamples)
[07/20 18:12:01]  Generator returned sat in 4.616478 secs.
[07/20 18:12:01]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/20 18:12:03]  Improved gap from 0 to 35.9375
[07/20 18:12:03]  Improved number of small numbers from 56 to 101 out of a max of 101
[07/20 18:12:03]  Verifer returned sat in 1.925581 secs.
[07/20 18:12:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    2083.635986    1948.964111 -13865.921387  2083.635986    0.079102  1948.964111        0.0  134.671875       99.921875
1    2119.573486    2083.714111 -13865.921387  2119.573486  170.609375  2083.714111        0.0   35.859375       35.859375
2    2155.510986    2119.651611 -13837.796387  2155.510986   71.796875  2119.651611        0.0   35.859375       -0.078125
3    2224.464111    2155.589111 -13806.671387  2224.464111  104.812500  2155.589111        0.0   68.875000        0.000000
4    2260.401611    2224.464111 -13742.608887  2260.401611  104.812500  2224.464111        0.0   35.937500        0.000000
5    2296.339111    2260.401611 -13678.546387  2296.339111   71.875000  2260.401611        0.0   35.937500        0.000000
6    2332.276611    2296.339111 -13614.483887  2332.276611   71.875000  2296.339111        0.0   35.937500        0.000000
7    2368.214111    2332.276611 -13550.421387  2368.214111   71.875000  2332.276611        0.0   35.937500        0.000000
8    2423.120361    2374.385986 -13550.421387  2423.120361   90.843750  2374.385986        0.0   48.734375      -45.093750
high_util=False, low_delay=True, ramp_up=False, ramp_down=False.[0m
[07/20 18:12:04]  --------------------------------------------------------------------------------
[07/20 18:12:04]  Iteration: 202 (38 solution, 163 counterexamples)
[07/20 18:12:17]  Generator returned sat in 10.236006 secs.
[07/20 18:12:18]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/20 18:12:19]  Improved gap from 1 to 35.9375
[07/20 18:12:19]  Improved number of small numbers from 64 to 101 out of a max of 101
[07/20 18:12:19]  Verifer returned sat in 1.182729 secs.
[07/20 18:12:19]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5369.476074    5233.053955 -13925.921387  5369.476074    0.078857  5233.053955        0.0  136.422119       36.422119
1    5405.851074    5369.553955 -13898.796387  5405.851074  172.797119  5369.553955        0.0   36.297119       -0.077881
2    5442.226074    5405.928955 -13835.171387  5442.226074   72.672119  5405.928955        0.0   36.297119       -0.077881
3    5512.053955    5442.303955 -13804.921387  5512.053955  106.125000  5442.303955        0.0   69.750000        0.000000
4    5548.428955    5512.053955 -13741.296387  5548.428955  106.125000  5512.053955        0.0   36.375000        0.000000
5    5584.803955    5548.428955 -13677.671387  5584.803955   72.750000  5548.428955        0.0   36.375000        0.000000
6    5621.178955    5584.803955 -13614.046387  5621.178955   72.750000  5584.803955        0.0   36.375000        0.000000
7    5657.553955    5621.178955 -13550.421387  5657.553955   72.750000  5621.178955        0.0   36.375000        0.000000
8    5677.241455    5657.553955 -13550.421387  5677.241455   56.062500  5657.553955        0.0   19.687500      -80.312500
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:12:19]  --------------------------------------------------------------------------------
[07/20 18:12:19]  Iteration: 203 (38 solution, 164 counterexamples)
[07/20 18:12:29]  Generator returned sat in 5.705014 secs.
[07/20 18:12:29]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/20 18:12:30]  Improved gap from 1/2400 to 0
[07/20 18:12:30]  Improved number of small numbers from 58 to 101 out of a max of 101
[07/20 18:12:30]  Verifer returned sat in 0.974866 secs.
[07/20 18:12:30]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5884.802979    5784.804443 -13998.795410  5884.802979    0.078857  5784.804443        0.0   99.998535       -0.000244
1    5884.803955    5884.803467 -13898.796387  5884.803955   99.999512  5884.803467        0.0    0.000488       -0.000244
2    5884.804688    5884.804199 -13798.796875  5884.804688    0.001221  5884.804199        0.0    0.000488        0.000000
3    5884.805664    5884.805176 -13698.797852  5884.805664    0.001465  5884.805176        0.0    0.000488        0.000000
4    5984.805908    5884.805664 -13698.797852  5984.805908  100.000732  5884.805664        0.0  100.000244        0.000244
5    5984.805908    5984.805664 -13599.797119  5984.805908    0.010000  5984.805664        0.0    0.000244       -0.999023
6    5985.805664    5985.805176 -13499.797852  5985.805664    1.000000  5985.805176        0.0    0.000488        0.000000
7    5986.805176    5986.805176 -13400.797363  5986.805176    1.000000  5986.805176        0.0    0.000000        0.000000
8    5987.805176    5986.805176 -13400.797119  5987.805176    1.000000  5986.805176        0.0    1.000000      -98.999756
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:12:30]  --------------------------------------------------------------------------------
[07/20 18:12:30]  Iteration: 204 (38 solution, 165 counterexamples)
[07/20 18:12:39]  Generator returned sat in 5.386295 secs.
[07/20 18:12:40]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/20 18:12:40]  Improved gap from 0 to 35.9375
[07/20 18:12:41]  Improved number of small numbers from 42 to 47 out of a max of 101
[07/20 18:12:41]  Verifer returned sat in 1.750962 secs.
[07/20 18:12:41]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6996.782715    6843.984982 -15057.977051  6996.782715    0.078857  6843.984982        0.0  152.797733       52.797852
1    7033.032492    6996.860373 -15047.102539  7033.032492  189.047510  6996.860373        0.0   36.172119       -0.077860
2    7069.360373    7033.110373 -14983.352560  7069.360373   72.500000  7033.110373        0.0   36.250000        0.000000
3    7145.798068    7069.360373 -14959.790256  7145.798068  112.687695  7069.360373        0.0   76.437695        0.000000
4    7182.048068    7145.798068 -14896.040256  7182.048068  112.687695  7145.798068        0.0   36.250000        0.000000
5    7220.266916    7182.048068 -14834.259103  7220.266916   74.468848  7182.048068        0.0   38.218848        0.000000
6    7256.516916    7220.266916 -14770.509103  7256.516916   74.468848  7220.266916        0.0   36.250000        0.000000
7    7295.720187    7256.516916 -14709.712375  7295.720187   75.453271  7256.516916        0.0   39.203271        0.000000
8    7311.876340    7295.720187 -14709.712158  7311.876340   55.359424  7295.720187        0.0   16.156152      -83.843631
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:12:42]  --------------------------------------------------------------------------------
[07/20 18:12:42]  Iteration: 205 (38 solution, 166 counterexamples)
[07/20 18:13:04]  Generator returned sat in 18.842089 secs.
[07/20 18:13:04]  Candidate solution: 
[1m[94mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:13:05]  Improved gap from 0 to 23.4375
[07/20 18:13:05]  Improved number of small numbers from 56 to 101 out of a max of 101
[07/20 18:13:05]  Verifer returned sat in 0.570797 secs.
[07/20 18:13:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7133.018799    7133.017334 -14876.712402  7133.018799    0.078613  7133.017334        0.0    0.001465        0.001221
1    7156.457275    7133.019775 -14800.152100  7156.457275   23.439941  7133.019775        0.0   23.437500        0.000000
2    7579.894775    7156.458740 -14800.152100  7579.894775  446.875000  7156.458740        0.0  423.436035      323.437500
3    7579.894775    7256.457520 -14800.152100  7579.894775    0.001221  7256.457520        0.0  323.437256      223.437500
4    7579.894775    7456.457275 -14800.152100  7579.894775  123.440186  7456.457275        0.0  123.437500      123.437500
5    7579.894775    7556.456299 -14800.152100  7579.894775    0.010000  7556.456299        0.0   23.438477       23.437500
6    7579.894775    7556.457275 -14723.589600  7579.894775    0.010000  7556.457275        0.0   23.437500        0.000000
7    7579.894775    7579.894775 -14647.027344  7579.894775    0.010000  7579.894775        0.0    0.000000      -23.437744
8    7703.332275    7603.332520 -14647.027344  7703.332275  123.437500  7603.332520        0.0   99.999756       -0.000244
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:13:06]  --------------------------------------------------------------------------------
[07/20 18:13:06]  Iteration: 206 (38 solution, 167 counterexamples)
[07/20 18:13:23]  Generator returned sat in 13.516502 secs.
[07/20 18:13:23]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:13:23]  Improved gap from 0 to 35.9375
[07/20 18:13:24]  Improved number of small numbers from 46 to 57 out of a max of 101
[07/20 18:13:24]  Verifer returned sat in 1.254121 secs.
[07/20 18:13:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7093.224365    6930.879202 -14760.472656  7093.224365    0.078613  6930.879202        0.0  162.345164       76.446533
1    7116.816702    7093.263113 -14760.472656  7116.816702  185.937500  7093.263113        0.0   23.553589        0.038870
2    7116.816702    7116.778005 -14698.621582  7116.816702    0.038818  7116.778005        0.0    0.038696      -38.110056
3    7233.013113    7154.926809 -14676.707937  7233.013113  116.235107  7154.926809        0.0   78.086304        0.000000
4    7268.950613    7233.013113 -14612.645437  7268.950613  114.023804  7233.013113        0.0   35.937500        0.000000
5    7304.888113    7268.950613 -14548.582937  7304.888113   71.875000  7268.950613        0.0   35.937500        0.000000
6    7347.036917    7304.888113 -14490.731741  7347.036917   78.086304  7304.888113        0.0   42.148804        0.000000
7    7381.868765    7347.036917 -14426.669434  7381.868765   76.980652  7347.036917        0.0   34.831848       -1.105845
8    7461.060720    7382.974609 -14426.669434  7461.060720  114.023804  7382.974609        0.0   78.086111      -21.913889
high_util=False, low_delay=True, ramp_up=False, ramp_down=False.[0m
[07/20 18:13:25]  --------------------------------------------------------------------------------
[07/20 18:13:25]  Iteration: 207 (38 solution, 168 counterexamples)
[07/20 18:13:43]  Generator returned sat in 14.266341 secs.
[07/20 18:13:43]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 18:13:43]  Improved gap from 317/8192 to 0
[07/20 18:13:44]  Improved number of small numbers from 50 to 101 out of a max of 101
[07/20 18:13:44]  Verifer returned sat in 0.780280 secs.
[07/20 18:13:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7381.674805    7181.752197 -15139.499512  7381.674805    0.078613  7181.752197        0.0  199.922607       99.922607
1    7381.752197    7381.713623 -15139.499512  7381.752197  200.000000  7381.713623        0.0    0.038574        0.000000
2    7381.829834    7381.791016 -15039.577148  7381.829834    0.116211  7381.791016        0.0    0.038818        0.000000
3    7381.906982    7381.868164 -14939.654541  7381.906982    0.115967  7381.868164        0.0    0.038818       -0.000244
4    7382.368164    7382.329590 -14840.538086  7382.368164    0.500000  7382.329590        0.0    0.038574       -0.422607
5    7382.829590    7382.791016 -14740.615479  7382.829590    0.500000  7382.791016        0.0    0.038574       -0.038574
6    7383.291016    7382.868408 -14641.038330  7383.291016    0.500000  7382.868408        0.0    0.422607        0.000000
7    7383.368408    7383.329834 -14541.577148  7383.368408    0.500000  7383.329834        0.0    0.038574       -0.461426
8    7383.829834    7383.829834 -14541.577148  7383.829834    0.500000  7383.829834        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:13:44]  --------------------------------------------------------------------------------
[07/20 18:13:44]  Iteration: 208 (38 solution, 169 counterexamples)
[07/20 18:14:05]  Generator returned sat in 17.193189 secs.
[07/20 18:14:05]  Candidate solution: 
[1m[94mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/20 18:14:06]  Improved gap from 0 to 14.0625
[07/20 18:14:06]  Improved number of small numbers from 70 to 101 out of a max of 101
[07/20 18:14:06]  Verifer returned sat in 0.893764 secs.
[07/20 18:14:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6569.085286    6469.200928 -14326.948486  6569.085286    0.078613  6469.200928        0.0   99.884359       99.884359
1    6569.162354    6569.124023 -14326.948486  6569.162354   99.961426  6569.124023        0.0    0.038330       -0.038574
2    6669.200928    6569.200928 -14326.948486  6669.200928  100.076904  6569.200928        0.0  100.000000        0.000000
3    6957.200928    6669.239746 -14326.948486  6957.200928  388.000000  6669.239746        0.0  287.961182      188.000000
4    6957.200928    6858.739746 -14326.948486  6957.200928  195.000000  6858.739746        0.0   98.461182       88.000000
5    6957.239746    6907.066650 -14315.025391  6957.239746   98.500000  6907.066650        0.0   50.173096       -0.038086
6    6957.316650    6957.278076 -14229.088135  6957.316650   50.250000  6957.278076        0.0    0.038574      -14.023926
7    6983.403076    6971.340576 -14143.150635  6983.403076   26.125000  6971.340576        0.0   12.062500       -2.000000
8    6985.403076    6985.403076 -14143.150635  6985.403076   14.062500  6985.403076        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:14:07]  --------------------------------------------------------------------------------
[07/20 18:14:07]  Iteration: 209 (38 solution, 170 counterexamples)
[07/20 18:14:20]  Generator returned sat in 9.257942 secs.
[07/20 18:14:20]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/20 18:14:21]  Improved gap from 0 to 14.0625
[07/20 18:14:22]  Improved number of small numbers from 62 to 76 out of a max of 101
[07/20 18:14:22]  Verifer returned sat in 1.826493 secs.
[07/20 18:14:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6505.022705    6504.984619 -14412.885986  6505.022705    0.078369  6504.984619        0.0    0.038086       -0.038696
1    6519.085449    6505.061401 -14326.948486  6519.085449   14.100830  6505.061401        0.0   14.024048       -0.038452
2    6715.123901    6519.124023 -14326.948486  6715.123901  210.062500  6519.124023        0.0  195.999878       96.000000
3    6913.277832    6715.162354 -14326.948486  6913.277832  394.153809  6715.162354        0.0  198.115479      194.153931
4    6913.277832    6819.123901 -14326.948486  6913.277832  198.076904  6819.123901        0.0   94.153931       94.153931
5    6919.162354    6819.123901 -14326.948486  6919.162354  100.038452  6819.123901        0.0  100.038452        0.038452
6    6919.162354    6919.123901 -14241.010986  6919.162354   51.019226  6919.123901        0.0    0.038452      -14.024048
7    6945.633514    6933.186401 -14155.265625  6945.633514   26.509613  6933.186401        0.0   12.447113       -1.807526
8    6947.441208    6947.441162 -14155.265625  6947.441208   14.254807  6947.441162        0.0    0.000046      -99.999832
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:14:22]  --------------------------------------------------------------------------------
[07/20 18:14:22]  Iteration: 210 (38 solution, 171 counterexamples)
[07/20 18:14:41]  Generator returned sat in 15.451562 secs.
[07/20 18:14:42]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/20 18:14:42]  Improved gap from 16069/16384 to 37.5
[07/20 18:14:43]  Improved number of small numbers from 41 to 101 out of a max of 101
[07/20 18:14:43]  Verifer returned sat in 0.992931 secs.
[07/20 18:14:43]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6674.825928    6574.864502 -14482.689209  6674.825928    0.078125  6574.864502        0.0   99.961426       99.961426
1    6865.479980    6674.864502 -14482.689209  6865.479980  290.615479  6674.864502        0.0  190.615479      190.615479
2    6865.479980    6774.864502 -14482.689209  6865.479980    0.038574  6774.864502        0.0   90.615479       90.615479
3    6865.479980    6865.441406 -14482.689209  6865.479980   71.961426  6865.441406        0.0    0.038574       -9.384521
4    6938.402832    6938.364746 -14482.689209  6938.402832   72.961426  6938.364746        0.0    0.038086      -36.461670
5    7012.326172    6974.864502 -14420.189209  7012.326172   73.961426  6974.864502        0.0   37.461670       -0.038330
6    7049.825928    7012.364502 -14357.689209  7049.825928   74.961426  7012.364502        0.0   37.461426       -0.038574
7    7088.325928    7050.825928 -14296.150635  7088.325928   75.961426  7050.825928        0.0   37.500000        0.000000
8    7088.325928    7088.325928 -14296.150635  7088.325928    2.000000  7088.325928        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:14:43]  --------------------------------------------------------------------------------
[07/20 18:14:43]  Iteration: 211 (38 solution, 172 counterexamples)
[07/20 18:14:52]  Generator returned sat in 5.054268 secs.
[07/20 18:14:52]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/20 18:14:52]  Improved gap from 79/4096 to 100
[07/20 18:14:52]  Improved number of small numbers from 101 to 101 out of a max of 101
[07/20 18:14:52]  Verifer returned sat in 0.193708 secs.
[07/20 18:14:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6674.845215    6574.864502 -14482.689209  6674.845215    0.078125  6574.864502        0.0   99.980713       99.980713
1    6874.845215    6674.864502 -14482.689209  6874.845215  299.980713  6674.864502        0.0  199.980713      199.980713
2    6874.845215    6774.864502 -14482.689209  6874.845215    0.038574  6774.864502        0.0   99.980713       99.980713
3    6874.845215    6874.825928 -14482.689209  6874.845215   49.250000  6874.825928        0.0    0.019287       -0.019287
4    6974.325928    6874.864502 -14482.689209  6974.325928   99.500000  6874.864502        0.0   99.461426       -0.538574
5    7074.864502    7073.903076 -14482.689209  7074.864502  200.000000  7073.903076        0.0    0.961426        0.000000
6    7474.903076    7074.883789 -14482.689209  7474.903076  401.000000  7074.883789        0.0  400.019287      300.038574
7    7474.903076    7174.864502 -14482.689209  7474.903076    2.000000  7174.864502        0.0  300.038574      200.038574
8    7474.903076    7274.864502 -14482.689209  7474.903076    2.000000  7274.864502        0.0  200.038574      100.038574
high_util=True, low_delay=False, ramp_up=False, ramp_down=False.[0m
[07/20 18:14:53]  --------------------------------------------------------------------------------
[07/20 18:14:53]  Iteration: 212 (38 solution, 173 counterexamples)
[07/20 18:15:03]  Generator returned sat in 6.497520 secs.
[07/20 18:15:03]  Candidate solution: 
[1m[94mif(qbound[t][8]):
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:15:04]  Improved number of small numbers from 57 to 100 out of a max of 100
[07/20 18:15:04]  Verifer returned sat in 0.430768 secs.
[07/20 18:15:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6949.869141    6149.869385 -14482.689453  6949.869141    0.077881  6149.869385        0.0  799.999756      700.000000
1    6949.869141    6249.869385 -14482.689453  6949.869141  799.999756  6249.869385        0.0  699.999756      600.000000
2    6949.869141    6349.869141 -14482.689453  6949.869141    0.038330  6349.869141        0.0  600.000000      500.000000
3    6949.869141    6449.869385 -14482.689453  6949.869141  599.980957  6449.869385        0.0  499.999756      400.000000
4    6949.869141    6649.869141 -14482.689453  6949.869141  449.990479  6649.869141        0.0  300.000000      300.000000
5    7074.864258    6674.845215 -14482.689453  7074.864258  424.995117  6674.845215        0.0  400.019043      324.995117
6    7074.864258    6749.927002 -14482.689453  7074.864258  374.985596  6749.927002        0.0  324.937256      224.995117
7    7074.864258    6949.850098 -14482.689453  7074.864258  300.057617  6949.850098        0.0  125.014160      124.995117
8    7249.869385    6949.869141 -14482.689453  7249.869385  300.019287  6949.869141        0.0  300.000244      200.000244
high_util=True, low_delay=False, ramp_up=False, ramp_down=False.[0m
[07/20 18:15:04]  --------------------------------------------------------------------------------
[07/20 18:15:04]  Iteration: 213 (38 solution, 174 counterexamples)
[07/20 18:15:12]  Generator returned sat in 4.202069 secs.
[07/20 18:15:12]  Candidate solution: 
[1m[94mif(qbound[t][8]):
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:15:13]  Improved gap from 9/800 to 23.4375
[07/20 18:15:13]  Improved number of small numbers from 62 to 99 out of a max of 101
[07/20 18:15:13]  Verifer returned sat in 0.671060 secs.
[07/20 18:15:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7626.450684    7203.013184 -14482.689453  7626.450684    0.077637  7203.013184        0.0  423.437500        423.4375
1    7626.450684    7303.013184 -14482.689453  7626.450684  423.437500  7303.013184        0.0  323.437500        323.4375
2    7626.450684    7403.013184 -14482.689453  7626.450684    0.038086  7403.013184        0.0  223.437500        223.4375
3    7626.450684    7503.013184 -14482.689453  7626.450684  106.096680  7503.013184        0.0  123.437500        123.4375
4    7626.450684    7599.907227 -14482.689453  7626.450684   53.048340  7599.907227        0.0   26.543457         23.4375
5    7626.450684    7603.013184 -14406.126953  7626.450684   26.524170  7603.013184        0.0   23.437500          0.0000
6    7626.450684    7626.450684 -14329.564453  7626.450684   13.262085  7626.450684        0.0    0.000000        -23.4375
7    7749.888184    7649.888184 -14329.564453  7749.888184  123.437500  7649.888184        0.0  100.000000          0.0000
8    7749.888184    7749.888184 -14329.564453  7749.888184   49.980957  7749.888184        0.0    0.000000       -100.0000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:15:14]  --------------------------------------------------------------------------------
[07/20 18:15:14]  Iteration: 214 (38 solution, 175 counterexamples)
[07/20 18:15:22]  Generator returned sat in 4.088391 secs.
[07/20 18:15:22]  Candidate solution: 
[1m[94mif(qbound[t][8]):
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:15:22]  Improved gap from 375/16 to 23.4375
[07/20 18:15:23]  Improved number of small numbers from 101 to 101 out of a max of 101
[07/20 18:15:23]  Verifer returned sat in 0.680943 secs.
[07/20 18:15:23]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7949.821777    7526.384277 -14482.689697  7949.821777    0.077637  7526.384277        0.0  423.437500        423.4375
1    7949.821777    7626.384277 -14482.689697  7949.821777    0.019043  7626.384277        0.0  323.437500        323.4375
2    7949.821777    7726.384277 -14482.689697  7949.821777    0.038086  7726.384277        0.0  223.437500        223.4375
3    7949.821777    7826.384277 -14482.689697  7949.821777   94.826172  7826.384277        0.0  123.437500        123.4375
4    7949.821777    7925.346191 -14482.689697  7949.821777   47.913086  7925.346191        0.0   24.475586         23.4375
5    7949.821777    7926.384277 -14406.127197  7949.821777   24.456543  7926.384277        0.0   23.437500          0.0000
6    7949.821777    7949.821777 -14329.564697  7949.821777   12.728271  7949.821777        0.0    0.000000        -23.4375
7    8073.259277    7973.259277 -14329.564697  8073.259277  123.437500  7973.259277        0.0  100.000000          0.0000
8    8073.259277    8073.259277 -14329.564697  8073.259277   47.913086  8073.259277        0.0    0.000000       -100.0000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:15:23]  --------------------------------------------------------------------------------
[07/20 18:15:23]  Iteration: 215 (38 solution, 176 counterexamples)
[07/20 18:15:32]  Generator returned sat in 5.204462 secs.
[07/20 18:15:32]  Candidate solution: 
[1m[94mif(qbound[t][8]):
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:15:33]  Improved gap from 375/16 to 23.4375
[07/20 18:15:33]  Improved number of small numbers from 64 to 101 out of a max of 101
[07/20 18:15:33]  Verifer returned sat in 0.853134 secs.
[07/20 18:15:33]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6971.803467    6445.259766 -14482.689697  6971.803467    0.077148  6445.259766        0.0  526.543701      526.543457
1    6971.803467    6545.259766 -14482.689697  6971.803467  526.524170  6545.259766        0.0  426.543701      426.543457
2    6971.803467    6545.260010 -14482.689697  6971.803467    0.038086  6545.260010        0.0  426.543457      326.543457
3    6971.803467    6645.260010 -14482.689697  6971.803467  379.390625  6645.260010        0.0  326.543457      226.543457
4    6971.803467    6845.260010 -14482.689697  6971.803467  191.195312  6845.260010        0.0  126.543457      126.543457
5    6971.803467    6921.096680 -14482.689697  6971.803467   97.097656  6921.096680        0.0   50.706787       26.543457
6    6971.803467    6945.260010 -14409.233154  6971.803467   50.048828  6945.260010        0.0   26.543457        0.000000
7    6971.803467    6971.803467 -14332.670654  6971.803467   26.524414  6971.803467        0.0    0.000000      -23.437500
8    7098.346924    6995.240967 -14332.670654  7098.346924  126.543457  6995.240967        0.0  103.105957        3.105957
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:15:34]  --------------------------------------------------------------------------------
[07/20 18:15:34]  Iteration: 216 (38 solution, 177 counterexamples)
[07/20 18:15:45]  Generator returned sat in 7.852749 secs.
[07/20 18:15:46]  Candidate solution: 
[1m[94mif(qbound[t][8]):
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:15:46]  Improved gap from 5081/512 to 23.4375
[07/20 18:15:46]  Improved number of small numbers from 55 to 101 out of a max of 101
[07/20 18:15:46]  Verifer returned sat in 0.733585 secs.
[07/20 18:15:46]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6573.804443    6050.366943 -14584.223145  6573.804443    0.076904  6050.366943        0.0  523.437500        523.4375
1    6573.804443    6126.929688 -14584.223145  6573.804443    0.038330  6126.929688        0.0  446.874756        423.4375
2    6573.804443    6250.366943 -14584.223145  6573.804443    0.038086  6250.366943        0.0  323.437500        323.4375
3    6573.804443    6250.405273 -14584.223145  6573.804443  242.875000  6250.405273        0.0  323.399170        223.4375
4    6573.804443    6450.366943 -14584.223145  6573.804443  123.437500  6450.366943        0.0  123.437500        123.4375
5    6573.804443    6450.366943 -14584.223145  6573.804443   63.718750  6450.366943        0.0  123.437500         23.4375
6    6573.804443    6550.366943 -14507.660645  6573.804443   33.859375  6550.366943        0.0   23.437500          0.0000
7    6573.804443    6573.804443 -14431.098145  6573.804443   18.929688  6573.804443        0.0    0.000000        -23.4375
8    6697.241943    6597.241943 -14431.098145  6697.241943  123.437500  6597.241943        0.0  100.000000          0.0000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:15:47]  --------------------------------------------------------------------------------
[07/20 18:15:47]  Iteration: 217 (38 solution, 178 counterexamples)
[07/20 18:16:05]  Generator returned sat in 13.921321 secs.
[07/20 18:16:05]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:16:06]  Improved number of small numbers from 47 to 100 out of a max of 100
[07/20 18:16:06]  Verifer returned sat in 1.213822 secs.
[07/20 18:16:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7093.283203    6893.273438 -15527.129639  7093.283203    0.076904  6893.273438        0.0  200.009766      100.009766
1    7093.283203    7044.249756 -15527.129639  7093.283203    0.038086  7044.249756        0.0   49.033447        0.009766
2    7093.283203    7093.273438 -15527.129639  7093.283203    0.009766  7093.273438        0.0    0.009766      -99.990234
3    7693.263916    7195.273682 -15527.129639  7693.263916  599.990479  7195.273682        0.0  497.990234      399.990479
4    7693.263916    7393.273438 -15527.129639  7693.263916  450.995361  7393.273438        0.0  299.990479      299.990479
5    7793.282959    7393.273438 -15527.129639  7793.282959  400.009521  7393.273438        0.0  400.009521      300.009521
6    7793.282959    7493.273682 -15527.129639  7793.282959  300.000000  7493.273682        0.0  300.009277      200.009521
7    7793.282959    7693.273438 -15527.129639  7793.282959  298.000000  7693.273438        0.0  100.009521      100.009521
8    7993.273438    7693.273438 -15527.129639  7993.273438  300.000000  7693.273438        0.0  300.000000      200.000000
high_util=True, low_delay=False, ramp_up=False, ramp_down=False.[0m
[07/20 18:16:07]  --------------------------------------------------------------------------------
[07/20 18:16:07]  Iteration: 218 (38 solution, 179 counterexamples)
[07/20 18:16:17]  Generator returned sat in 6.941033 secs.
[07/20 18:16:18]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:16:22]  Improved gap from 39/4096 to 1.5625
[07/20 18:16:23]  Improved number of small numbers from 101 to 101 out of a max of 101
[07/20 18:16:23]  Verifer returned sat in 4.903471 secs.
[07/20 18:16:23]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7289.443604    7087.099854 -15771.818604  7289.443604    0.076904  7087.099854        0.0  202.343750      102.343750
1    7289.443604    7287.099854 -15771.818604  7289.443604    0.038086  7287.099854        0.0    2.343750        2.343750
2    7289.443604    7287.099854 -15674.162354  7289.443604    0.038086  7287.099854        0.0    2.343750        0.000000
3    7291.006104    7289.443604 -15575.724854  7291.006104    3.906250  7289.443604        0.0    1.562500        0.000000
4    7392.568604    7323.011963 -15575.724854  7392.568604  103.125000  7323.011963        0.0   69.556641        1.562500
5    7392.568604    7391.006104 -15477.287354  7392.568604   69.518555  7391.006104        0.0    1.562500        0.000000
6    7444.459229    7392.568604 -15435.691650  7444.459229   53.453125  7392.568604        0.0   51.890625       -6.513672
7    7470.857666    7450.972900 -15355.576416  7470.857666   78.289062  7450.972900        0.0   19.884766        0.000000
8    7554.097900    7470.895752 -15355.576416  7554.097900  103.125000  7470.895752        0.0   83.202148      -16.759766
high_util=False, low_delay=True, ramp_up=False, ramp_down=False.[0m
[07/20 18:16:23]  --------------------------------------------------------------------------------
[07/20 18:16:23]  Iteration: 219 (38 solution, 180 counterexamples)
[07/20 18:16:32]  Generator returned sat in 4.952261 secs.
[07/20 18:16:32]  Candidate solution: 
[1m[94mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:16:40]  Improved gap from 39/2048 to 1.5625
[07/20 18:16:40]  Improved number of small numbers from 56 to 101 out of a max of 101
[07/20 18:16:40]  Verifer returned sat in 7.488343 secs.
[07/20 18:16:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5506.206787    5307.769287 -13992.488525  5506.206787    0.076416  5307.769287        0.0  198.437500       98.437500
1    5506.206787    5506.206787 -13992.488525  5506.206787    0.038086  5506.206787        0.0    0.000000       -1.562500
2    5509.369873    5509.331787 -13895.613525  5509.369873    3.163086  5509.331787        0.0    0.038086       -1.524414
3    5512.456787    5510.894287 -13797.176025  5512.456787    3.125000  5510.894287        0.0    1.562500        0.000000
4    5614.019287    5542.439209 -13797.176025  5614.019287  103.125000  5542.439209        0.0   71.580078        1.562500
5    5614.019287    5612.456787 -13698.738525  5614.019287   69.678711  5612.456787        0.0    1.562500        0.000000
6    5666.019287    5614.019287 -13650.738525  5666.019287   53.562500  5614.019287        0.0   52.000000        0.000000
7    5692.363037    5666.057373 -13577.082275  5692.363037   78.343750  5666.057373        0.0   26.305664        0.000000
8    5767.038330    5692.401367 -13577.082275  5767.038330  100.980957  5692.401367        0.0   74.636963      -25.324707
high_util=False, low_delay=True, ramp_up=False, ramp_down=False.[0m
[07/20 18:16:40]  --------------------------------------------------------------------------------
[07/20 18:16:40]  Iteration: 220 (38 solution, 181 counterexamples)
[07/20 18:16:50]  Generator returned sat in 5.852456 secs.
[07/20 18:16:50]  Candidate solution: 
[1m[94mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:16:51]  Verifer returned unsat in 0.394173 secs.
[07/20 18:16:51]  Proved solution: 
[1m[92mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:16:51]  --------------------------------------------------------------------------------
[07/20 18:16:51]  Iteration: 221 (39 solution, 181 counterexamples)
[07/20 18:17:05]  Generator returned sat in 9.937540 secs.
[07/20 18:17:05]  Candidate solution: 
[1m[94mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:17:05]  Verifer returned unsat in 0.252486 secs.
[07/20 18:17:05]  Proved solution: 
[1m[92mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:17:05]  --------------------------------------------------------------------------------
[07/20 18:17:05]  Iteration: 222 (40 solution, 181 counterexamples)
[07/20 18:17:16]  Generator returned sat in 6.499235 secs.
[07/20 18:17:16]  Candidate solution: 
[1m[94mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:17:17]  Verifer returned unsat in 0.337418 secs.
[07/20 18:17:17]  Proved solution: 
[1m[92mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:17:17]  --------------------------------------------------------------------------------
[07/20 18:17:17]  Iteration: 223 (41 solution, 181 counterexamples)
[07/20 18:17:26]  Generator returned sat in 5.195960 secs.
[07/20 18:17:26]  Candidate solution: 
[1m[94mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:17:26]  Verifer returned unsat in 0.290579 secs.
[07/20 18:17:26]  Proved solution: 
[1m[92mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:17:26]  --------------------------------------------------------------------------------
[07/20 18:17:26]  Iteration: 224 (42 solution, 181 counterexamples)
[07/20 18:17:35]  Generator returned sat in 4.962184 secs.
[07/20 18:17:36]  Candidate solution: 
[1m[94mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:17:36]  Verifer returned unsat in 0.259472 secs.
[07/20 18:17:36]  Proved solution: 
[1m[92mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:17:36]  --------------------------------------------------------------------------------
[07/20 18:17:36]  Iteration: 225 (43 solution, 181 counterexamples)
[07/20 18:18:00]  Generator returned sat in 19.688777 secs.
[07/20 18:18:00]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:18:01]  Improved gap from 0 to 7.8125
[07/20 18:18:01]  Improved number of small numbers from 64 to 101 out of a max of 101
[07/20 18:18:01]  Verifer returned sat in 0.949383 secs.
[07/20 18:18:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6179.343262    6079.343262 -13815.811768  6179.343262    0.076416  6079.343262        0.0  100.000000        0.000244
1    6279.305176    6179.343262 -13815.811768  6279.305176  199.961914  6179.343262        0.0   99.961914       -0.037842
2    6279.343018    6279.343018 -13797.176025  6279.343018   99.999756  6279.343018        0.0    0.000000      -81.364258
3    6529.343018    6404.419189 -13797.176025  6529.343018  250.000000  6404.419189        0.0  124.923828       68.635742
4    6529.419189    6529.381348 -13797.176025  6529.419189  125.000000  6529.381348        0.0    0.037842      -31.288086
5    6591.881348    6560.707520 -13728.350098  6591.881348   62.500000  6560.707520        0.0   31.173828        0.000000
6    6591.957520    6591.919434 -13636.200684  6591.957520   31.250000  6591.919434        0.0    0.038086       -7.774414
7    6607.544434    6607.506104 -13551.787354  6607.544434   15.625000  6607.506104        0.0    0.038330       -7.774170
8    6615.318604    6615.318604 -13551.787354  6615.318604    7.812500  6615.318604        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:18:01]  --------------------------------------------------------------------------------
[07/20 18:18:01]  Iteration: 226 (43 solution, 182 counterexamples)
[07/20 18:18:13]  Generator returned sat in 7.403911 secs.
[07/20 18:18:13]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:18:14]  Improved gap from 0 to 35.9375
[07/20 18:18:14]  Improved number of small numbers from 56 to 101 out of a max of 101
[07/20 18:18:14]  Verifer returned sat in 0.688854 secs.
[07/20 18:18:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7632.191895    7470.526123 -15168.660889  7632.191895    0.076416  7470.526123        0.0  161.665771       99.999756
1    7632.192139    7583.754639 -15168.660889  7632.192139  161.666016  7583.754639        0.0   48.437500        0.000000
2    7638.213623    7638.213623 -15110.619873  7638.213623   54.458984  7638.213623        0.0    0.000000      -35.937500
3    7735.852295    7674.151123 -15072.321045  7735.852295   97.638672  7674.151123        0.0   61.701172        0.000000
4    7777.963623    7735.852295 -15014.432373  7777.963623  103.812500  7735.852295        0.0   42.111328        0.000000
5    7813.901123    7777.963623 -14950.369873  7813.901123   78.048828  7777.963623        0.0   35.937500        0.000000
6    7849.838623    7813.901123 -14886.307373  7849.838623   71.875000  7813.901123        0.0   35.937500        0.000000
7    7885.776123    7849.838623 -14822.244873  7885.776123   71.875000  7849.838623        0.0   35.937500        0.000000
8    7908.831787    7885.776123 -14822.244873  7908.831787   58.993164  7885.776123        0.0   23.055664      -76.944336
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:18:14]  --------------------------------------------------------------------------------
[07/20 18:18:14]  Iteration: 227 (43 solution, 183 counterexamples)
[07/20 18:18:27]  Generator returned sat in 8.935357 secs.
[07/20 18:18:27]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 18:18:28]  Improved gap from 311/8192 to 37.5
[07/20 18:18:28]  Improved number of small numbers from 44 to 101 out of a max of 101
[07/20 18:18:28]  Verifer returned sat in 0.954920 secs.
[07/20 18:18:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7463.663330    7335.473633 -14936.783203  7463.663330    0.076172  7335.473633        0.0  128.189697       28.189697
1    7463.663330    7463.625488 -14936.783203  7463.663330  128.189697  7463.625488        0.0    0.037842      -71.810303
2    7735.511719    7635.473633 -14936.783203  7735.511719  271.886230  7635.473633        0.0  100.038086      100.038086
3    7735.511719    7735.473633 -14936.783203  7735.511719   70.462158  7735.473633        0.0    0.038086        0.038086
4    7807.435791    7799.473633 -14936.783203  7807.435791   71.962158  7799.473633        0.0    7.962158      -28.037842
5    7872.935791    7835.473633 -14874.283203  7872.935791   73.462158  7835.473633        0.0   37.462158       -0.037842
6    7910.435791    7872.973633 -14813.245117  7910.435791   74.962158  7872.973633        0.0   37.462158       -1.499756
7    7949.435791    7911.935791 -14750.745361  7949.435791   76.462158  7911.935791        0.0   37.500000        0.000000
8    7949.435791    7949.435791 -14750.745361  7949.435791    2.000000  7949.435791        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:18:29]  --------------------------------------------------------------------------------
[07/20 18:18:29]  Iteration: 228 (43 solution, 184 counterexamples)
[07/20 18:18:42]  Generator returned sat in 9.184626 secs.
[07/20 18:18:42]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/20 18:18:44]  Verifer returned unsat in 1.365188 secs.
[07/20 18:18:44]  Proved solution: 
[1m[92mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/20 18:18:44]  --------------------------------------------------------------------------------
[07/20 18:18:44]  Iteration: 229 (44 solution, 184 counterexamples)
[07/20 18:18:57]  Generator returned sat in 9.326232 secs.
[07/20 18:18:57]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/20 18:18:58]  Improved gap from 311/8192 to 100
[07/20 18:18:58]  Improved number of small numbers from 49 to 89 out of a max of 101
[07/20 18:18:58]  Verifer returned sat in 0.686214 secs.
[07/20 18:18:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7091.089111    7091.051025 -14740.803223  7091.089111    0.076172  7091.051025        0.0    0.038086       -0.037842
1    7191.126953    7091.126953 -14740.803223  7191.126953  100.075928  7091.126953        0.0  100.000000        0.000000
2    7192.674316    7192.636506 -14740.803223  7192.674316  101.547363  7192.636506        0.0    0.037810      -98.452637
3    7291.655488    7291.127015 -14740.803223  7291.655488   99.018982  7291.127015        0.0    0.528473      -99.471465
4    7491.164979    7491.126953 -14740.803223  7491.164979  200.037964  7491.126953        0.0    0.038026        0.038026
5    7893.202881    7491.202881 -14740.803223  7893.202881  402.075928  7491.202881        0.0  402.000000      302.075928
6    7893.202881    7591.127197 -14740.803223  7893.202881    2.000000  7591.127197        0.0  302.075684      202.075928
7    7893.202881    7691.127197 -14740.803223  7893.202881    2.000000  7691.127197        0.0  202.075684      102.075928
8    7893.202881    7791.127197 -14740.803223  7893.202881    2.000000  7791.127197        0.0  102.075684        2.075928
high_util=True, low_delay=False, ramp_up=False, ramp_down=False.[0m
[07/20 18:18:59]  --------------------------------------------------------------------------------
[07/20 18:18:59]  Iteration: 230 (44 solution, 185 counterexamples)
[07/20 18:19:15]  Generator returned sat in 12.303300 secs.
[07/20 18:19:15]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/20 18:19:16]  Improved gap from 0 to 12.5
[07/20 18:19:16]  Improved number of small numbers from 73 to 101 out of a max of 101
[07/20 18:19:16]  Verifer returned sat in 0.524902 secs.
[07/20 18:19:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0    7192.974854    7192.937256 -14740.803467  7192.974854    0.076172  7192.937256        0.0   0.037598      -99.962402
1    7292.975098    7292.937256 -14740.803467  7292.975098  100.037842  7292.937256        0.0   0.037842      -99.962158
2    7392.975098    7392.937256 -14740.803467  7392.975098  100.037842  7392.937256        0.0   0.037842      -99.962158
3    7668.937256    7592.937256 -14740.803467  7668.937256  276.000000  7592.937256        0.0  76.000000       76.000000
4    7732.937256    7668.975098 -14740.803467  7732.937256  140.000000  7668.975098        0.0  63.962158       40.000000
5    7740.975098    7740.937012 -14726.765381  7740.975098   72.000000  7740.937012        0.0   0.038086      -37.924072
6    7778.937012    7778.899170 -14647.727295  7778.937012   38.000000  7778.899170        0.0   0.037842      -20.924072
7    7799.899170    7799.861084 -14560.227295  7799.899170   21.000000  7799.861084        0.0   0.038086      -12.461914
8    7812.361084    7812.361084 -14560.227295  7812.361084   12.500000  7812.361084        0.0   0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:19:16]  --------------------------------------------------------------------------------
[07/20 18:19:16]  Iteration: 231 (44 solution, 186 counterexamples)
[07/20 18:19:27]  Generator returned sat in 6.739798 secs.
[07/20 18:19:27]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 18:19:29]  Verifer returned unsat in 1.254588 secs.
[07/20 18:19:29]  Proved solution: 
[1m[92mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 18:19:29]  --------------------------------------------------------------------------------
[07/20 18:19:29]  Iteration: 232 (45 solution, 186 counterexamples)
[07/20 18:19:37]  Generator returned sat in 4.586358 secs.
[07/20 18:19:38]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/20 18:19:39]  Verifer returned unsat in 1.098169 secs.
[07/20 18:19:39]  Proved solution: 
[1m[92mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/20 18:19:39]  --------------------------------------------------------------------------------
[07/20 18:19:39]  Iteration: 233 (46 solution, 186 counterexamples)
[07/20 18:20:03]  Generator returned sat in 20.026157 secs.
[07/20 18:20:03]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 18:20:04]  Improved gap from 0 to 48.4375
[07/20 18:20:04]  Improved number of small numbers from 49 to 101 out of a max of 101
[07/20 18:20:04]  Verifer returned sat in 0.552665 secs.
[07/20 18:20:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6518.532959    6518.513916 -14491.519531  6518.532959    0.076172  6518.513916        0.0    0.019043      -99.980957
1    6718.532959    6718.513916 -14491.519531  6718.532959  200.019043  6718.513916        0.0    0.019043        0.019043
2    7066.951416    6818.513672 -14491.519531  7066.951416  348.437500  6818.513672        0.0  248.437744      248.437500
3    7066.951416    6868.902100 -14491.519531  7066.951416    0.019043  6868.902100        0.0  198.049316      148.437500
4    7066.951416    7018.494629 -14491.519531  7066.951416    2.000000  7018.494629        0.0   48.456787       48.437500
5    7066.951416    7018.513916 -14439.957031  7066.951416    2.000000  7018.513916        0.0   48.437500        0.000000
6    7066.951416    7066.951416 -14388.394531  7066.951416    2.000000  7066.951416        0.0    0.000000      -48.437500
7    7168.476074    7120.038330 -14341.481689  7168.476074  101.524658  7120.038330        0.0   48.437744        0.000000
8    7168.476074    7168.476074 -14341.481689  7168.476074    2.000000  7168.476074        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:20:04]  --------------------------------------------------------------------------------
[07/20 18:20:04]  Iteration: 234 (46 solution, 187 counterexamples)
[07/20 18:20:18]  Generator returned sat in 9.284415 secs.
[07/20 18:20:18]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 18:20:19]  Improved gap from 751/16 to 48.4375
[07/20 18:20:19]  Improved number of small numbers from 58 to 101 out of a max of 101
[07/20 18:20:19]  Verifer returned sat in 1.124222 secs.
[07/20 18:20:19]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0    7084.878174    6989.476318 -14502.367676  7084.878174    0.075928  6989.476318        0.0  95.401855       95.401855
1    7084.878174    6989.476318 -14497.769531  7084.878174    0.037842  6989.476318        0.0  95.401855        0.000000
2    7184.840332    7133.842529 -14497.769531  7184.840332  195.364014  7133.842529        0.0  50.997803       -0.037842
3    7233.315674    7184.878174 -14446.207031  7233.315674   99.473145  7184.878174        0.0  48.437500        0.000000
4    7333.815674    7333.277832 -14446.207031  7333.815674  148.937500  7333.277832        0.0   0.537842        0.500000
5    7333.815674    7333.315674 -14394.644775  7333.815674    0.500000  7333.315674        0.0   0.500000      -47.937744
6    7434.802246    7386.364746 -14347.693604  7434.802246  101.486572  7386.364746        0.0  48.437500        0.000000
7    7434.802246    7434.802246 -14296.131348  7434.802246    0.500000  7434.802246        0.0   0.000000      -48.437744
8    7487.314453    7483.239990 -14296.131348  7487.314453   52.512207  7483.239990        0.0   4.074463      -95.925537
high_util=False, low_delay=True, ramp_up=False, ramp_down=False.[0m
[07/20 18:20:20]  --------------------------------------------------------------------------------
[07/20 18:20:20]  Iteration: 235 (46 solution, 188 counterexamples)
[07/20 18:20:33]  Generator returned sat in 8.874720 secs.
[07/20 18:20:33]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:20:34]  Improved gap from 1/1200 to 0
[07/20 18:20:34]  Improved number of small numbers from 55 to 74 out of a max of 101
[07/20 18:20:34]  Verifer returned sat in 1.449394 secs.
[07/20 18:20:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t
0    8273.401367    8273.385010 -14658.145020  8273.401367  0.075684  8273.385010        0.0  0.016357        0.016277
1    8273.402344    8273.402100 -14558.162354  8273.402344  0.017334  8273.402100        0.0  0.000244       -0.000081
2    8273.402588    8273.402579 -14458.162842  8273.402588  0.000488  8273.402579        0.0  0.000009       -0.000325
3    8273.421150    8273.403076 -14358.181079  8273.421150  0.018571  8273.403076        0.0  0.018074        0.000000
4    8273.421150    8273.421150 -14258.181396  8273.421150  0.018066  8273.421150        0.0  0.000000       -0.000318
5    8273.431150    8273.421507 -14158.191079  8273.431150  0.010000  8273.421507        0.0  0.009643        0.000000
6    8273.440436    8273.431150 -14058.200439  8273.440436  0.018929  8273.431150        0.0  0.009286       -0.000075
7    8273.441150    8273.440793 -13958.210693  8273.441150  0.010000  8273.440793        0.0  0.000357       -0.009614
8    8273.450793    8273.450793 -13958.210693  8273.450793  0.010000  8273.450793        0.0  0.000000      -99.999972
high_util=False, low_delay=True, ramp_up=False, ramp_down=False.[0m
[07/20 18:20:35]  --------------------------------------------------------------------------------
[07/20 18:20:35]  Iteration: 236 (46 solution, 189 counterexamples)
[07/20 18:20:59]  Generator returned sat in 20.008432 secs.
[07/20 18:20:59]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 18:20:59]  Improved gap from 0 to 100
[07/20 18:21:00]  Improved number of small numbers from 45 to 81 out of a max of 101
[07/20 18:21:00]  Verifer returned sat in 0.897746 secs.
[07/20 18:21:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    8171.270020    8171.231934 -14556.067627  8171.270020    0.075439  8171.231934        0.0    0.038086       -0.037598
1    8271.307617    8171.307617 -14556.067627  8271.307617  100.075684  8171.307617        0.0  100.000000        0.000000
2    8459.747803    8371.307617 -14556.067627  8459.747803  288.440186  8371.307617        0.0   88.440186       88.440186
3    8459.747803    8459.709999 -14556.067627  8459.747803   18.278885  8459.709999        0.0    0.037804      -11.559814
4    8496.767769    8496.729927 -14556.067627  8496.767769   37.057770  8496.729927        0.0    0.037842      -74.539849
5    8571.345466    8571.307625 -14556.067627  8571.345466   74.615540  8571.307625        0.0    0.037842      -99.962151
6    8721.038704    8671.307617 -14556.067627  8721.038704  149.731079  8671.307617        0.0   49.731087      -50.268913
7    8971.269775    8771.307617 -14556.067627  8971.269775  299.962158  8771.307617        0.0  199.962158       99.962158
8    9371.731934    8971.307617 -14556.067627  9371.731934  600.424316  8971.307617        0.0  400.424316      400.424316
high_util=True, low_delay=False, ramp_up=True, ramp_down=False.[0m
[07/20 18:21:01]  --------------------------------------------------------------------------------
[07/20 18:21:01]  Iteration: 237 (46 solution, 190 counterexamples)
[07/20 18:21:19]  Generator returned sat in 13.840573 secs.
[07/20 18:21:19]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/20 18:21:20]  Improved gap from 0 to 48.4375
[07/20 18:21:20]  Improved number of small numbers from 69 to 101 out of a max of 101
[07/20 18:21:20]  Verifer returned sat in 0.797550 secs.
[07/20 18:21:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7420.734863    7370.134766 -13754.894775  7420.734863    0.075439  7370.134766        0.0   50.600098       50.600098
1    7469.209961    7420.772705 -13753.970215  7469.209961   99.075195  7420.772705        0.0   48.437256       -0.000244
2    7769.172363    7569.210205 -13753.970215  7769.172363  348.399658  7569.210205        0.0  199.962158      199.962158
3    7769.172363    7569.210205 -13753.970215  7769.172363  199.924561  7569.210205        0.0  199.962158       99.962158
4    7769.710205    7769.209961 -13753.970215  7769.710205  200.500000  7769.209961        0.0    0.500244        0.500000
5    7769.710205    7769.393311 -13702.590820  7769.710205    0.500000  7769.393311        0.0    0.316895      -48.120605
6    7870.734863    7822.297363 -13655.494873  7870.734863  101.341553  7822.297363        0.0   48.437500        0.000000
7    7870.734863    7870.734863 -13603.932373  7870.734863    0.500000  7870.734863        0.0    0.000000      -48.437500
8    7922.747314    7919.172363 -13603.932373  7922.747314   52.012451  7919.172363        0.0    3.574951      -96.425049
high_util=False, low_delay=True, ramp_up=False, ramp_down=False.[0m
[07/20 18:21:20]  --------------------------------------------------------------------------------
[07/20 18:21:20]  Iteration: 238 (46 solution, 191 counterexamples)
[07/20 18:21:35]  Generator returned sat in 10.845072 secs.
[07/20 18:21:36]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/20 18:21:36]  Improved gap from 0 to 10.9375
[07/20 18:21:36]  Improved number of small numbers from 101 to 101 out of a max of 101
[07/20 18:21:36]  Verifer returned sat in 0.660954 secs.
[07/20 18:21:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6870.810059    6770.810059 -13753.970215  6870.810059    0.075439  6770.810059        0.0  100.000000      100.000000
1    6870.810059    6770.810059 -13753.970215  6870.810059    0.037598  6770.810059        0.0  100.000000        0.000000
2    7170.772461    6870.810059 -13753.970215  7170.772461  399.962402  6870.810059        0.0  299.962402      199.962402
3    7170.772461    7070.810059 -13753.970215  7170.772461  288.000000  7070.810059        0.0   99.962402       99.962402
4    7215.810059    7170.810059 -13753.970215  7215.810059  145.000000  7170.810059        0.0   45.000000       45.000000
5    7244.310059    7244.272461 -13753.970215  7244.310059   73.500000  7244.272461        0.0    0.037598      -26.500000
6    7282.022461    7271.122559 -13665.220215  7282.022461   37.750000  7271.122559        0.0   10.899902       -0.037598
7    7290.997559    7282.060059 -13576.157715  7290.997559   19.875000  7282.060059        0.0    8.937500       -2.000000
8    7292.997559    7292.997559 -13576.157715  7292.997559   10.937500  7292.997559        0.0    0.000000     -100.000000
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:21:37]  --------------------------------------------------------------------------------
[07/20 18:21:37]  Iteration: 239 (46 solution, 192 counterexamples)
[07/20 18:21:52]  Generator returned sat in 11.142704 secs.
[07/20 18:21:52]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:21:54]  Verifer returned unsat in 1.888921 secs.
[07/20 18:21:54]  Proved solution: 
[1m[92mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:21:54]  --------------------------------------------------------------------------------
[07/20 18:21:54]  Iteration: 240 (47 solution, 192 counterexamples)
[07/20 18:22:07]  Generator returned sat in 7.883703 secs.
[07/20 18:22:07]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:07]  Verifer returned unsat in 0.155642 secs.
[07/20 18:22:07]  Proved solution: 
[1m[92mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:07]  --------------------------------------------------------------------------------
[07/20 18:22:07]  Iteration: 241 (48 solution, 192 counterexamples)
[07/20 18:22:31]  Generator returned sat in 19.676605 secs.
[07/20 18:22:31]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 18:22:32]  Improved gap from 307/16384 to 10.9375
[07/20 18:22:32]  Improved number of small numbers from 51 to 101 out of a max of 101
[07/20 18:22:32]  Verifer returned sat in 0.574907 secs.
[07/20 18:22:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7369.812256    7269.812256 -13781.031250  7369.812256    0.075439  7269.812256        0.0  100.000000       99.962158
1    7369.812256    7269.850098 -13781.031006  7369.812256    0.037354  7269.850098        0.0   99.962158       -0.037598
2    7626.887451    7369.850098 -13781.031006  7626.887451  357.037354  7369.850098        0.0  257.037354      157.037598
3    7626.887451    7496.962158 -13781.031006  7626.887451  257.000000  7496.962158        0.0  129.925293       57.037598
4    7626.962158    7626.924805 -13769.930908  7626.962158  130.000000  7626.924805        0.0    0.037354      -31.787598
5    7693.424805    7658.750000 -13704.643311  7693.424805   66.500000  7658.750000        0.0   34.674805       -0.037354
6    7693.500000    7693.462402 -13615.581055  7693.500000   34.750000  7693.462402        0.0    0.037598      -10.899902
7    7712.337402    7704.399902 -13526.518555  7712.337402   18.875000  7704.399902        0.0    7.937500       -3.000000
8    7715.337402    7715.337402 -13526.518311  7715.337402   10.937500  7715.337402        0.0    0.000000      -99.999756
high_util=False, low_delay=True, ramp_up=False, ramp_down=True.[0m
[07/20 18:22:32]  --------------------------------------------------------------------------------
[07/20 18:22:32]  Iteration: 242 (48 solution, 193 counterexamples)
[07/20 18:22:46]  Generator returned sat in 9.238421 secs.
[07/20 18:22:46]  Candidate solution: 
[1m[94mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 18:22:46]  Improved gap from 1/600 to 100
[07/20 18:22:47]  Improved number of small numbers from 56 to 81 out of a max of 101
[07/20 18:22:47]  Verifer returned sat in 0.753860 secs.
[07/20 18:22:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7369.812012    7169.793457 -13780.974609  7369.812012    0.075439  7169.793457        0.0  200.018555      100.018555
1    7369.812012    7369.793457 -13780.974609  7369.812012    0.037109  7369.793457        0.0    0.018555        0.018555
2    7495.923096    7459.775436 -13780.974609  7495.923096  126.129639  7459.775436        0.0   36.147659       26.129639
3    7495.960602    7495.941925 -13780.974609  7495.960602   36.185165  7495.941925        0.0    0.018677      -73.832855
4    7569.812256    7569.793579 -13780.974609  7569.812256   73.870331  7569.793579        0.0    0.018677      -99.981201
5    7719.034241    7669.793579 -13780.974609  7719.034241  149.240662  7669.793579        0.0   49.240662      -50.759216
6    7969.774902    7869.793457 -13780.974609  7969.774902  299.981323  7869.793457        0.0   99.981445       99.981445
7    8471.256104    7969.793457 -13780.974609  8471.256104  601.462646  7969.793457        0.0  501.462646      501.462646
8    8471.256104    7969.812256 -13780.974609  8471.256104    2.000000  7969.812256        0.0  501.443848      401.462646
high_util=True, low_delay=False, ramp_up=False, ramp_down=False.[0m
[07/20 18:22:47]  --------------------------------------------------------------------------------
[07/20 18:22:47]  Iteration: 243 (48 solution, 194 counterexamples)
[07/20 18:22:52]  Generator returned unsat in 0.569422 secs.
[07/20 18:22:52]  [96mNo more solutions found[0m
[07/20 18:22:52]  Final solutions:
[07/20 18:22:52]  0: [1m[92mif(qbound[t][6]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  1: [1m[92mif(qbound[t][4]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  2: [1m[92mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  3: [1m[92mif(qbound[t][5]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  4: [1m[92mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  5: [1m[92mif(qbound[t][6]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  6: [1m[92mif(qbound[t][4]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  7: [1m[92mif(qbound[t][6]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  8: [1m[92mif(qbound[t][6]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  9: [1m[92mif(qbound[t][5]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  10: [1m[92mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  11: [1m[92mif(qbound[t][8]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  12: [1m[92mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  13: [1m[92mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  14: [1m[92mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/20 18:22:52]  15: [1m[92mif(qbound[t][4]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  16: [1m[92mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  17: [1m[92mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  18: [1m[92mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  19: [1m[92mif(qbound[t][8]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  20: [1m[92mif(qbound[t][5]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  21: [1m[92mif(qbound[t][6]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  22: [1m[92mif(qbound[t][8]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  23: [1m[92mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  24: [1m[92mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  25: [1m[92mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  26: [1m[92mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  27: [1m[92mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/20 18:22:52]  28: [1m[92mif(qbound[t][6]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  29: [1m[92mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  30: [1m[92mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  31: [1m[92mif(qbound[t][5]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  32: [1m[92mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  33: [1m[92mif(qbound[t][4]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  34: [1m[92mif(qbound[t][7]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  35: [1m[92mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/20 18:22:52]  36: [1m[92mif(qbound[t][4]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  37: [1m[92mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  38: [1m[92mif(qbound[t][5]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  39: [1m[92mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/20 18:22:52]  40: [1m[92mif(qbound[t][8]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  41: [1m[92mif(qbound[t][8]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  42: [1m[92mif(qbound[t][5]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  43: [1m[92mif(qbound[t][2]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  44: [1m[92mif(qbound[t][8]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  45: [1m[92mif(qbound[t][3]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  46: [1m[92mif(qbound[t][4]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  47: [1m[92mif(qbound[t][1]):
	c_f[0][t] = max(0.01, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/20 18:22:52]  Took 1815.439671 secs.
